{"version":3,"file":"flex-layout.umd.min.js","sources":["../../src/lib/flexbox/api/flex-offset.ts","../../src/lib/flexbox/api/flex-order.ts","../../src/lib/flexbox/api/layout-align.ts","../../src/lib/flexbox/api/layout-gap.ts","../../src/lib/flexbox/api/base-adapter.ts","../../src/lib/flexbox/api/class.ts","../../src/lib/utils/style-transforms.ts","../../src/lib/flexbox/api/style.ts","../../src/lib/module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/media-query/match-media.ts","../../src/lib/utils/add-alias.ts","../../src/lib/media-query/media-monitor.ts","../../src/lib/media-query/breakpoints/data/break-points.ts","../../src/lib/media-query/breakpoints/break-points-provider.ts","../../src/lib/media-query/_module.ts","../../src/lib/media-query/media-monitor-provider.ts","../../src/lib/utils/auto-prefixer.ts","../../src/lib/utils/layout-validator.ts","../../src/lib/flexbox/responsive/responsive-activation.ts","../../src/lib/flexbox/api/flex.ts","../../src/lib/flexbox/api/show-hide.ts","../../src/lib/flexbox/api/flex-fill.ts","../../src/lib/media-query/media-change.ts","../../src/lib/media-query/breakpoints/break-point-registry.ts","../../src/lib/utils/object-extend.ts","../../src/lib/media-query/observable-media.ts","../../src/lib/media-query/observable-media-provider.ts","../../src/lib/media-query/breakpoints/data/orientation-break-points.ts","../../src/lib/utils/breakpoint-tools.ts","../../src/lib/flexbox/api/base.ts","../../src/lib/flexbox/api/layout.ts","../../src/lib/flexbox/api/layout-wrap.ts","../../src/lib/utils/basis-validator.ts","../../src/lib/flexbox/api/flex-align.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnInit,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n  SkipSelf\n} from '@angular/core';\n\nimport {Subscription} from 'rxjs/Subscription';\n\nimport {BaseFxDirective} from './base';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\nimport {LayoutDirective} from './layout';\nimport {isFlowHorizontal} from '../../utils/layout-validator';\n\n/**\n * 'flex-offset' flexbox styling directive\n * Configures the 'margin-left' of the element in a layout container\n */\n@Directive({selector: `\n  [fxFlexOffset],\n  [fxFlexOffset.xs], [fxFlexOffset.sm], [fxFlexOffset.md], [fxFlexOffset.lg], [fxFlexOffset.xl],\n  [fxFlexOffset.lt-sm], [fxFlexOffset.lt-md], [fxFlexOffset.lt-lg], [fxFlexOffset.lt-xl],\n  [fxFlexOffset.gt-xs], [fxFlexOffset.gt-sm], [fxFlexOffset.gt-md], [fxFlexOffset.gt-lg]\n`})\nexport class FlexOffsetDirective extends BaseFxDirective implements OnInit, OnChanges, OnDestroy {\n\n  /* tslint:disable */\n  @Input('fxFlexOffset')       set offset(val)     { this._cacheInput('offset', val); }\n  @Input('fxFlexOffset.xs')    set offsetXs(val)   { this._cacheInput('offsetXs', val); }\n  @Input('fxFlexOffset.sm')    set offsetSm(val)   { this._cacheInput('offsetSm', val); };\n  @Input('fxFlexOffset.md')    set offsetMd(val)   { this._cacheInput('offsetMd', val); };\n  @Input('fxFlexOffset.lg')    set offsetLg(val)   { this._cacheInput('offsetLg', val); };\n  @Input('fxFlexOffset.xl')    set offsetXl(val)   { this._cacheInput('offsetXl', val); };\n\n  @Input('fxFlexOffset.lt-sm') set offsetLtSm(val) { this._cacheInput('offsetLtSm', val); };\n  @Input('fxFlexOffset.lt-md') set offsetLtMd(val) { this._cacheInput('offsetLtMd', val); };\n  @Input('fxFlexOffset.lt-lg') set offsetLtLg(val) { this._cacheInput('offsetLtLg', val); };\n  @Input('fxFlexOffset.lt-xl') set offsetLtXl(val) { this._cacheInput('offsetLtXl', val); };\n\n  @Input('fxFlexOffset.gt-xs') set offsetGtXs(val) { this._cacheInput('offsetGtXs', val); };\n  @Input('fxFlexOffset.gt-sm') set offsetGtSm(val) { this._cacheInput('offsetGtSm', val); };\n  @Input('fxFlexOffset.gt-md') set offsetGtMd(val) { this._cacheInput('offsetGtMd', val); };\n  @Input('fxFlexOffset.gt-lg') set offsetGtLg(val) { this._cacheInput('offsetGtLg', val); };\n\n  /* tslint:enable */\n  constructor(monitor: MediaMonitor,\n              elRef: ElementRef,\n              renderer: Renderer2,\n              @Optional() @SkipSelf() protected _container: LayoutDirective ) {\n    super(monitor, elRef, renderer);\n\n\n    this.watchParentFlow();\n  }\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  /**\n   * For @Input changes on the current mq activation property, see onMediaQueryChanges()\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['offset'] != null || this._mqActivation) {\n      this._updateWithValue();\n    }\n  }\n\n  /**\n   * Cleanup\n   */\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    if (this._layoutWatcher) {\n      this._layoutWatcher.unsubscribe();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    this._listenForMediaQueryChanges('offset', 0 , (changes: MediaChange) => {\n      this._updateWithValue(changes.value);\n    });\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  /** The flex-direction of this element's host container. Defaults to 'row'. */\n  protected _layout = 'row';\n\n  /**\n   * Subscription to the parent flex container's layout changes.\n   * Stored so we can unsubscribe when this directive is destroyed.\n   */\n  protected _layoutWatcher: Subscription;\n\n  /**\n   * If parent flow-direction changes, then update the margin property\n   * used to offset\n   */\n  protected watchParentFlow() {\n    if (this._container) {\n      // Subscribe to layout immediate parent direction changes (if any)\n      this._layoutWatcher = this._container.layout$.subscribe((direction) => {\n        // `direction` === null if parent container does not have a `fxLayout`\n        this._onLayoutChange(direction);\n      });\n    }\n  }\n\n  /**\n   * Caches the parent container's 'flex-direction' and updates the element's style.\n   * Used as a handler for layout change events from the parent flex container.\n   */\n  protected _onLayoutChange(direction?: string) {\n    this._layout = direction || this._layout || 'row';\n    this._updateWithValue();\n  }\n\n  /**\n   * Using the current fxFlexOffset value, update the inline CSS\n   * NOTE: this will assign `margin-left` if the parent flex-direction == 'row',\n   *       otherwise `margin-top` is used for the offset.\n   */\n  protected _updateWithValue(value?: string|number) {\n    value = value || this._queryInput('offset') || 0;\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n\n    this._applyStyleToElement(this._buildCSS(value));\n  }\n\n  protected _buildCSS(offset) {\n    let isPercent = String(offset).indexOf('%') > -1;\n    let isPx = String(offset).indexOf('px') > -1;\n    if (!isPx && !isPercent && !isNaN(offset)) {\n      offset = offset + '%';\n    }\n\n    // The flex-direction of this element's flex container. Defaults to 'row'.\n    let layout = this._getFlowDirection(this.parentElement, true);\n    return isFlowHorizontal(layout) ? {'margin-left': `${offset}`} : {'margin-top': `${offset}`};\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnInit,\n  OnChanges,\n  OnDestroy,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\n\nimport {BaseFxDirective} from './base';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\n\n/**\n * 'flex-order' flexbox styling directive\n * Configures the positional ordering of the element in a sorted layout container\n * @see https://css-tricks.com/almanac/properties/o/order/\n */\n@Directive({selector: `\n  [fxFlexOrder],\n  [fxFlexOrder.xs], [fxFlexOrder.sm], [fxFlexOrder.md], [fxFlexOrder.lg], [fxFlexOrder.xl],\n  [fxFlexOrder.lt-sm], [fxFlexOrder.lt-md], [fxFlexOrder.lt-lg], [fxFlexOrder.lt-xl],\n  [fxFlexOrder.gt-xs], [fxFlexOrder.gt-sm], [fxFlexOrder.gt-md], [fxFlexOrder.gt-lg]\n`})\nexport class FlexOrderDirective extends BaseFxDirective implements OnInit, OnChanges, OnDestroy {\n\n  /* tslint:disable */\n  @Input('fxFlexOrder')       set order(val)     { this._cacheInput('order', val); }\n  @Input('fxFlexOrder.xs')    set orderXs(val)   { this._cacheInput('orderXs', val); }\n  @Input('fxFlexOrder.sm')    set orderSm(val)   { this._cacheInput('orderSm', val); };\n  @Input('fxFlexOrder.md')    set orderMd(val)   { this._cacheInput('orderMd', val); };\n  @Input('fxFlexOrder.lg')    set orderLg(val)   { this._cacheInput('orderLg', val); };\n  @Input('fxFlexOrder.xl')    set orderXl(val)   { this._cacheInput('orderXl', val); };\n\n  @Input('fxFlexOrder.gt-xs') set orderGtXs(val) { this._cacheInput('orderGtXs', val); };\n  @Input('fxFlexOrder.gt-sm') set orderGtSm(val) { this._cacheInput('orderGtSm', val); };\n  @Input('fxFlexOrder.gt-md') set orderGtMd(val) { this._cacheInput('orderGtMd', val); };\n  @Input('fxFlexOrder.gt-lg') set orderGtLg(val) { this._cacheInput('orderGtLg', val); };\n\n  @Input('fxFlexOrder.lt-sm') set orderLtSm(val) { this._cacheInput('orderLtSm', val); };\n  @Input('fxFlexOrder.lt-md') set orderLtMd(val) { this._cacheInput('orderLtMd', val); };\n  @Input('fxFlexOrder.lt-lg') set orderLtLg(val) { this._cacheInput('orderLtLg', val); };\n  @Input('fxFlexOrder.lt-xl') set orderLtXl(val) { this._cacheInput('orderLtXl', val); };\n\n  /* tslint:enable */\n  constructor(monitor: MediaMonitor, elRef: ElementRef, renderer: Renderer2) {\n    super(monitor, elRef, renderer);\n  }\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  /**\n   * For @Input changes on the current mq activation property, see onMediaQueryChanges()\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['order'] != null || this._mqActivation) {\n      this._updateWithValue();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    this._listenForMediaQueryChanges('order', '0', (changes: MediaChange) => {\n      this._updateWithValue(changes.value);\n    });\n    this._updateWithValue();\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  protected _updateWithValue(value?: string) {\n    value = value || this._queryInput('order') || '0';\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n\n    this._applyStyleToElement(this._buildCSS(value));\n  }\n\n\n  protected _buildCSS(value) {\n    value = parseInt(value, 10);\n    return {order: isNaN(value) ? 0 : value};\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Renderer2,\n  SimpleChanges, Self,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {extendObject} from '../../utils/object-extend';\n\nimport {BaseFxDirective} from './base';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\n\nimport {LayoutDirective} from './layout';\nimport {LAYOUT_VALUES, isFlowHorizontal} from '../../utils/layout-validator';\n\n/**\n * 'layout-align' flexbox styling directive\n *  Defines positioning of child elements along main and cross axis in a layout container\n *  Optional values: {main-axis} values or {main-axis cross-axis} value pairs\n *\n *  @see https://css-tricks.com/almanac/properties/j/justify-content/\n *  @see https://css-tricks.com/almanac/properties/a/align-items/\n *  @see https://css-tricks.com/almanac/properties/a/align-content/\n */\n@Directive({selector: `\n  [fxLayoutAlign],\n  [fxLayoutAlign.xs], [fxLayoutAlign.sm], [fxLayoutAlign.md], [fxLayoutAlign.lg],[fxLayoutAlign.xl],\n  [fxLayoutAlign.lt-sm], [fxLayoutAlign.lt-md], [fxLayoutAlign.lt-lg], [fxLayoutAlign.lt-xl],\n  [fxLayoutAlign.gt-xs], [fxLayoutAlign.gt-sm], [fxLayoutAlign.gt-md], [fxLayoutAlign.gt-lg]\n`})\nexport class LayoutAlignDirective extends BaseFxDirective implements OnInit, OnChanges, OnDestroy {\n\n  protected _layout = 'row';  // default flex-direction\n  protected _layoutWatcher: Subscription;\n\n  /* tslint:disable */\n  @Input('fxLayoutAlign')       set align(val)     { this._cacheInput('align', val); }\n  @Input('fxLayoutAlign.xs')    set alignXs(val)   { this._cacheInput('alignXs', val); }\n  @Input('fxLayoutAlign.sm')    set alignSm(val)   { this._cacheInput('alignSm', val); };\n  @Input('fxLayoutAlign.md')    set alignMd(val)   { this._cacheInput('alignMd', val); };\n  @Input('fxLayoutAlign.lg')    set alignLg(val)   { this._cacheInput('alignLg', val); };\n  @Input('fxLayoutAlign.xl')    set alignXl(val)   { this._cacheInput('alignXl', val); };\n\n  @Input('fxLayoutAlign.gt-xs') set alignGtXs(val) { this._cacheInput('alignGtXs', val); };\n  @Input('fxLayoutAlign.gt-sm') set alignGtSm(val) { this._cacheInput('alignGtSm', val); };\n  @Input('fxLayoutAlign.gt-md') set alignGtMd(val) { this._cacheInput('alignGtMd', val); };\n  @Input('fxLayoutAlign.gt-lg') set alignGtLg(val) { this._cacheInput('alignGtLg', val); };\n\n  @Input('fxLayoutAlign.lt-sm') set alignLtSm(val) { this._cacheInput('alignLtSm', val); };\n  @Input('fxLayoutAlign.lt-md') set alignLtMd(val) { this._cacheInput('alignLtMd', val); };\n  @Input('fxLayoutAlign.lt-lg') set alignLtLg(val) { this._cacheInput('alignLtLg', val); };\n  @Input('fxLayoutAlign.lt-xl') set alignLtXl(val) { this._cacheInput('alignLtXl', val); };\n\n  /* tslint:enable */\n  constructor(\n      monitor: MediaMonitor,\n      elRef: ElementRef, renderer: Renderer2,\n      @Optional() @Self() container: LayoutDirective) {\n    super(monitor, elRef, renderer);\n\n    if (container) {  // Subscribe to layout direction changes\n      this._layoutWatcher = container.layout$.subscribe(this._onLayoutChange.bind(this));\n    }\n  }\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['align'] != null || this._mqActivation) {\n      this._updateWithValue();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    this._listenForMediaQueryChanges('align', 'start stretch', (changes: MediaChange) => {\n      this._updateWithValue(changes.value);\n    });\n    this._updateWithValue();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    if ( this._layoutWatcher ) {\n      this._layoutWatcher.unsubscribe();\n    }\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  /**\n   *\n   */\n  protected _updateWithValue(value?: string) {\n    value = value || this._queryInput('align') || 'start stretch';\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n\n    this._applyStyleToElement(this._buildCSS(value));\n    this._allowStretching(value, !this._layout ? 'row' : this._layout);\n  }\n\n  /**\n   * Cache the parent container 'flex-direction' and update the 'flex' styles\n   */\n  protected _onLayoutChange(direction) {\n    this._layout = (direction || '').toLowerCase();\n    if (!LAYOUT_VALUES.find(x => x === this._layout)) {\n      this._layout = 'row';\n    }\n\n    let value = this._queryInput('align') || 'start stretch';\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n    this._allowStretching(value, this._layout || 'row');\n  }\n\n  protected _buildCSS(align) {\n    let css = {}, [main_axis, cross_axis] = align.split(' '); // tslint:disable-line:variable-name\n\n    // Main axis\n    switch (main_axis) {\n      case 'center':\n        css['justify-content'] = 'center';\n        break;\n      case 'space-around':\n        css['justify-content'] = 'space-around';\n        break;\n      case 'space-between':\n        css['justify-content'] = 'space-between';\n        break;\n      case 'end':\n      case 'flex-end':\n        css['justify-content'] = 'flex-end';\n        break;\n      case 'start':\n      case 'flex-start':\n      default :\n        css['justify-content'] = 'flex-start';  // default main axis\n        break;\n    }\n\n    // Cross-axis\n    switch (cross_axis) {\n      case 'start':\n      case 'flex-start':\n        css['align-items'] = css['align-content'] = 'flex-start';\n        break;\n      case 'baseline':\n        css['align-items'] = 'baseline';\n        break;\n      case 'center':\n        css['align-items'] = css['align-content'] = 'center';\n        break;\n      case 'end':\n      case 'flex-end':\n        css['align-items'] = css['align-content'] = 'flex-end';\n        break;\n      case 'stretch':\n      default : // 'stretch'\n        css['align-items'] = css['align-content'] = 'stretch';   // default cross axis\n        break;\n    }\n\n    return extendObject(css, {\n      'display' : 'flex',\n      'flex-direction' : this._layout || 'row',\n      'box-sizing' : 'border-box'\n    });\n  }\n\n\n  /**\n   * Update container element to 'stretch' as needed...\n   * NOTE: this is only done if the crossAxis is explicitly set to 'stretch'\n   */\n  protected _allowStretching(align, layout) {\n    let [, cross_axis] = align.split(' '); // tslint:disable-line:variable-name\n\n    if (cross_axis == 'stretch') {\n      // Use `null` values to remove style\n      this._applyStyleToElement({\n        'box-sizing': 'border-box',\n        'max-width': !isFlowHorizontal(layout) ? '100%' : null,\n        'max-height': isFlowHorizontal(layout) ? '100%' : null\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  Renderer2,\n  SimpleChanges,\n  Self,\n  AfterContentInit,\n  Optional,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\n\nimport {BaseFxDirective} from './base';\nimport {LayoutDirective} from './layout';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\nimport {LAYOUT_VALUES} from '../../utils/layout-validator';\n\n/**\n * 'layout-padding' styling directive\n *  Defines padding of child elements in a layout container\n */\n@Directive({\n  selector: `\n  [fxLayoutGap],\n  [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md], [fxLayoutGap.lg], [fxLayoutGap.xl],\n  [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md], [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl],\n  [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm], [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]\n`\n})\nexport class LayoutGapDirective extends BaseFxDirective implements AfterContentInit, OnChanges,\n    OnDestroy {\n  protected _layout = 'row';  // default flex-direction\n  protected _layoutWatcher: Subscription;\n  protected _observer: MutationObserver;\n\n  /* tslint:disable */\n @Input('fxLayoutGap')       set gap(val) { this._cacheInput('gap', val); }\n @Input('fxLayoutGap.xs')    set gapXs(val) { this._cacheInput('gapXs', val); }\n @Input('fxLayoutGap.sm')    set gapSm(val) { this._cacheInput('gapSm', val); };\n @Input('fxLayoutGap.md')    set gapMd(val) { this._cacheInput('gapMd', val); };\n @Input('fxLayoutGap.lg')    set gapLg(val) { this._cacheInput('gapLg', val); };\n @Input('fxLayoutGap.xl')    set gapXl(val) { this._cacheInput('gapXl', val); };\n\n @Input('fxLayoutGap.gt-xs') set gapGtXs(val) { this._cacheInput('gapGtXs', val); };\n @Input('fxLayoutGap.gt-sm') set gapGtSm(val) { this._cacheInput('gapGtSm', val); };\n @Input('fxLayoutGap.gt-md') set gapGtMd(val) { this._cacheInput('gapGtMd', val); };\n @Input('fxLayoutGap.gt-lg') set gapGtLg(val) { this._cacheInput('gapGtLg', val); };\n\n @Input('fxLayoutGap.lt-sm') set gapLtSm(val) { this._cacheInput('gapLtSm', val); };\n @Input('fxLayoutGap.lt-md') set gapLtMd(val) { this._cacheInput('gapLtMd', val); };\n @Input('fxLayoutGap.lt-lg') set gapLtLg(val) { this._cacheInput('gapLtLg', val); };\n @Input('fxLayoutGap.lt-xl') set gapLtXl(val) { this._cacheInput('gapLtXl', val); };\n\n  /* tslint:enable */\n  constructor(monitor: MediaMonitor,\n              elRef: ElementRef,\n              renderer: Renderer2,\n              @Optional() @Self() container: LayoutDirective,\n              private _zone: NgZone) {\n    super(monitor, elRef, renderer);\n\n    if (container) {  // Subscribe to layout direction changes\n      this._layoutWatcher = container.layout$.subscribe(this._onLayoutChange.bind(this));\n    }\n  }\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['gap'] != null || this._mqActivation) {\n      this._updateWithValue();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngAfterContentInit() {\n    this._watchContentChanges();\n    this._listenForMediaQueryChanges('gap', '0', (changes: MediaChange) => {\n      this._updateWithValue(changes.value);\n    });\n    this._updateWithValue();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    if (this._layoutWatcher) {\n      this._layoutWatcher.unsubscribe();\n    }\n    if (this._observer) {\n      this._observer.disconnect();\n    }\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  /**\n   * Watch for child nodes to be added... and apply the layout gap styles to each.\n   * NOTE: this does NOT! differentiate between viewChildren and contentChildren\n   */\n  protected _watchContentChanges() {\n    this._zone.runOutsideAngular(() => {\n\n      if (typeof MutationObserver !== 'undefined') {\n        this._observer = new MutationObserver((mutations: MutationRecord[]) => {\n          let validatedChanges = (it: MutationRecord): boolean => {\n            return (it.addedNodes && it.addedNodes.length > 0) ||\n                (it.removedNodes && it.removedNodes.length > 0);\n          };\n\n          // update gap styles only for child 'added' or 'removed' events\n          if (mutations.some(validatedChanges)) {\n            this._updateWithValue();\n          }\n        });\n        this._observer.observe(this._elementRef.nativeElement, {childList: true});\n      }\n    });\n  }\n\n  /**\n   * Cache the parent container 'flex-direction' and update the 'margin' styles\n   */\n  protected _onLayoutChange(direction) {\n    this._layout = (direction || '').toLowerCase();\n    if (!LAYOUT_VALUES.find(x => x === this._layout)) {\n      this._layout = 'row';\n    }\n    this._updateWithValue();\n  }\n\n  /**\n   *\n   */\n  protected _updateWithValue(value?: string) {\n    value = value || this._queryInput('gap') || '0';\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n\n    // Gather all non-hidden Element nodes\n    let items = this.childrenNodes\n        .filter(el => el.nodeType === 1 && this._getDisplayStyle(el) != 'none');\n    let numItems = items.length;\n\n    if (numItems > 1) {\n      let lastItem = items[numItems - 1];\n\n      // For each `element` children EXCEPT the last,\n      // set the margin right/bottom styles...\n      items = items.filter((_, j) => j < numItems - 1);\n      this._applyStyleToElements(this._buildCSS(value), items);\n\n      // Clear all gaps for all visible elements\n      this._applyStyleToElements(this._buildCSS(), [lastItem]);\n    }\n  }\n\n  /**\n   * Prepare margin CSS, remove any previous explicitly\n   * assigned margin assignments\n   */\n  private _buildCSS(value: any = null) {\n    let key, margins = {\n      'margin-left': null,\n      'margin-right': null,\n      'margin-top': null,\n      'margin-bottom': null\n    };\n\n    switch (this._layout) {\n      case 'column':\n      case 'column-reverse':\n        key = 'margin-bottom';\n        break;\n      case 'row' :\n      case 'row-reverse':\n      default :\n        key = 'margin-right';\n        break;\n    }\n    margins[key] = value;\n\n    return margins;\n  }\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, Renderer2} from '@angular/core';\n\nimport {BaseFxDirective} from './base';\nimport {ResponsiveActivation} from './../responsive/responsive-activation';\nimport {MediaQuerySubscriber} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\n\n\n/**\n * Adapter to the BaseFxDirective abstract class so it can be used via composition.\n * @see BaseFxDirective\n */\nexport class BaseFxDirectiveAdapter extends BaseFxDirective {\n\n  /**\n   * Accessor to determine which @Input property is \"active\"\n   * e.g. which property value will be used.\n   */\n  get activeKey() {\n    let mqa = this._mqActivation;\n    let key = mqa ? mqa.activatedInputKey : this._baseKey;\n    // Note: ClassDirective::SimpleChanges uses 'klazz' instead of 'class' as a key\n    return (key === 'class') ? 'klazz' : key;\n  }\n\n  /** Hash map of all @Input keys/values defined/used */\n  get inputMap() {\n    return this._inputMap;\n  }\n\n  /**\n   * @see BaseFxDirective._mqActivation\n   */\n  get mqActivation(): ResponsiveActivation {\n    return this._mqActivation;\n  }\n\n  /**\n   * BaseFxDirectiveAdapter constructor\n   */\n  constructor(protected _baseKey: string,   // non-responsive @Input property name\n              protected _mediaMonitor: MediaMonitor,\n              protected _elementRef: ElementRef,\n              protected _renderer: Renderer2) {\n    super(_mediaMonitor, _elementRef, _renderer);\n  }\n\n\n  /**\n   * @see BaseFxDirective._queryInput\n   */\n  queryInput(key) {\n    return key ? this._queryInput(key) : undefined;\n  }\n\n  /**\n   *  Save the property value.\n   */\n  cacheInput(key?: string, source?: any, cacheRaw = false) {\n    if (cacheRaw) {\n      this._cacheInputRaw(key, source);\n    } else if (Array.isArray(source)) {\n      this._cacheInputArray(key, source);\n    } else if (typeof source === 'object') {\n      this._cacheInputObject(key, source);\n    } else if (typeof source === 'string') {\n      this._cacheInputString(key, source);\n    } else {\n      throw new Error('Invalid class value provided. Did you want to cache the raw value?');\n    }\n  }\n\n  /**\n   * @see BaseFxDirective._listenForMediaQueryChanges\n   */\n  listenForMediaQueryChanges(key: string,\n                             defaultValue: any,\n                             onMediaQueryChange: MediaQuerySubscriber): ResponsiveActivation {\n    return this._listenForMediaQueryChanges(key, defaultValue, onMediaQueryChange);\n  }\n\n  // ************************************************************\n  // Protected Methods\n  // ************************************************************\n\n  /**\n   * No implicit transforms of the source.\n   * Required when caching values expected later for KeyValueDiffers\n   */\n  protected _cacheInputRaw(key?: string, source?: any) {\n    this._inputMap[key] = source;\n  }\n\n  /**\n   *  Save the property value for Array values.\n   */\n  protected _cacheInputArray(key = '', source?: boolean[]) {\n    this._inputMap[key] = source.join(' ');\n  }\n\n  /**\n   *  Save the property value for key/value pair values.\n   */\n  protected _cacheInputObject(key = '', source?: { [key: string]: boolean }) {\n    let classes = [];\n    for (let prop in source) {\n      if (!!source[prop]) {\n        classes.push(prop);\n      }\n    }\n    this._inputMap[key] = classes.join(' ');\n  }\n\n  /**\n   *  Save the property value for string values.\n   */\n  protected _cacheInputString(key = '', source?: string) {\n    this._inputMap[key] = source;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  KeyValueDiffers,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer,\n  Renderer2,\n  SimpleChanges,\n  Self\n} from '@angular/core';\nimport {NgClass} from '@angular/common';\n\nimport {BaseFxDirective} from './base';\nimport {BaseFxDirectiveAdapter} from './base-adapter';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\n\n/** NgClass allowed inputs **/\nexport type NgClassType = string | string[] | Set<string> | {[klass: string]: any};\n\n/**\n * Directive to add responsive support for ngClass.\n */\n@Directive({\n  selector: `\n    [class], [class.xs], [class.sm], [class.md], [class.lg], [class.xl],\n    [class.lt-sm], [class.lt-md], [class.lt-lg], [class.lt-xl],\n    [class.gt-xs], [class.gt-sm], [class.gt-md], [class.gt-lg],\n\n    [ngClass], [ngClass.xs], [ngClass.sm], [ngClass.md], [ngClass.lg], [ngClass.xl],\n    [ngClass.lt-sm], [ngClass.lt-md], [ngClass.lt-lg], [ngClass.lt-xl],\n    [ngClass.gt-xs], [ngClass.gt-sm], [ngClass.gt-md], [ngClass.gt-lg]\n  `\n})\nexport class ClassDirective extends BaseFxDirective\n    implements DoCheck, OnChanges, OnDestroy {\n\n  /**\n   * Intercept ngClass assignments so we cache the default classes\n   * which are merged with activated styles or used as fallbacks.\n   * Note: Base ngClass values are applied during ngDoCheck()\n   */\n  @Input('ngClass')\n  set ngClassBase(val: NgClassType) {\n    this._ngClassAdapter.cacheInput('ngClass', val, true);\n    this._ngClassInstance.ngClass = val;\n  }\n\n  /* tslint:disable */\n  @Input('ngClass.xs')    set ngClassXs(val:   NgClassType) { this._ngClassAdapter.cacheInput('ngClassXs',   val, true); }\n  @Input('ngClass.sm')    set ngClassSm(val:   NgClassType) { this._ngClassAdapter.cacheInput('ngClassSm',   val, true); }\n  @Input('ngClass.md')    set ngClassMd(val:   NgClassType) { this._ngClassAdapter.cacheInput('ngClassMd',   val, true); }\n  @Input('ngClass.lg')    set ngClassLg(val:   NgClassType) { this._ngClassAdapter.cacheInput('ngClassLg',   val, true); }\n  @Input('ngClass.xl')    set ngClassXl(val:   NgClassType) { this._ngClassAdapter.cacheInput('ngClassXl',   val, true); }\n\n  @Input('ngClass.lt-sm') set ngClassLtSm(val: NgClassType) { this._ngClassAdapter.cacheInput('ngClassLtSm', val, true); }\n  @Input('ngClass.lt-md') set ngClassLtMd(val: NgClassType) { this._ngClassAdapter.cacheInput('ngClassLtMd', val, true); }\n  @Input('ngClass.lt-lg') set ngClassLtLg(val: NgClassType) { this._ngClassAdapter.cacheInput('ngClassLtLg', val, true); }\n  @Input('ngClass.lt-xl') set ngClassLtXl(val: NgClassType) { this._ngClassAdapter.cacheInput('ngClassLtXl', val, true); }\n\n  @Input('ngClass.gt-xs') set ngClassGtXs(val: NgClassType) { this._ngClassAdapter.cacheInput('ngClassGtXs', val, true); }\n  @Input('ngClass.gt-sm') set ngClassGtSm(val: NgClassType) { this._ngClassAdapter.cacheInput('ngClassGtSm', val, true); }\n  @Input('ngClass.gt-md') set ngClassGtMd(val: NgClassType) { this._ngClassAdapter.cacheInput('ngClassGtMd', val, true); }\n  @Input('ngClass.gt-lg') set ngClassGtLg(val: NgClassType) { this._ngClassAdapter.cacheInput('ngClassGtLg', val, true); }\n\n  /** Deprecated selectors */\n\n  /**\n   * Base class selector values get applied immediately and are considered destructive overwrites to\n   * all previous class assignments\n   *\n   * Delegate to NgClass:klass setter and cache value for base fallback from responsive APIs.\n   */\n  @Input('class')\n  set classBase(val: string) {\n    this._classAdapter.cacheInput('_rawClass', val, true);\n    this._ngClassInstance.klass = val;\n  }\n\n  @Input('class.xs')      set classXs(val:   NgClassType) { this._classAdapter.cacheInput('classXs',   val, true); }\n  @Input('class.sm')      set classSm(val:   NgClassType) { this._classAdapter.cacheInput('classSm',   val, true); }\n  @Input('class.md')      set classMd(val:   NgClassType) { this._classAdapter.cacheInput('classMd',   val, true); }\n  @Input('class.lg')      set classLg(val:   NgClassType) { this._classAdapter.cacheInput('classLg',   val, true); }\n  @Input('class.xl')      set classXl(val:   NgClassType) { this._classAdapter.cacheInput('classXl',   val, true); }\n\n  @Input('class.lt-sm')   set classLtSm(val: NgClassType) { this._classAdapter.cacheInput('classLtSm', val, true); }\n  @Input('class.lt-md')   set classLtMd(val: NgClassType) { this._classAdapter.cacheInput('classLtMd', val, true); }\n  @Input('class.lt-lg')   set classLtLg(val: NgClassType) { this._classAdapter.cacheInput('classLtLg', val, true); }\n  @Input('class.lt-xl')   set classLtXl(val: NgClassType) { this._classAdapter.cacheInput('classLtXl', val, true); }\n\n  @Input('class.gt-xs')   set classGtXs(val: NgClassType) { this._classAdapter.cacheInput('classGtXs', val, true); }\n  @Input('class.gt-sm')   set classGtSm(val: NgClassType) { this._classAdapter.cacheInput('classGtSm', val, true); }\n  @Input('class.gt-md')   set classGtMd(val: NgClassType) { this._classAdapter.cacheInput('classGtMd', val, true); }\n  @Input('class.gt-lg')   set classGtLg(val: NgClassType) { this._classAdapter.cacheInput('classGtLg', val, true); }\n\n  /**\n   * Initial value of the `class` attribute; used as\n   * fallback and will be merged with nay `ngClass` values\n   */\n  get initialClasses() : string {\n    return  this._classAdapter.queryInput('_rawClass') || \"\";\n  }\n\n  /* tslint:enable */\n  constructor(protected monitor: MediaMonitor,\n              _ngEl: ElementRef, _renderer: Renderer2, _oldRenderer: Renderer,\n              _iterableDiffers: IterableDiffers, _keyValueDiffers: KeyValueDiffers,\n              @Optional() @Self() private _ngClassInstance: NgClass) {\n\n    super(monitor, _ngEl, _renderer);\n\n    this._classAdapter = new BaseFxDirectiveAdapter('class', monitor, _ngEl, _renderer);\n    this._ngClassAdapter = new BaseFxDirectiveAdapter('ngClass', monitor, _ngEl, _renderer);\n\n    // Create an instance NgClass Directive instance only if `ngClass=\"\"` has NOT been defined on\n    // the same host element; since the responsive variations may be defined...\n    if ( !this._ngClassInstance ) {\n      this._ngClassInstance = new NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _oldRenderer);\n    }\n  }\n\n  // ******************************************************************\n  // Lifecycle Hooks\n  // ******************************************************************\n\n  /**\n   * For @Input changes on the current mq activation property\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._classAdapter.activeKey in changes) {\n      this._updateKlass();\n    }\n    if (this._ngClassAdapter.activeKey in changes) {\n      this._updateNgClass();\n    }\n  }\n\n  /**\n   * For ChangeDetectionStrategy.onPush and ngOnChanges() updates\n   */\n  ngDoCheck() {\n    if (!this._classAdapter.hasMediaQueryListener) {\n      this._configureMQListener();\n    }\n    this._ngClassInstance.ngDoCheck();\n  }\n\n  ngOnDestroy() {\n    this._classAdapter.ngOnDestroy();\n    this._ngClassAdapter.ngOnDestroy();\n    this._ngClassInstance = null;\n  }\n\n  // ******************************************************************\n  // Internal Methods\n  // ******************************************************************\n\n  /**\n   * Build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  protected _configureMQListener() {\n    this._classAdapter.listenForMediaQueryChanges('class', '', (changes: MediaChange) => {\n      this._updateKlass(changes.value);\n    });\n\n    this._ngClassAdapter.listenForMediaQueryChanges('ngClass', '', (changes: MediaChange) => {\n      this._updateNgClass(changes.value);\n      this._ngClassInstance.ngDoCheck();    // trigger NgClass::_applyIterableChanges()\n    });\n  }\n\n  /**\n   *  Apply updates directly to the NgClass:klass property\n   *  ::ngDoCheck() is not needed\n   */\n  protected _updateKlass(value?: NgClassType) {\n    let klass = value || this._classAdapter.queryInput('class') || '';\n    if (this._classAdapter.mqActivation) {\n      klass = this._classAdapter.mqActivation.activatedInput;\n    }\n    this._ngClassInstance.klass = klass || this.initialClasses;\n  }\n\n  /**\n   *  Identify the activated input value and update the ngClass iterables...\n   *  needs ngDoCheck() to actually apply the values to the element\n   */\n  protected _updateNgClass(value?: NgClassType) {\n    if (this._ngClassAdapter.mqActivation) {\n      value = this._ngClassAdapter.mqActivation.activatedInput;\n    }\n\n    // Delegate subsequent activity to the NgClass logic\n    this._ngClassInstance.ngClass = value || '';\n  }\n\n  /**\n   * Special adapter to cross-cut responsive behaviors\n   * into the ClassDirective instance\n   */\n  protected _classAdapter: BaseFxDirectiveAdapter;   // used for `class.xxx` selectors\n  protected _ngClassAdapter: BaseFxDirectiveAdapter;   // used for `ngClass.xxx` selectors\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport type NgStyleRawList = string[];\nexport type NgStyleMap = {[klass: string]: string};\n// NgStyle selectors accept NgStyleType values\nexport type NgStyleType = string | Set<string> | NgStyleRawList | NgStyleMap;\n\n/**\n * Callback function for SecurityContext.STYLE sanitization\n */\nexport type NgStyleSanitizer = (val: any) => string;\n\n/**\n * NgStyle allowed inputs\n */\nexport class NgStyleKeyValue {\n  constructor(public key: string, public value: string, noQuotes = true) {\n    this.key = noQuotes ? key.replace(/['\"]/g, '').trim() : key.trim();\n\n    this.value = noQuotes ? value.replace(/['\"]/g, '').trim() : value.trim();\n    this.value = this.value.replace(/;/, '');\n  }\n}\n\n/**\n * Transform Operators for @angular/flex-layout NgStyle Directive\n */\nexport const ngStyleUtils = {\n  getType,\n  buildRawList,\n  buildMapFromList,\n  buildMapFromSet\n};\n\nfunction getType(target: any): string {\n  let what = typeof target;\n  if (what === 'object') {\n    return (target.constructor === Array) ? 'array' :\n        (target.constructor === Set ) ? 'set' : 'object';\n  }\n  return what;\n}\n\n/**\n * Split string of key:value pairs into Array of k-v pairs\n * e.g.  'key:value; key:value; key:value;' -> ['key:value',...]\n */\nfunction buildRawList(source: any, delimiter = ';'): NgStyleRawList {\n  return String(source)\n      .trim()\n      .split(delimiter)\n      .map((val: string) => val.trim())\n      .filter(val => val !== '');\n}\n\n/**\n * Convert array of key:value strings to a iterable map object\n */\nfunction buildMapFromList(styles: NgStyleRawList, sanitize?: NgStyleSanitizer): NgStyleMap {\n  let sanitizeValue = (it: NgStyleKeyValue) => {\n    if (sanitize) {\n      it.value = sanitize(it.value);\n    }\n    return it;\n  };\n\n  return styles\n      .map(stringToKeyValue)\n      .filter(entry => !!entry)\n      .map(sanitizeValue)\n      .reduce(keyValuesToMap, {});\n}\n\n/**\n * Convert Set<string> or raw Object to an iterable NgStyleMap\n */\nfunction buildMapFromSet(source: any, sanitize?: NgStyleSanitizer): NgStyleMap {\n  let list = new Array<string>();\n  if (getType(source) == 'set') {\n    source.forEach(entry => list.push(entry));\n  } else {                                // simple hashmap\n    Object.keys(source).forEach(key => {\n      list.push(`${key}:${source[key]}`);\n    });\n  }\n  return buildMapFromList(list, sanitize);\n}\n\n\n/**\n * Convert 'key:value' -> [key, value]\n */\nfunction stringToKeyValue(it: string): NgStyleKeyValue {\n  let [key, val] = it.split(':');\n  return val ? new NgStyleKeyValue(key, val) : null;\n}\n\n/**\n * Convert [ [key,value] ] -> { key : value }\n */\nfunction keyValuesToMap(map: NgStyleMap, entry: NgStyleKeyValue): NgStyleMap {\n  if (!!entry.key) {\n    map[entry.key] = entry.value;\n  }\n  return map;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Input,\n  KeyValueDiffers,\n  OnDestroy,\n  OnChanges,\n  Optional,\n  Renderer,\n  Renderer2,\n  SecurityContext,\n  Self,\n  SimpleChanges,\n} from '@angular/core';\nimport {NgStyle} from '@angular/common';\n\nimport {BaseFxDirective} from './base';\nimport {BaseFxDirectiveAdapter} from './base-adapter';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\nimport {extendObject} from '../../utils/object-extend';\nimport {DomSanitizer} from '@angular/platform-browser';\n\nimport {\n  NgStyleRawList,\n  NgStyleType,\n  NgStyleSanitizer,\n  ngStyleUtils as _\n} from '../../utils/style-transforms';\n\n/**\n * Directive to add responsive support for ngStyle.\n *\n */\n@Directive({\n  selector: `\n    [style.xs], [style.sm], [style.md], [style.lg], [style.xl],\n    [style.lt-sm], [style.lt-md], [style.lt-lg], [style.lt-xl],\n    [style.gt-xs], [style.gt-sm], [style.gt-md], [style.gt-lg],\n    [ngStyle],\n    [ngStyle.xs], [ngStyle.sm], [ngStyle.lg], [ngStyle.xl],\n    [ngStyle.lt-sm], [ngStyle.lt-md], [ngStyle.lt-lg], [ngStyle.lt-xl],\n    [ngStyle.gt-xs], [ngStyle.gt-sm], [ngStyle.gt-md], [ngStyle.gt-lg]\n  `\n})\nexport class StyleDirective extends BaseFxDirective\n    implements DoCheck, OnChanges, OnDestroy {\n\n  /**\n   * Intercept ngStyle assignments so we cache the default styles\n   * which are merged with activated styles or used as fallbacks.\n   */\n  @Input('ngStyle')\n  set styleBase(val: NgStyleType) {\n    this._base.cacheInput('style', val, true);\n    this._ngStyleInstance.ngStyle = this._base.inputMap['style'];\n  }\n\n  /* tslint:disable */\n  @Input('ngStyle.xs')    set ngStyleXs(val: NgStyleType) { this._base.cacheInput('styleXs', val, true); }\n  @Input('ngStyle.sm')    set ngStyleSm(val: NgStyleType) {  this._base.cacheInput('styleSm', val, true); };\n  @Input('ngStyle.md')    set ngStyleMd(val: NgStyleType) { this._base.cacheInput('styleMd', val, true); };\n  @Input('ngStyle.lg')    set ngStyleLg(val: NgStyleType) { this._base.cacheInput('styleLg', val, true);};\n  @Input('ngStyle.xl')    set ngStyleXl(val: NgStyleType) { this._base.cacheInput('styleXl', val, true); };\n\n  @Input('ngStyle.lt-sm') set ngStyleLtSm(val: NgStyleType) { this._base.cacheInput('styleLtSm', val, true); };\n  @Input('ngStyle.lt-md') set ngStyleLtMd(val: NgStyleType) { this._base.cacheInput('styleLtMd', val, true); };\n  @Input('ngStyle.lt-lg') set ngStyleLtLg(val: NgStyleType) { this._base.cacheInput('styleLtLg', val, true); };\n  @Input('ngStyle.lt-xl') set ngStyleLtXl(val: NgStyleType) { this._base.cacheInput('styleLtXl', val, true); };\n\n  @Input('ngStyle.gt-xs') set ngStyleGtXs(val: NgStyleType) { this._base.cacheInput('styleGtXs', val, true); };\n  @Input('ngStyle.gt-sm') set ngStyleGtSm(val: NgStyleType) { this._base.cacheInput('styleGtSm', val, true);} ;\n  @Input('ngStyle.gt-md') set ngStyleGtMd(val: NgStyleType) { this._base.cacheInput('styleGtMd', val, true);};\n  @Input('ngStyle.gt-lg') set ngStyleGtLg(val: NgStyleType) { this._base.cacheInput('styleGtLg', val, true); };\n\n  /** Deprecated selectors */\n  @Input('style.xs')      set styleXs(val: NgStyleType) { this._base.cacheInput('styleXs', val, true); }\n  @Input('style.sm')      set styleSm(val: NgStyleType) { this._base.cacheInput('styleSm', val, true); };\n  @Input('style.md')      set styleMd(val: NgStyleType) { this._base.cacheInput('styleMd', val, true);};\n  @Input('style.lg')      set styleLg(val: NgStyleType) { this._base.cacheInput('styleLg', val, true); };\n  @Input('style.xl')      set styleXl(val: NgStyleType) { this._base.cacheInput('styleXl', val, true); };\n\n  @Input('style.lt-sm')   set styleLtSm(val: NgStyleType) { this._base.cacheInput('styleLtSm', val, true); };\n  @Input('style.lt-md')   set styleLtMd(val: NgStyleType) { this._base.cacheInput('styleLtMd', val, true); };\n  @Input('style.lt-lg')   set styleLtLg(val: NgStyleType) { this._base.cacheInput('styleLtLg', val, true);};\n  @Input('style.lt-xl')   set styleLtXl(val: NgStyleType) { this._base.cacheInput('styleLtXl', val, true); };\n\n  @Input('style.gt-xs')   set styleGtXs(val: NgStyleType) { this._base.cacheInput('styleGtXs', val, true); };\n  @Input('style.gt-sm')   set styleGtSm(val: NgStyleType) { this._base.cacheInput('styleGtSm', val, true); };\n  @Input('style.gt-md')   set styleGtMd(val: NgStyleType) { this._base.cacheInput('styleGtMd', val, true);};\n  @Input('style.gt-lg')   set styleGtLg(val: NgStyleType) { this._base.cacheInput('styleGtLg', val, true); };\n\n  /* tslint:enable */\n  /**\n   *  Constructor for the ngStyle subclass; which adds selectors and\n   *  a MediaQuery Activation Adapter\n   */\n  constructor(private monitor: MediaMonitor,\n              protected _sanitizer: DomSanitizer,\n              _ngEl: ElementRef, _renderer: Renderer2,\n              _differs: KeyValueDiffers, _oldRenderer: Renderer,\n              @Optional() @Self() private _ngStyleInstance: NgStyle) {\n\n    super(monitor, _ngEl, _renderer);\n\n    // Build adapter, `cacheInput()` interceptor, and get current inline style if any\n    this._buildAdapter(this.monitor, _ngEl, _renderer);\n    this._base.cacheInput('style', _ngEl.nativeElement.getAttribute('style'), true);\n\n    // Create an instance NgStyle Directive instance only if `ngStyle=\"\"` has NOT been defined on\n    // the same host element; since the responsive versions may be defined...\n    if ( !this._ngStyleInstance ) {\n      this._ngStyleInstance = new NgStyle(_differs, _ngEl, _oldRenderer);\n    }\n  }\n\n  // ******************************************************************\n  // Lifecycle Hooks\n  // ******************************************************************\n\n  /**\n   * For @Input changes on the current mq activation property\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._base.activeKey in changes) {\n      this._updateStyle();\n    }\n  }\n\n  /**\n   * For ChangeDetectionStrategy.onPush and ngOnChanges() updates\n   */\n  ngDoCheck() {\n    if (!this._base.hasMediaQueryListener) {\n      this._configureMQListener();\n    }\n    this._ngStyleInstance.ngDoCheck();\n  }\n\n  ngOnDestroy() {\n    this._base.ngOnDestroy();\n    this._ngStyleInstance = null;\n  }\n\n  // ******************************************************************\n  // Internal Methods\n  // ******************************************************************\n\n  /**\n     * Build an mqActivation object that bridges\n     * mql change events to onMediaQueryChange handlers\n     */\n    protected _configureMQListener() {\n      this._base.listenForMediaQueryChanges('style', '', (changes: MediaChange) => {\n        this._updateStyle(changes.value);\n\n        // trigger NgClass::_applyIterableChanges()\n        this._ngStyleInstance.ngDoCheck();\n      });\n    }\n\n  // ************************************************************************\n  // Private Internal Methods\n  // ************************************************************************\n\n  /**\n   * Use the currently activated input property and assign to\n   * `ngStyle` which does the style injections...\n   */\n  protected _updateStyle(value?: NgStyleType) {\n    let style = value || this._base.queryInput('style') || '';\n    if (this._base.mqActivation) {\n      style = this._base.mqActivation.activatedInput;\n    }\n\n    // Delegate subsequent activity to the NgStyle logic\n    this._ngStyleInstance.ngStyle = style;\n  }\n\n\n  /**\n   * Build MediaQuery Activation Adapter\n   * This adapter manages listening to mediaQuery change events and identifying\n   * which property value should be used for the style update\n   */\n  protected _buildAdapter(monitor: MediaMonitor, _ngEl: ElementRef, _renderer: Renderer2) {\n    this._base = new BaseFxDirectiveAdapter('style', monitor, _ngEl, _renderer);\n    this._buildCacheInterceptor();\n  }\n\n  /**\n   * Build intercept to convert raw strings to ngStyleMap\n   */\n  protected _buildCacheInterceptor() {\n    let cacheInput = this._base.cacheInput.bind(this._base);\n    this._base.cacheInput = (key?: string, source?: any, cacheRaw = false, merge = true) => {\n      let styles = this._buildStyleMap(source);\n      if (merge) {\n        styles = extendObject({}, this._base.inputMap['style'], styles);\n      }\n      cacheInput(key, styles, cacheRaw);\n    };\n  }\n  /**\n   * Convert raw strings to ngStyleMap; which is required by ngStyle\n   * NOTE: Raw string key-value pairs MUST be delimited by `;`\n   *       Comma-delimiters are not supported due to complexities of\n   *       possible style values such as `rgba(x,x,x,x)` and others\n   */\n  protected _buildStyleMap(styles: NgStyleType) {\n    let sanitizer: NgStyleSanitizer = (val: any) => {\n      // Always safe-guard (aka sanitize) style property values\n      return this._sanitizer.sanitize(SecurityContext.STYLE, val);\n    };\n    if (styles) {\n      switch ( _.getType(styles) ) {\n        case 'string':  return _.buildMapFromList(_.buildRawList(styles), sanitizer);\n        case 'array' :  return _.buildMapFromList(styles as NgStyleRawList, sanitizer);\n        case 'set'   :  return _.buildMapFromSet(styles, sanitizer);\n        default      :  return _.buildMapFromSet(styles, sanitizer);\n      }\n    }\n    return styles;\n  }\n\n  /**\n   * Special adapter to cross-cut responsive behaviors\n   * into the StyleDirective\n   */\n  protected _base: BaseFxDirectiveAdapter;\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {MediaQueriesModule} from './media-query/_module';\n\nimport {BreakPoint} from './media-query/breakpoints/break-point';\nimport {\n  BreakPointProviderOptions,\n  DEFAULT_BREAKPOINTS_PROVIDER,\n  CUSTOM_BREAKPOINTS_PROVIDER_FACTORY\n} from './media-query/breakpoints/break-points-provider';\nimport {MEDIA_MONITOR_PROVIDER} from './media-query/media-monitor-provider';\nimport {OBSERVABLE_MEDIA_PROVIDER} from './media-query/observable-media-provider';\n\nimport {FlexDirective} from './flexbox/api/flex';\nimport {LayoutDirective} from './flexbox/api/layout';\nimport {ShowHideDirective} from './flexbox/api/show-hide';\nimport {FlexAlignDirective} from './flexbox/api/flex-align';\nimport {FlexFillDirective} from './flexbox/api/flex-fill';\nimport {FlexOffsetDirective} from './flexbox/api/flex-offset';\nimport {FlexOrderDirective} from './flexbox/api/flex-order';\nimport {LayoutAlignDirective} from './flexbox/api/layout-align';\nimport {LayoutWrapDirective} from './flexbox/api/layout-wrap';\nimport {LayoutGapDirective} from './flexbox/api/layout-gap';\nimport {ClassDirective} from './flexbox/api/class';\nimport {StyleDirective} from './flexbox/api/style';\n\n/**\n * Since the equivalent results are easily achieved with a css class attached to each\n * layout child, these have been deprecated and removed from the API.\n *\n *  import {LayoutPaddingDirective} from './flexbox/api/layout-padding';\n *  import {LayoutMarginDirective} from './flexbox/api/layout-margin';\n */\n\nconst ALL_DIRECTIVES = [\n  LayoutDirective,\n  LayoutWrapDirective,\n  LayoutGapDirective,\n  LayoutAlignDirective,\n  FlexDirective,\n  FlexOrderDirective,\n  FlexOffsetDirective,\n  FlexFillDirective,\n  FlexAlignDirective,\n  ShowHideDirective,\n  ClassDirective,\n  StyleDirective\n];\n\n/**\n *\n */\n@NgModule({\n  imports: [MediaQueriesModule],\n  exports: [MediaQueriesModule, ...ALL_DIRECTIVES],\n  declarations: [...ALL_DIRECTIVES],\n  providers: [\n    MEDIA_MONITOR_PROVIDER,\n    DEFAULT_BREAKPOINTS_PROVIDER,   // Extend defaults with internal custom breakpoints\n    OBSERVABLE_MEDIA_PROVIDER\n  ]\n})\nexport class FlexLayoutModule {\n  /**\n   * External uses can easily add custom breakpoints AND include internal orientations\n   * breakpoints; which are not available by default.\n   *\n   * !! Selector aliases are not auto-configured. Developers must subclass\n   * the API directives to support extra selectors for the orientations breakpoints !!\n   */\n  static provideBreakPoints(breakpoints: BreakPoint[],\n                            options ?: BreakPointProviderOptions): ModuleWithProviders {\n    return {\n      ngModule: FlexLayoutModule,\n      providers: [\n        CUSTOM_BREAKPOINTS_PROVIDER_FACTORY(breakpoints, options || {orientations: false})\n      ]\n    };\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {ɵgetDOM as getDom, DOCUMENT} from '@angular/platform-browser';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport {filter} from 'rxjs/operator/filter';\n\nimport {MediaChange} from './media-change';\n\n/**\n * EventHandler callback with the mediaQuery [range] activates or deactivates\n */\nexport interface MediaQueryListListener {\n  // Function with Window's MediaQueryList argument\n  (mql: MediaQueryList): void;\n}\n\n/**\n * EventDispatcher for a specific mediaQuery [range]\n */\nexport interface MediaQueryList {\n  readonly matches: boolean;\n  readonly media: string;\n\n  addListener(listener: MediaQueryListListener): void;\n\n  removeListener(listener: MediaQueryListListener): void;\n}\n\n\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\n@Injectable()\nexport class MatchMedia {\n  protected _registry: Map<string, MediaQueryList>;\n  protected _source: BehaviorSubject<MediaChange>;\n  protected _observable$: Observable<MediaChange>;\n\n  constructor(protected _zone: NgZone, @Inject(DOCUMENT) protected _document: any) {\n    this._registry = new Map<string, MediaQueryList>();\n    this._source = new BehaviorSubject<MediaChange>(new MediaChange(true));\n    this._observable$ = this._source.asObservable();\n  }\n\n  /**\n   * For the specified mediaQuery?\n   */\n  isActive(mediaQuery: string): boolean {\n    if (this._registry.has(mediaQuery)) {\n      let mql = this._registry.get(mediaQuery);\n      return mql.matches;\n    }\n    return false;\n  }\n\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * Typically used by the MediaQueryAdaptor; optionally available to components\n   * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n   *\n   * NOTE: if a mediaQuery is not specified, then ALL mediaQuery activations will\n   *       be announced.\n   */\n  observe(mediaQuery?: string): Observable<MediaChange> {\n    this.registerQuery(mediaQuery);\n\n    return filter.call(this._observable$, (change: MediaChange) => {\n      return mediaQuery ? (change.mediaQuery === mediaQuery) : true;\n    });\n  }\n\n  /**\n   * Based on the BreakPointRegistry provider, register internal listeners for each unique\n   * mediaQuery. Each listener emits specific MediaChange data to observers\n   */\n  registerQuery(mediaQuery: string | string[]) {\n    let list = normalizeQuery(mediaQuery);\n\n    if (list.length > 0) {\n      prepareQueryCSS(list, this._document);\n\n      list.forEach(query => {\n        let mql = this._registry.get(query);\n        let onMQLEvent = (e: MediaQueryList) => {\n          this._zone.run(() => {\n            let change = new MediaChange(e.matches, query);\n            this._source.next(change);\n          });\n        };\n\n        if (!mql) {\n          mql = this._buildMQL(query);\n          mql.addListener(onMQLEvent);\n          this._registry.set(query, mql);\n        }\n\n        if (mql.matches) {\n          onMQLEvent(mql);  // Announce activate range for initial subscribers\n        }\n      });\n    }\n  }\n\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  protected _buildMQL(query: string): MediaQueryList {\n    let canListen = isBrowser() && !!(<any>window).matchMedia('all').addListener;\n\n    return canListen ? (<any>window).matchMedia(query) : <MediaQueryList>{\n      matches: query === 'all' || query === '',\n      media: query,\n      addListener: () => {\n      },\n      removeListener: () => {\n      }\n    };\n  }\n}\n\n/**\n * Determine if SSR or Browser rendering.\n */\nexport function isBrowser() {\n  return getDom().supportsDOMEvents();\n}\n\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n */\nconst ALL_STYLES = {};\n\n/**\n * For Webkit engines that only trigger the MediaQueryList Listener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param query string The mediaQuery used to create a faux CSS selector\n *\n */\nfunction prepareQueryCSS(mediaQueries: string[], _document: any) {\n  let list = mediaQueries.filter(it => !ALL_STYLES[it]);\n  if (list.length > 0) {\n    let query = list.join(', ');\n\n    try {\n      let styleEl = getDom().createElement('style');\n\n      getDom().setAttribute(styleEl, 'type', 'text/css');\n      if (!styleEl['styleSheet']) {\n        let cssText = `/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${query} {.fx-query-test{ }}`;\n        getDom().appendChild(styleEl, getDom().createTextNode(cssText));\n      }\n\n      getDom().appendChild(_document.head, styleEl);\n\n      // Store in private global registry\n      list.forEach(mq => ALL_STYLES[mq] = styleEl);\n\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\n/**\n * Always convert to unique list of queries; for iteration in ::registerQuery()\n */\nfunction normalizeQuery(mediaQuery: string | string[]): string[] {\n  return (typeof mediaQuery === 'undefined') ? [] :\n      (typeof mediaQuery === 'string') ? [mediaQuery] : unique(mediaQuery as string[]);\n}\n\n/**\n * Filter duplicate mediaQueries in the list\n */\nfunction unique(list: string[]): string[] {\n  let seen = {};\n  return list.filter(item => {\n    return seen.hasOwnProperty(item) ? false : (seen[item] = true);\n  });\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {MediaChange} from '../media-query/media-change';\nimport {BreakPoint} from '../media-query/breakpoints/break-point';\nimport {extendObject} from './object-extend';\n\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n */\nexport function mergeAlias(dest: MediaChange, source: BreakPoint) {\n  return extendObject(dest, source ? {\n        mqAlias: source.alias,\n        suffix: source.suffix\n      } : {});\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\n\nimport {BreakPoint} from './breakpoints/break-point';\nimport {BreakPointRegistry} from './breakpoints/break-point-registry';\nimport {MatchMedia} from './match-media';\nimport {MediaChange} from './media-change';\n\nimport {mergeAlias} from '../utils/add-alias';\n\nimport {Observable} from 'rxjs/Observable';\nimport {filter} from 'rxjs/operator/filter';\nimport {map} from 'rxjs/operator/map';\n\n/**\n * MediaMonitor uses the MatchMedia service to observe mediaQuery changes (both activations and\n * deactivations). These changes are are published as MediaChange notifications.\n *\n * Note: all notifications will be performed within the\n * ng Zone to trigger change detections and component updates.\n *\n * It is the MediaMonitor that:\n *  - auto registers all known breakpoints\n *  - injects alias information into each raw MediaChange event\n *  - provides accessor to the currently active BreakPoint\n *  - publish list of overlapping BreakPoint(s); used by ResponsiveActivation\n */\n@Injectable()\nexport class MediaMonitor {\n  constructor(private _breakpoints: BreakPointRegistry, private _matchMedia: MatchMedia) {\n    this._registerBreakpoints();\n  }\n\n  /**\n   * Read-only accessor to the list of breakpoints configured in the BreakPointRegistry provider\n   */\n  get breakpoints(): BreakPoint[] {\n    return [...this._breakpoints.items];\n  }\n\n  get activeOverlaps(): BreakPoint[] {\n    let items: BreakPoint[] = this._breakpoints.overlappings.reverse();\n    return items.filter((bp: BreakPoint) => {\n      return this._matchMedia.isActive(bp.mediaQuery);\n    });\n  }\n\n  get active(): BreakPoint {\n    let found = null, items = this.breakpoints.reverse();\n    items.forEach(bp => {\n      if (bp.alias !== '') {\n        if (!found && this._matchMedia.isActive(bp.mediaQuery)) {\n          found = bp;\n        }\n      }\n    });\n\n    let first = this.breakpoints[0];\n    return found || (this._matchMedia.isActive(first.mediaQuery) ? first : null);\n  }\n\n  /**\n   * For the specified mediaQuery alias, is the mediaQuery range active?\n   */\n  isActive(alias: string): boolean {\n    let bp = this._breakpoints.findByAlias(alias) || this._breakpoints.findByQuery(alias);\n    return this._matchMedia.isActive(bp ? bp.mediaQuery : alias);\n  }\n\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * If specific breakpoint is observed, only return *activated* events\n   * otherwise return all events for BOTH activated + deactivated changes.\n   */\n  observe(alias?: string): Observable<MediaChange> {\n    let bp = this._breakpoints.findByAlias(alias) || this._breakpoints.findByQuery(alias);\n    let hasAlias = (change: MediaChange) => (bp ? change.mqAlias !== '' : true);\n    // Note: the raw MediaChange events [from MatchMedia] do not contain important alias information\n\n    let media$ = this._matchMedia.observe(bp ? bp.mediaQuery : alias);\n    return filter.call(map.call(media$, change => mergeAlias(change, bp)), hasAlias);\n  }\n\n  /**\n   * Immediate calls to matchMedia() to establish listeners\n   * and prepare for immediate subscription notifications\n   */\n  private _registerBreakpoints() {\n    let queries = this._breakpoints.sortedItems.map(bp => bp.mediaQuery);\n    this._matchMedia.registerQuery(queries);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {BreakPoint} from '../break-point';\n\nexport const RESPONSIVE_ALIASES = [\n  'xs', 'gt-xs', 'sm', 'gt-sm', 'md', 'gt-md', 'lg', 'gt-lg', 'xl'\n];\n\nexport const DEFAULT_BREAKPOINTS: BreakPoint[] = [\n  {\n    alias: 'xs',\n    mediaQuery: '(max-width: 599px)'\n  },\n  {\n    alias: 'gt-xs',\n    overlapping: true,\n    mediaQuery: '(min-width: 600px)'\n  },\n  {\n    alias: 'lt-sm',\n    overlapping: true,\n    mediaQuery: '(max-width: 599px)'\n  },\n  {\n    alias: 'sm',\n    mediaQuery: '(min-width: 600px) and (max-width: 959px)'\n  },\n  {\n    alias: 'gt-sm',\n    overlapping: true,\n    mediaQuery: '(min-width: 960px)'\n  },\n  {\n    alias: 'lt-md',\n    overlapping: true,\n    mediaQuery: '(max-width: 959px)'\n  },\n  {\n    alias: 'md',\n    mediaQuery: '(min-width: 960px) and (max-width: 1279px)'\n  },\n  {\n    alias: 'gt-md',\n    overlapping: true,\n    mediaQuery: '(min-width: 1280px)'\n  },\n  {\n    alias: 'lt-lg',\n    overlapping: true,\n    mediaQuery: '(max-width: 1279px)'\n  },\n  {\n    alias: 'lg',\n    mediaQuery: '(min-width: 1280px) and (max-width: 1919px)'\n  },\n  {\n    alias: 'gt-lg',\n    overlapping: true,\n    mediaQuery: '(min-width: 1920px)'\n  },\n  {\n    alias: 'lt-xl',\n    overlapping: true,\n    mediaQuery: '(max-width: 1920px)'\n  },\n  {\n    alias: 'xl',\n    mediaQuery: '(min-width: 1920px) and (max-width: 5000px)'\n  }\n];\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  InjectionToken,    // tslint:disable-line:no-unused-variable\n} from '@angular/core';\n\nimport {BreakPoint} from './break-point';\nimport {BREAKPOINTS} from './break-points-token';\nimport {DEFAULT_BREAKPOINTS} from './data/break-points';\nimport {ORIENTATION_BREAKPOINTS} from './data/orientation-break-points';\n\nimport {extendObject} from '../../utils/object-extend';\nimport {mergeByAlias, validateSuffixes} from '../../utils/breakpoint-tools';\n\n\n/**\n * Options to identify which breakpoint types to include as part of\n * a BreakPoint provider\n */\nexport interface BreakPointProviderOptions {\n  /**\n   * include pre-configured, internal default breakpoints.\n   * @default 'true'\n   */\n  defaults ?: boolean;\n  /**\n   * include pre-configured, internal orientations breakpoints.\n   * @default 'false'\n   */\n  orientations ?: boolean;\n}\n\n/**\n * Add new custom items to the default list or override existing default with custom overrides\n */\nexport function buildMergedBreakPoints(_custom?: BreakPoint[],\n                                       options?: BreakPointProviderOptions) {\n  options = extendObject({ }, {\n        defaults: true,       // exclude pre-configured, internal default breakpoints\n        orientation: false      // exclude pre-configured, internal orientations breakpoints\n  }, options || { });\n\n  return () => {\n    // Order so the defaults are loaded last; so ObservableMedia will report these last!\n    let defaults = options.orientations ? ORIENTATION_BREAKPOINTS.concat(DEFAULT_BREAKPOINTS) :\n        DEFAULT_BREAKPOINTS;\n\n    return options.defaults ? mergeByAlias(defaults, _custom || []) : mergeByAlias(_custom);\n  };\n}\n\n/**\n *  Ensure that only a single global BreakPoint list is instantiated...\n */\nexport function DEFAULT_BREAKPOINTS_PROVIDER_FACTORY() {\n  return validateSuffixes(DEFAULT_BREAKPOINTS);\n}\n/**\n * Default Provider that does not support external customization nor provide\n * the extra extended breakpoints:   \"handset\", \"tablet\", and \"web\"\n *\n *  NOTE: !! breakpoints are considered to have unique 'alias' properties,\n *        custom breakpoints matching existing breakpoints will override the properties\n *        of the existing (and not be added as an extra breakpoint entry).\n *        [xs, gt-xs, sm, gt-sm, md, gt-md, lg, gt-lg, xl]\n */\nexport const DEFAULT_BREAKPOINTS_PROVIDER = { // tslint:disable-line:variable-name\n  provide: BREAKPOINTS,\n  useFactory: DEFAULT_BREAKPOINTS_PROVIDER_FACTORY\n};\n/**\n * Use with FlexLayoutModule.CUSTOM_BREAKPOINTS_PROVIDER_FACTORY!\n */\nexport function CUSTOM_BREAKPOINTS_PROVIDER_FACTORY(_custom?: BreakPoint[],\n                                                    options?: BreakPointProviderOptions) {\n  return {\n    provide: BREAKPOINTS,\n    useFactory: buildMergedBreakPoints(_custom, options)\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\n\nimport {MatchMedia} from './match-media';\nimport {MediaMonitor} from './media-monitor';\nimport {OBSERVABLE_MEDIA_PROVIDER} from './observable-media-provider';\nimport {DEFAULT_BREAKPOINTS_PROVIDER} from './breakpoints/break-points-provider';\nimport {BreakPointRegistry} from './breakpoints/break-point-registry';\n\n/**\n * *****************************************************************\n * Define module for the MediaQuery API\n * *****************************************************************\n */\n\n@NgModule({\n  providers: [\n    DEFAULT_BREAKPOINTS_PROVIDER,  // Supports developer overrides of list of known breakpoints\n    BreakPointRegistry,      // Registry of known/used BreakPoint(s)\n    MatchMedia,              // Low-level service to publish observables w/ window.matchMedia()\n    MediaMonitor,            // MediaQuery monitor service observes all known breakpoints\n    OBSERVABLE_MEDIA_PROVIDER  // easy subscription injectable `media$` matchMedia observable\n  ]\n})\nexport class MediaQueriesModule {\n}\n\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Optional, SkipSelf} from '@angular/core';\n\nimport {MediaMonitor} from './media-monitor';\nimport {MatchMedia} from './match-media';\nimport {BreakPointRegistry} from './breakpoints/break-point-registry';\n\n/**\n * Ensure a single global service provider\n */\nexport function MEDIA_MONITOR_PROVIDER_FACTORY(parentMonitor: MediaMonitor,\n                                               breakpoints: BreakPointRegistry,\n                                               matchMedia: MatchMedia) {\n  return parentMonitor || new MediaMonitor(breakpoints, matchMedia);\n}\n\n\n/**\n * Export provider that uses a global service factory (above)\n */\nexport const MEDIA_MONITOR_PROVIDER = {\n  provide : MediaMonitor,\n  deps : [\n    [ new Optional(), new SkipSelf(), MediaMonitor ],\n    BreakPointRegistry,\n    MatchMedia,\n  ],\n  useFactory : MEDIA_MONITOR_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Applies CSS prefixes to appropriate style keys.\n *\n * Note: `-ms-`, `-moz` and `-webkit-box` are no longer supported. e.g.\n *    {\n *      display: -webkit-flex;     NEW - Safari 6.1+. iOS 7.1+, BB10\n *      display: flex;             NEW, Spec - Firefox, Chrome, Opera\n *      // display: -webkit-box;   OLD - iOS 6-, Safari 3.1-6, BB7\n *      // display: -ms-flexbox;   TWEENER - IE 10\n *      // display: -moz-flexbox;  OLD - Firefox\n *    }\n */\nexport function applyCssPrefixes(target) {\n  for (let key in target) {\n    let value = target[key] || '';\n\n    switch (key) {\n      case 'display':\n        if (value === 'flex') {\n          target['display'] = [\n            '-webkit-flex',\n            'flex'\n          ];\n        } else if (value === 'inline-flex') {\n          target['display'] = [\n            '-webkit-inline-flex',\n            'inline-flex'\n          ];\n        } else {\n          target['display'] = value;\n        }\n        break;\n\n      case 'align-items':\n      case 'align-self':\n      case 'align-content':\n      case 'flex':\n      case 'flex-basis':\n      case 'flex-flow':\n      case 'flex-grow':\n      case 'flex-shrink':\n      case 'flex-wrap':\n      case 'justify-content':\n        target['-webkit-' + key] = value;\n        break;\n\n      case 'flex-direction':\n        value = value || 'row';\n        target['-webkit-flex-direction'] = value;\n        target['flex-direction'] = value;\n        break;\n\n      case 'order':\n        target['order'] = target['-webkit-' + key] = isNaN(value) ? '0' : value;\n        break;\n    }\n  }\n  return target;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const LAYOUT_VALUES = ['row', 'column', 'row-reverse', 'column-reverse'];\n\n/**\n * Validate the direction|'direction wrap' value and then update the host's inline flexbox styles\n */\nexport function buildLayoutCSS(value: string) {\n  let [direction, wrap] = validateValue(value);\n  return  buildCSS(direction, wrap);\n }\n\n/**\n  * Validate the value to be one of the acceptable value options\n  * Use default fallback of 'row'\n  */\nexport function validateValue(value: string) {\n  value = value ? value.toLowerCase() : '';\n  let [direction, wrap] = value.split(' ');\n  if (!LAYOUT_VALUES.find(x => x === direction)) {\n    direction = LAYOUT_VALUES[0];\n  }\n  return [direction, validateWrapValue(wrap)];\n}\n\n/**\n * Determine if the validated, flex-direction value specifies\n * a horizontal/row flow.\n */\nexport function isFlowHorizontal(value: string): boolean {\n  let [flow, _] = validateValue(value);\n  return flow.indexOf('row') > -1;\n}\n\n/**\n * Convert layout-wrap='<value>' to expected flex-wrap style\n */\nexport function validateWrapValue(value) {\n  if (!!value) {\n    switch (value.toLowerCase()) {\n      case 'reverse':\n      case 'wrap-reverse':\n      case 'reverse-wrap':\n        value = 'wrap-reverse';\n        break;\n\n      case 'no':\n      case 'none':\n      case 'nowrap':\n        value = 'nowrap';\n        break;\n\n      // All other values fallback to 'wrap'\n      default:\n        value = 'wrap';\n        break;\n    }\n  }\n  return value;\n}\n\n\n\n/**\n * Build the CSS that should be assigned to the element instance\n * BUG:\n *   1) min-height on a column flex container won’t apply to its flex item children in IE 10-11.\n *      Use height instead if possible; height : <xxx>vh;\n *\n *  This way any padding or border specified on the child elements are\n *  laid out and drawn inside that element's specified width and height.\n */\nfunction buildCSS(direction, wrap = null) {\n  return {\n    'display': 'flex',\n    'box-sizing': 'border-box',\n    'flex-direction': direction,\n    'flex-wrap': !!wrap ? wrap : null\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Subscription} from 'rxjs/Subscription';\nimport {map} from 'rxjs/operator/map';\n\nimport {MediaChange, MediaQuerySubscriber} from '../../media-query/media-change';\nimport {BreakPoint} from '../../media-query/breakpoints/break-point';\nimport {MediaMonitor} from '../../media-query/media-monitor';\n\nimport {extendObject} from '../../utils/object-extend';\n\nexport declare type SubscriptionList = Subscription[ ];\n\nexport interface BreakPointX extends BreakPoint {\n  key: string;\n  baseKey: string;\n}\n\nexport class KeyOptions {\n  constructor(public baseKey: string,\n              public defaultValue: string|number|boolean,\n              public inputKeys: { [key: string]: any }) {\n  }\n}\n\n/**\n * ResponsiveActivation acts as a proxy between the MonitorMedia service (which emits mediaQuery\n * changes) and the fx API directives. The MQA proxies mediaQuery change events and notifies the\n * directive via the specified callback.\n *\n * - The MQA also determines which directive property should be used to determine the\n *   current change 'value'... BEFORE the original `onMediaQueryChanges()` method is called.\n * - The `ngOnDestroy()` method is also head-hooked to enable auto-unsubscribe from the\n *   MediaQueryServices.\n *\n * NOTE: these interceptions enables the logic in the fx API directives to remain terse and clean.\n */\nexport class ResponsiveActivation {\n  private _subscribers: SubscriptionList = [];\n  private _activatedInputKey: string;\n\n  /**\n   * Constructor\n   */\n  constructor(private _options: KeyOptions,\n              private _mediaMonitor: MediaMonitor,\n              private _onMediaChanges: MediaQuerySubscriber) {\n    this._subscribers = this._configureChangeObservers();\n  }\n\n  /**\n   * Accessor to the DI'ed directive property\n   * Each directive instance has a reference to the MediaMonitor which is\n   * used HERE to subscribe to mediaQuery change notifications.\n   */\n  get mediaMonitor(): MediaMonitor {\n    return this._mediaMonitor;\n  }\n\n  /**\n   * Determine which directive @Input() property is currently active (for the viewport size):\n   * The key must be defined (in use) or fallback to the 'closest' overlapping property key\n   * that is defined; otherwise the default property key will be used.\n   * e.g.\n   *      if `<div fxHide fxHide.gt-sm=\"false\">` is used but the current activated mediaQuery alias\n   *      key is `.md` then `.gt-sm` should be used instead\n   */\n  get activatedInputKey(): string {\n    return this._activatedInputKey || this._options.baseKey;\n  }\n\n  /**\n   * Get the currently activated @Input value or the fallback default @Input value\n   */\n  get activatedInput(): any {\n    let key = this.activatedInputKey;\n    return this.hasKeyValue(key) ? this._lookupKeyValue(key) : this._options.defaultValue;\n  }\n\n  /**\n   * Fast validator for presence of attribute on the host element\n   */\n  public hasKeyValue(key) {\n    let value = this._options.inputKeys[key];\n    return typeof value !== 'undefined';\n  }\n\n  /**\n   * Remove interceptors, restore original functions, and forward the onDestroy() call\n   */\n  destroy() {\n    this._subscribers.forEach((link: Subscription) => {\n      link.unsubscribe();\n    });\n    this._subscribers = [];\n  }\n\n  /**\n   * For each *defined* API property, register a callback to `_onMonitorEvents( )`\n   * Cache 1..n subscriptions for internal auto-unsubscribes when the the directive destructs\n   */\n  private _configureChangeObservers(): SubscriptionList {\n    let subscriptions = [];\n\n    this._buildRegistryMap().forEach((bp: BreakPointX) => {\n      if (this._keyInUse(bp.key)) {\n        // Inject directive default property key name: to let onMediaChange() calls\n        // know which property is being triggered...\n        let buildChanges = (change: MediaChange) => {\n          change = change.clone();\n          change.property = this._options.baseKey;\n          return change;\n        };\n\n        subscriptions.push(\n            map.call(this.mediaMonitor.observe(bp.alias), buildChanges)\n                .subscribe(change => {\n                  this._onMonitorEvents(change);\n                })\n        );\n      }\n    });\n\n    return subscriptions;\n  }\n\n  /**\n   * Build mediaQuery key-hashmap; only for the directive properties that are actually defined/used\n   * in the HTML markup\n   */\n  private _buildRegistryMap() {\n    return this.mediaMonitor.breakpoints\n        .map(bp => {\n          return <BreakPointX> extendObject({}, bp, {\n            baseKey: this._options.baseKey,             // e.g. layout, hide, self-align, flex-wrap\n            key: this._options.baseKey + bp.suffix  // e.g.  layoutGtSm, layoutMd, layoutGtLg\n          });\n        })\n        .filter(bp => this._keyInUse(bp.key));\n  }\n\n  /**\n   * Synchronizes change notifications with the current mq-activated @Input and calculates the\n   * mq-activated input value or the default value\n   */\n  protected _onMonitorEvents(change: MediaChange) {\n    if (change.property == this._options.baseKey) {\n      change.value = this._calculateActivatedValue(change);\n\n      this._onMediaChanges(change);\n    }\n  }\n\n  /**\n   * Has the key been specified in the HTML markup and thus is intended\n   * to participate in activation processes.\n   */\n  private _keyInUse(key): boolean {\n    return this._lookupKeyValue(key) !== undefined;\n  }\n\n  /**\n   *  Map input key associated with mediaQuery activation to closest defined input key\n   *  then return the values associated with the targeted input property\n   *\n   *  !! change events may arrive out-of-order (activate before deactivate)\n   *     so make sure the deactivate is used ONLY when the keys match\n   *     (since a different activate may be in use)\n   */\n  private _calculateActivatedValue(current: MediaChange): any {\n    const currentKey = this._options.baseKey + current.suffix;  // e.g. suffix == 'GtSm',\n    let newKey = this._activatedInputKey;                     // e.g. newKey == hideGtSm\n\n    newKey = current.matches ? currentKey : ((newKey == currentKey) ? null : newKey);\n\n    this._activatedInputKey = this._validateInputKey(newKey);\n    return this.activatedInput;\n  }\n\n  /**\n   * For the specified input property key, validate it is defined (used in the markup)\n   * If not see if a overlapping mediaQuery-related input key fallback has been defined\n   *\n   * NOTE: scans in the order defined by activeOverLaps (largest viewport ranges -> smallest ranges)\n   */\n  private _validateInputKey(inputKey) {\n    let items: BreakPoint[] = this.mediaMonitor.activeOverlaps;\n    let isMissingKey = (key) => !this._keyInUse(key);\n\n    if (isMissingKey(inputKey)) {\n      items.some(bp => {\n        let key = this._options.baseKey + bp.suffix;\n        if (!isMissingKey(key)) {\n          inputKey = key;\n          return true;  // exit .some()\n        }\n        return false;\n      });\n    }\n    return inputKey;\n  }\n\n  /**\n   * Get the value (if any) for the directive instances @Input property (aka key)\n   */\n  private _lookupKeyValue(key) {\n    return this._options.inputKeys[key];\n  }\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n import {\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n  SkipSelf,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {extendObject} from '../../utils/object-extend';\n\nimport {BaseFxDirective} from './base';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\n\nimport {LayoutDirective} from './layout';\nimport {LayoutWrapDirective} from './layout-wrap';\nimport {validateBasis} from '../../utils/basis-validator';\nimport {isFlowHorizontal} from '../../utils/layout-validator';\n\n\n/** Built-in aliases for different flex-basis values. */\nexport type FlexBasisAlias = 'grow' | 'initial' | 'auto' | 'none' | 'nogrow' | 'noshrink';\n\n\n/**\n * Directive to control the size of a flex item using flex-basis, flex-grow, and flex-shrink.\n * Corresponds to the css `flex` shorthand property.\n *\n * @see https://css-tricks.com/snippets/css/a-guide-to-flexbox/\n */\n@Directive({selector: `\n  [fxFlex],\n  [fxFlex.xs], [fxFlex.sm], [fxFlex.md], [fxFlex.lg], [fxFlex.xl],\n  [fxFlex.lt-sm], [fxFlex.lt-md], [fxFlex.lt-lg], [fxFlex.lt-xl],\n  [fxFlex.gt-xs], [fxFlex.gt-sm], [fxFlex.gt-md], [fxFlex.gt-lg],\n`\n})\nexport class FlexDirective extends BaseFxDirective implements OnInit, OnChanges, OnDestroy {\n\n  /** The flex-direction of this element's flex container. Defaults to 'row'. */\n  protected _layout = 'row';\n\n  /**\n   * Subscription to the parent flex container's layout changes.\n   * Stored so we can unsubscribe when this directive is destroyed.\n   */\n  protected _layoutWatcher: Subscription;\n\n  /* tslint:disable */\n  @Input('fxShrink')     set shrink(val)    { this._cacheInput('shrink', val); };\n  @Input('fxGrow')       set grow(val)      { this._cacheInput('grow', val); };\n\n  @Input('fxFlex')       set flex(val)      { this._cacheInput('flex', val); };\n  @Input('fxFlex.xs')    set flexXs(val)    { this._cacheInput('flexXs', val); };\n  @Input('fxFlex.sm')    set flexSm(val)    { this._cacheInput('flexSm', val); };\n  @Input('fxFlex.md')    set flexMd(val)    { this._cacheInput('flexMd', val); };\n  @Input('fxFlex.lg')    set flexLg(val)    { this._cacheInput('flexLg', val); };\n  @Input('fxFlex.xl')    set flexXl(val)    { this._cacheInput('flexXl', val); };\n\n  @Input('fxFlex.gt-xs') set flexGtXs(val)  { this._cacheInput('flexGtXs', val); };\n  @Input('fxFlex.gt-sm') set flexGtSm(val)  { this._cacheInput('flexGtSm', val); };\n  @Input('fxFlex.gt-md') set flexGtMd(val)  { this._cacheInput('flexGtMd', val); };\n  @Input('fxFlex.gt-lg') set flexGtLg(val)  { this._cacheInput('flexGtLg', val); };\n\n  @Input('fxFlex.lt-sm') set flexLtSm(val) { this._cacheInput('flexLtSm', val); };\n  @Input('fxFlex.lt-md') set flexLtMd(val) { this._cacheInput('flexLtMd', val); };\n  @Input('fxFlex.lt-lg') set flexLtLg(val) { this._cacheInput('flexLtLg', val); };\n  @Input('fxFlex.lt-xl') set flexLtXl(val) { this._cacheInput('flexLtXl', val); };\n  /* tslint:enable */\n\n  // Note: Explicitly @SkipSelf on LayoutDirective and LayoutWrapDirective because we are looking\n  //       for the parent flex container for this flex item.\n  constructor(monitor: MediaMonitor,\n              elRef: ElementRef,\n              renderer: Renderer2,\n              @Optional() @SkipSelf() protected _container: LayoutDirective,\n              @Optional() @SkipSelf() protected _wrap: LayoutWrapDirective) {\n\n    super(monitor, elRef, renderer);\n\n    this._cacheInput('flex', '');\n    this._cacheInput('shrink', 1);\n    this._cacheInput('grow', 1);\n\n    if (_container) {\n      // If this flex item is inside of a flex container marked with\n      // Subscribe to layout immediate parent direction changes\n      this._layoutWatcher = _container.layout$.subscribe((direction) => {\n        // `direction` === null if parent container does not have a `fxLayout`\n        this._onLayoutChange(direction);\n      });\n    }\n  }\n\n  /**\n   * For @Input changes on the current mq activation property, see onMediaQueryChanges()\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['flex'] != null || this._mqActivation) {\n      this._updateStyle();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    this._listenForMediaQueryChanges('flex', '', (changes: MediaChange) => {\n      this._updateStyle(changes.value);\n    });\n    this._updateStyle();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    if (this._layoutWatcher) {\n      this._layoutWatcher.unsubscribe();\n    }\n  }\n\n\n  /**\n   * Caches the parent container's 'flex-direction' and updates the element's style.\n   * Used as a handler for layout change events from the parent flex container.\n   */\n  protected _onLayoutChange(direction?: string) {\n    this._layout = direction || this._layout || 'row';\n    this._updateStyle();\n  }\n\n  protected _updateStyle(value?: string|number) {\n    let flexBasis = value || this._queryInput('flex') || '';\n    if (this._mqActivation) {\n      flexBasis = this._mqActivation.activatedInput;\n    }\n\n    let basis = String(flexBasis).replace(';', '');\n    let parts = validateBasis(basis, this._queryInput('grow'), this._queryInput('shrink'));\n    this._applyStyleToElement(this._validateValue.apply(this, parts));\n  }\n\n  /**\n   * Validate the value to be one of the acceptable value options\n   * Use default fallback of 'row'\n   */\n  protected _validateValue(grow: number|string,\n                           shrink: number|string,\n                           basis: string|number|FlexBasisAlias) {\n      // The flex-direction of this element's flex container. Defaults to 'row'.\n      let layout = this._getFlowDirection(this.parentElement, true);\n      let direction = (layout.indexOf('column') > -1) ? 'column' : 'row';\n      let css, isValue;\n\n      grow = (grow == '0') ? 0 : grow;\n      shrink = (shrink == '0') ? 0 : shrink;\n\n      // flex-basis allows you to specify the initial/starting main-axis size of the element,\n      // before anything else is computed. It can either be a percentage or an absolute value.\n      // It is, however, not the breaking point for flex-grow/shrink properties\n      //\n      // flex-grow can be seen as this:\n      //   0: Do not stretch. Either size to element's content width, or obey 'flex-basis'.\n      //   1: (Default value). Stretch; will be the same size to all other flex items on\n      //       the same row since they have a default value of 1.\n      //   ≥2 (integer n): Stretch. Will be n times the size of other elements\n      //      with 'flex-grow: 1' on the same row.\n\n      // Use `null` to clear existing styles.\n      let clearStyles = {\n        'max-width': null,\n        'max-height': null,\n        'min-width': null,\n        'min-height': null\n      };\n      switch (basis || '') {\n        case '':\n          css = extendObject(clearStyles, {'flex': '1 1 0.000000001px'});\n          break;\n        case 'initial':   // default\n        case 'nogrow':\n          grow = 0;\n          css = extendObject(clearStyles, {'flex': '0 1 auto'});\n          break;\n        case 'grow':\n          css = extendObject(clearStyles, {'flex': '1 1 100%'});\n          break;\n        case 'noshrink':\n          shrink = 0;\n          css = extendObject(clearStyles, {'flex': '1 0 auto'});\n          break;\n        case 'auto':\n          css = extendObject(clearStyles, {'flex': `${grow} ${shrink} auto`});\n          break;\n        case 'none':\n          grow = 0;\n          shrink = 0;\n          css = extendObject(clearStyles, {'flex': '0 0 auto'});\n          break;\n        default:\n          let hasCalc = String(basis).indexOf('calc') > -1;\n          let isPercent = String(basis).indexOf('%') > -1 && !hasCalc;\n\n          isValue = hasCalc ||\n              String(basis).indexOf('px') > -1 ||\n              String(basis).indexOf('em') > -1 ||\n              String(basis).indexOf('vw') > -1 ||\n              String(basis).indexOf('vh') > -1;\n\n          // Defaults to percentage sizing unless `px` is explicitly set\n          if (!isValue && !isPercent && !isNaN(basis as any)) {\n            basis = basis + '%';\n          }\n\n          if (basis === '0px') {\n            basis = '0%';\n          }\n\n          // Set max-width = basis if using layout-wrap\n          // tslint:disable-next-line:max-line-length\n          // @see https://github.com/philipwalton/flexbugs#11-min-and-max-size-declarations-are-ignored-when-wrappifl-flex-items\n\n          css = extendObject(clearStyles, { // fix issue #5345\n            'flex': `${grow} ${shrink} ${(isValue || this._wrap) ? basis : '100%'}`,\n          });\n          break;\n      }\n\n      let max = isFlowHorizontal(direction) ? 'max-width' : 'max-height';\n      let min = isFlowHorizontal(direction) ? 'min-width' : 'min-height';\n\n      let usingCalc = (String(basis).indexOf('calc') > -1) || (basis == 'auto');\n      let isPx = String(basis).indexOf('px') > -1 || usingCalc;\n\n\n      // make box inflexible when shrink and grow are both zero\n      // should not set a min when the grow is zero\n      // should not set a max when the shrink is zero\n      let isFixed = !grow && !shrink;\n      css[min] = (basis == '0%') ? 0 : isFixed || (isPx && grow) ? basis : null;\n      css[max] = (basis == '0%') ? 0 : isFixed || (!usingCalc && shrink) ? basis : null;\n\n    return extendObject(css, {'box-sizing': 'border-box'});\n  }\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnInit,\n  OnChanges,\n  OnDestroy,\n  Renderer2,\n  SimpleChanges,\n  Self,\n  Optional\n} from '@angular/core';\n\nimport {Subscription} from 'rxjs/Subscription';\n\nimport {BaseFxDirective} from './base';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\nimport {LayoutDirective} from './layout';\n\nconst FALSY = ['false', false, 0];\n\n/**\n * For fxHide selectors, we invert the 'value'\n * and assign to the equivalent fxShow selector cache\n *  - When 'hide' === '' === true, do NOT show the element\n *  - When 'hide' === false or 0... we WILL show the element\n */\nexport function negativeOf(hide: any) {\n  return (hide === '') ? false :\n         ((hide === 'false') || (hide === 0)) ? true : !hide;\n}\n\n/**\n * 'show' Layout API directive\n *\n */\n@Directive({\n  selector: `\n  [fxShow],\n  [fxShow.xs], [fxShow.sm], [fxShow.md], [fxShow.lg], [fxShow.xl],\n  [fxShow.lt-sm], [fxShow.lt-md], [fxShow.lt-lg], [fxShow.lt-xl],\n  [fxShow.gt-xs], [fxShow.gt-sm], [fxShow.gt-md], [fxShow.gt-lg],\n  [fxHide],\n  [fxHide.xs], [fxHide.sm], [fxHide.md], [fxHide.lg], [fxHide.xl],\n  [fxHide.lt-sm], [fxHide.lt-md], [fxHide.lt-lg], [fxHide.lt-xl],\n  [fxHide.gt-xs], [fxHide.gt-sm], [fxHide.gt-md], [fxHide.gt-lg]\n`\n})\nexport class ShowHideDirective extends BaseFxDirective implements OnInit, OnChanges, OnDestroy {\n\n  /**\n   * Subscription to the parent flex container's layout changes.\n   * Stored so we can unsubscribe when this directive is destroyed.\n   */\n  protected _layoutWatcher: Subscription;\n\n  /* tslint:disable */\n  @Input('fxShow')       set show(val) {  this._cacheInput('show', val);  }\n  @Input('fxShow.xs')    set showXs(val) {this._cacheInput('showXs', val);}\n  @Input('fxShow.sm')    set showSm(val) {this._cacheInput('showSm', val); };\n  @Input('fxShow.md')    set showMd(val) {this._cacheInput('showMd', val); };\n  @Input('fxShow.lg')    set showLg(val) {this._cacheInput('showLg', val); };\n  @Input('fxShow.xl')    set showXl(val) {this._cacheInput('showXl', val); };\n\n  @Input('fxShow.lt-sm') set showLtSm(val) { this._cacheInput('showLtSm', val); };\n  @Input('fxShow.lt-md') set showLtMd(val) { this._cacheInput('showLtMd', val); };\n  @Input('fxShow.lt-lg') set showLtLg(val) { this._cacheInput('showLtLg', val); };\n  @Input('fxShow.lt-xl') set showLtXl(val) { this._cacheInput('showLtXl', val); };\n\n  @Input('fxShow.gt-xs') set showGtXs(val) {this._cacheInput('showGtXs', val); };\n  @Input('fxShow.gt-sm') set showGtSm(val) {this._cacheInput('showGtSm', val); };\n  @Input('fxShow.gt-md') set showGtMd(val) {this._cacheInput('showGtMd', val); };\n  @Input('fxShow.gt-lg') set showGtLg(val) {this._cacheInput('showGtLg', val); };\n\n  @Input('fxHide')       set hide(val) {this._cacheInput('show', negativeOf(val));}\n  @Input('fxHide.xs')    set hideXs(val) {this._cacheInput('showXs', negativeOf(val));}\n  @Input('fxHide.sm')    set hideSm(val) {this._cacheInput('showSm', negativeOf(val)); };\n  @Input('fxHide.md')    set hideMd(val) {this._cacheInput('showMd', negativeOf(val)); };\n  @Input('fxHide.lg')    set hideLg(val) {this._cacheInput('showLg', negativeOf(val)); };\n  @Input('fxHide.xl')    set hideXl(val) {this._cacheInput('showXl', negativeOf(val)); };\n\n  @Input('fxHide.lt-sm') set hideLtSm(val) { this._cacheInput('showLtSm', negativeOf(val)); };\n  @Input('fxHide.lt-md') set hideLtMd(val) { this._cacheInput('showLtMd', negativeOf(val)); };\n  @Input('fxHide.lt-lg') set hideLtLg(val) { this._cacheInput('showLtLg', negativeOf(val)); };\n  @Input('fxHide.lt-xl') set hideLtXl(val) { this._cacheInput('showLtXl', negativeOf(val)); };\n\n  @Input('fxHide.gt-xs') set hideGtXs(val) {this._cacheInput('showGtXs', negativeOf(val)); };\n  @Input('fxHide.gt-sm') set hideGtSm(val) {this._cacheInput('showGtSm', negativeOf(val)); };\n  @Input('fxHide.gt-md') set hideGtMd(val) {this._cacheInput('showGtMd', negativeOf(val)); };\n  @Input('fxHide.gt-lg') set hideGtLg(val) {this._cacheInput('showGtLg', negativeOf(val)); };\n\n  /* tslint:enable */\n  /**\n   *\n   */\n  constructor(monitor: MediaMonitor,\n              @Optional() @Self() protected _layout: LayoutDirective,\n              protected elRef: ElementRef,\n              protected renderer: Renderer2) {\n\n    super(monitor, elRef, renderer);\n\n    this._display = this._getDisplayStyle();  // re-invoke override to use `this._layout`\n    if (_layout) {\n      /**\n       * The Layout can set the display:flex (and incorrectly affect the Hide/Show directives.\n       * Whenever Layout [on the same element] resets its CSS, then update the Hide/Show CSS\n       */\n      this._layoutWatcher = _layout.layout$.subscribe(() => this._updateWithValue());\n    }\n  }\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  /**\n   * Override accessor to the current HTMLElement's `display` style\n   * Note: Show/Hide will not change the display to 'flex' but will set it to 'block'\n   * unless it was already explicitly specified inline or in a CSS stylesheet.\n   */\n  protected _getDisplayStyle(): string {\n    return this._layout ? 'flex' : super._getDisplayStyle();\n  }\n\n\n  /**\n   * On changes to any @Input properties...\n   * Default to use the non-responsive Input value ('fxShow')\n   * Then conditionally override with the mq-activated Input's current value\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['show'] != null || this._mqActivation) {\n      this._updateWithValue();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    let value = this._getDefaultVal('show', true);\n\n    // Build _mqActivation controller\n    this._listenForMediaQueryChanges('show', value, (changes: MediaChange) => {\n      this._updateWithValue(changes.value);\n    });\n\n    this._updateWithValue();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    if (this._layoutWatcher) {\n      this._layoutWatcher.unsubscribe();\n    }\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  /** Validate the visibility value and then update the host's inline display style */\n  protected _updateWithValue(value?: string|number|boolean) {\n    value = value || this._getDefaultVal('show', true);\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n\n    let shouldShow = this._validateTruthy(value);\n    this._applyStyleToElement(this._buildCSS(shouldShow));\n  }\n\n\n  /** Build the CSS that should be assigned to the element instance */\n  protected _buildCSS(show) {\n    return {'display': show ? this._display : 'none'};\n  }\n\n  /**  Validate the to be not FALSY */\n  _validateTruthy(show) {\n    return (FALSY.indexOf(show) == -1);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Renderer2} from '@angular/core';\n\nimport {MediaMonitor} from '../../media-query/media-monitor';\nimport {BaseFxDirective} from './base';\n\nconst FLEX_FILL_CSS = {\n  'margin': 0,\n  'width': '100%',\n  'height': '100%',\n  'min-width': '100%',\n  'min-height': '100%'\n};\n\n/**\n * 'fxFill' flexbox styling directive\n *  Maximizes width and height of element in a layout container\n *\n *  NOTE: fxFill is NOT responsive API!!\n */\n@Directive({selector: `\n  [fxFill],\n  [fxFlexFill]\n`})\nexport class FlexFillDirective extends BaseFxDirective {\n  constructor(monitor: MediaMonitor, public elRef: ElementRef, public renderer: Renderer2) {\n    super(monitor, elRef, renderer);\n    this._applyStyleToElement(FLEX_FILL_CSS);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport type MediaQuerySubscriber = (changes: MediaChange) => void;\n\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nexport class MediaChange {\n  property: string;\n  value: any;\n\n  constructor(public matches = false,       // Is the mq currently activated\n              public mediaQuery = 'all',    // e.g.   (min-width: 600px) and (max-width: 959px)\n              public mqAlias = '',          // e.g.   gt-sm, md, gt-lg\n              public suffix = ''            // e.g.   GtSM, Md, GtLg\n  ) { }\n\n  clone() {\n    return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n  }\n}\n\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable, Inject} from '@angular/core';\n\nimport {BreakPoint} from './break-point';\nimport {BREAKPOINTS} from './break-points-token';\n\n\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overriden from custom, application-specific ranges\n *\n */\n@Injectable()\nexport class BreakPointRegistry {\n\n  constructor(@Inject(BREAKPOINTS) private _registry: BreakPoint[ ]) {\n  }\n\n  /**\n   * Accessor to raw list\n   */\n  get items(): BreakPoint[ ] {\n    return [...this._registry];\n  }\n\n  /**\n   * Accessor to sorted list used for registration with matchMedia API\n   *\n   * NOTE: During breakpoint registration, we want to register the overlaps FIRST\n   *       so the non-overlaps will trigger the MatchMedia:BehaviorSubject last!\n   *       And the largest, non-overlap, matching breakpoint should be the lastReplay value\n   */\n  get sortedItems(): BreakPoint[] {\n    let overlaps = this._registry.filter(it => it.overlapping === true);\n    let nonOverlaps = this._registry.filter(it => it.overlapping !== true);\n\n    return [...overlaps, ...nonOverlaps];\n  }\n\n  /**\n   * Search breakpoints by alias (e.g. gt-xs)\n   */\n  findByAlias(alias: string): BreakPoint {\n    return this._registry.find(bp => bp.alias == alias);\n  }\n\n  findByQuery(query: string): BreakPoint {\n    return this._registry.find(bp => bp.mediaQuery == query);\n  }\n\n  /**\n   * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n   * e.g. gt-sm overlaps md, lg, and xl\n   */\n  get overlappings(): BreakPoint[] {\n    return this._registry.filter(it => it.overlapping == true);\n  }\n\n  /**\n   * Get list of all registered (non-empty) breakpoint aliases\n   */\n  get aliases(): string[] {\n    return this._registry.map(it => it.alias);\n  }\n\n  /**\n   * Aliases are mapped to properties using suffixes\n   * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n   * for property layoutGtSM.\n   */\n  get suffixes(): string[] {\n    return this._registry.map(it => it.suffix);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n *\n * @param dest The object which will have properties copied to it.\n * @param sources The source objects from which properties will be copied.\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let source of sources) {\n    if (source != null) {\n      for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\n\nimport {Subscription} from 'rxjs/Subscription';\nimport {Observable, Subscribable} from 'rxjs/Observable';\n\nimport {map} from 'rxjs/operator/map';\nimport {filter} from 'rxjs/operator/filter';\n\nimport {BreakPointRegistry} from './breakpoints/break-point-registry';\n\nimport {MediaChange} from './media-change';\nimport {MatchMedia} from './match-media';\nimport {mergeAlias} from './../utils/add-alias';\nimport {BreakPoint} from './breakpoints/break-point';\n\n/**\n * Base class for MediaService and pseudo-token for\n */\nexport abstract class ObservableMedia implements Subscribable<MediaChange> {\n  abstract isActive(query: string): boolean;\n\n  abstract asObservable(): Observable<MediaChange>;\n\n  abstract subscribe(next?: (value: MediaChange) => void,\n                     error?: (error: any) => void,\n                     complete?: () => void): Subscription;\n}\n\n/**\n * Class internalizes a MatchMedia service and exposes an Subscribable and Observable interface.\n\n * This an Observable with that exposes a feature to subscribe to mediaQuery\n * changes and a validator method (`isActive(<alias>)`) to test if a mediaQuery (or alias) is\n * currently active.\n *\n * !! Only mediaChange activations (not de-activations) are announced by the ObservableMedia\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * !! This is not an actual Observable. It is a wrapper of an Observable used to publish additional\n * methods like `isActive(<alias>). To access the Observable and use RxJS operators, use\n * `.asObservable()` with syntax like media.asObservable().map(....).\n *\n *  @usage\n *\n *  // RxJS\n *  import 'rxjs/add/operator/filter';\n *  import { ObservableMedia } from '@angular/flex-layout';\n *\n *  @Component({ ... })\n *  export class AppComponent {\n *    status : string = '';\n *\n *    constructor(  media:ObservableMedia ) {\n *      let onChange = (change:MediaChange) => {\n *        this.status = change ? `'${change.mqAlias}' = (${change.mediaQuery})` : '';\n *      };\n *\n *      // Subscribe directly or access observable to use filter/map operators\n *      // e.g.\n *      //      media.subscribe(onChange);\n *\n *      media.asObservable()\n *        .filter((change:MediaChange) => true)   // silly noop filter\n *        .subscribe(onChange);\n *    }\n *  }\n */\n@Injectable()\nexport class MediaService implements ObservableMedia {\n  /**\n   * Should we announce gt-<xxx> breakpoint activations ?\n   */\n  public filterOverlaps = true;\n\n  constructor(private breakpoints: BreakPointRegistry,\n              private mediaWatcher: MatchMedia) {\n    this._registerBreakPoints();\n    this.observable$ = this._buildObservable();\n  }\n\n  /**\n   * Test if specified query/alias is active.\n   */\n  isActive(alias): boolean {\n    let query = this._toMediaQuery(alias);\n    return this.mediaWatcher.isActive(query);\n  }\n\n  /**\n   * Proxy to the Observable subscribe method\n   */\n  subscribe(next?: (value: MediaChange) => void,\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n    return this.observable$.subscribe(next, error, complete);\n  }\n\n  /**\n   * Access to observable for use with operators like\n   * .filter(), .map(), etc.\n   */\n  asObservable(): Observable<MediaChange> {\n    return this.observable$;\n  }\n\n  // ************************************************\n  // Internal Methods\n  // ************************************************\n\n  /**\n   * Register all the mediaQueries registered in the BreakPointRegistry\n   * This is needed so subscribers can be auto-notified of all standard, registered\n   * mediaQuery activations\n   */\n  private _registerBreakPoints() {\n    let queries = this.breakpoints.sortedItems.map(bp => bp.mediaQuery);\n    this.mediaWatcher.registerQuery(queries);\n  }\n\n  /**\n   * Prepare internal observable\n   *\n   * NOTE: the raw MediaChange events [from MatchMedia] do not\n   *       contain important alias information; as such this info\n   *       must be injected into the MediaChange\n   */\n  private _buildObservable() {\n    const self = this;\n    const activationsOnly = (change: MediaChange) => {\n      return change.matches === true;\n    };\n    const addAliasInformation = (change: MediaChange) => {\n      return mergeAlias(change, this._findByQuery(change.mediaQuery));\n    };\n    const excludeOverlaps = (change: MediaChange) => {\n      let bp = this.breakpoints.findByQuery(change.mediaQuery);\n      return !bp ? true : !(self.filterOverlaps && bp.overlapping);\n    };\n\n    /**\n     * Only pass/announce activations (not de-activations)\n     * Inject associated (if any) alias information into the MediaChange event\n     * Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n     */\n    return filter.call(\n        map.call(\n            filter.call(\n                this.mediaWatcher.observe(),\n                activationsOnly\n            ),\n            addAliasInformation),\n        excludeOverlaps);\n  }\n\n  /**\n   * Breakpoint locator by alias\n   */\n  private _findByAlias(alias) {\n    return this.breakpoints.findByAlias(alias);\n  }\n\n  /**\n   * Breakpoint locator by mediaQuery\n   */\n  private _findByQuery(query) {\n    return this.breakpoints.findByQuery(query);\n  }\n\n  /**\n   * Find associated breakpoint (if any)\n   */\n  private _toMediaQuery(query) {\n    let bp: BreakPoint = this._findByAlias(query) || this._findByQuery(query);\n    return bp ? bp.mediaQuery : query;\n  }\n\n  private observable$: Observable<MediaChange>;\n}\n\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Optional,\n  SkipSelf\n} from '@angular/core';\n\nimport {BreakPointRegistry} from './breakpoints/break-point-registry';\n\nimport {MatchMedia} from './match-media';\nimport {ObservableMedia, MediaService} from './observable-media';\n\n/**\n * Ensure a single global ObservableMedia service provider\n */\nexport function OBSERVABLE_MEDIA_PROVIDER_FACTORY(parentService: ObservableMedia,\n                                                  matchMedia: MatchMedia,\n                                                  breakpoints: BreakPointRegistry) {\n  return parentService || new MediaService(breakpoints, matchMedia);\n}\n/**\n *  Provider to return global service for observable service for all MediaQuery activations\n */\nexport const OBSERVABLE_MEDIA_PROVIDER = { // tslint:disable-line:variable-name\n  provide: ObservableMedia,\n  deps: [\n    [ new Optional(), new SkipSelf(), ObservableMedia ],\n    MatchMedia,\n    BreakPointRegistry\n  ],\n  useFactory: OBSERVABLE_MEDIA_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BreakPoint} from '../break-point';\n\n/* tslint:disable */\nconst HANDSET_PORTRAIT  = '(orientations: portrait) and (max-width: 599px)';\nconst HANDSET_LANDSCAPE = '(orientations: landscape) and (max-width: 959px)';\n\nconst TABLET_LANDSCAPE  = '(orientations: landscape) and (min-width: 960px) and (max-width: 1279px)';\nconst TABLET_PORTRAIT   = '(orientations: portrait) and (min-width: 600px) and (max-width: 839px)';\n\nconst WEB_PORTRAIT      = '(orientations: portrait) and (min-width: 840px)';\nconst WEB_LANDSCAPE     = '(orientations: landscape) and (min-width: 1280px)';\n\nexport const ScreenTypes = {\n  'HANDSET'           : `${HANDSET_PORTRAIT}, ${HANDSET_LANDSCAPE}`,\n  'TABLET'            : `${TABLET_PORTRAIT} , ${TABLET_LANDSCAPE}`,\n  'WEB'               : `${WEB_PORTRAIT}, ${WEB_LANDSCAPE} `,\n\n  'HANDSET_PORTRAIT'  : `${HANDSET_PORTRAIT}`,\n  'TABLET_PORTRAIT'   : `${TABLET_PORTRAIT} `,\n  'WEB_PORTRAIT'      : `${WEB_PORTRAIT}`,\n\n  'HANDSET_LANDSCAPE' : `${HANDSET_LANDSCAPE}]`,\n  'TABLET_LANDSCAPE'  : `${TABLET_LANDSCAPE}`,\n  'WEB_LANDSCAPE'     : `${WEB_LANDSCAPE}`\n};\n\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n */\nexport const ORIENTATION_BREAKPOINTS : BreakPoint[] = [\n  {'alias': 'handset',            'mediaQuery': ScreenTypes.HANDSET},\n  {'alias': 'handset.landscape',  'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE},\n  {'alias': 'handset.portrait',   'mediaQuery': ScreenTypes.HANDSET_PORTRAIT},\n\n  {'alias': 'tablet',             'mediaQuery': ScreenTypes.TABLET},\n  {'alias': 'tablet.landscape',   'mediaQuery': ScreenTypes.TABLET},\n  {'alias': 'tablet.portrait',    'mediaQuery': ScreenTypes.TABLET_PORTRAIT},\n\n  {'alias': 'web',                'mediaQuery': ScreenTypes.WEB, overlapping : true },\n  {'alias': 'web.landscape',      'mediaQuery': ScreenTypes.WEB_LANDSCAPE, overlapping : true },\n  {'alias': 'web.portrait',       'mediaQuery': ScreenTypes.WEB_PORTRAIT, overlapping : true }\n];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n import {BreakPoint} from '../media-query/breakpoints/break-point';\nimport {extendObject} from './object-extend';\n\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\nfunction firstUpperCase(part: string) {\n  let first = part.length > 0 ? part.charAt(0) : '';\n  let remainder = (part.length > 1) ? part.slice(1) : '';\n  return first.toUpperCase() + remainder;\n}\n\n/**\n * Converts snake-case to SnakeCase.\n * @param name Text to UpperCamelCase\n */\nfunction camelCase(name: string): string {\n  return name\n      .replace(ALIAS_DELIMITERS, '|')\n      .split('|')\n      .map(firstUpperCase)\n      .join('');\n}\n\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n */\nexport function validateSuffixes(list: BreakPoint[]): BreakPoint[] {\n  list.forEach((bp: BreakPoint) => {\n    if (!bp.suffix || bp.suffix === '') {\n      bp.suffix = camelCase(bp.alias);          // create Suffix value based on alias\n      bp.overlapping = bp.overlapping || false; // ensure default value\n    }\n  });\n  return list;\n}\n\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n */\nexport function mergeByAlias(defaults: BreakPoint[], custom: BreakPoint[] = []): BreakPoint[] {\n  const merged = defaults.map((bp) => extendObject({}, bp));\n  const findByAlias = (alias) => merged.reduce((result, bp) => {\n    return result || (( bp.alias === alias) ? bp : null);\n  }, null);\n\n  // Merge custom breakpoints\n  custom.forEach((bp: BreakPoint) => {\n    let target = findByAlias(bp.alias);\n    if (target) {\n      extendObject(target, bp);\n    } else {\n      merged.push(bp);\n    }\n  });\n\n  return validateSuffixes(merged);\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  ElementRef, OnDestroy, SimpleChanges, OnChanges,\n  SimpleChange, Renderer2\n} from '@angular/core';\nimport {ɵgetDOM as getDom} from '@angular/platform-browser';\n\nimport {applyCssPrefixes} from '../../utils/auto-prefixer';\nimport {buildLayoutCSS} from '../../utils/layout-validator';\n\nimport {ResponsiveActivation, KeyOptions} from '../responsive/responsive-activation';\nimport {MediaMonitor} from '../../media-query/media-monitor';\nimport {MediaQuerySubscriber} from '../../media-query/media-change';\n\n/**\n * Definition of a css style. Either a property name (e.g. \"flex-basis\") or an object\n * map of property name and value (e.g. {display: 'none', flex-order: 5}).\n */\nexport type StyleDefinition = string | { [property: string]: string | number };\n\n/** Abstract base class for the Layout API styling directives. */\nexport abstract class BaseFxDirective implements OnDestroy, OnChanges {\n\n  get hasMediaQueryListener() {\n    return !!this._mqActivation;\n  }\n\n  /**\n   * Imperatively determine the current activated [input] value;\n   * if called before ngOnInit() this will return `undefined`\n   */\n  get activatedValue(): string | number {\n    return this._mqActivation ? this._mqActivation.activatedInput : undefined;\n  }\n\n  /**\n   * Change the currently activated input value and force-update\n   * the injected CSS (by-passing change detection).\n   *\n   * NOTE: Only the currently activated input value will be modified;\n   *       other input values will NOT be affected.\n   */\n  set activatedValue(value: string | number) {\n    let key = 'baseKey', previousVal;\n\n    if (this._mqActivation) {\n      key = this._mqActivation.activatedInputKey;\n      previousVal = this._inputMap[key];\n      this._inputMap[key] = value;\n    }\n    let change = new SimpleChange(previousVal, value, false);\n\n    this.ngOnChanges({[key]: change} as SimpleChanges);\n  }\n\n\n  /**\n   * Constructor\n   */\n  constructor(protected _mediaMonitor: MediaMonitor,\n              protected _elementRef: ElementRef,\n              protected _renderer: Renderer2) {\n    this._display = this._getDisplayStyle();\n  }\n\n  // *********************************************\n  // Accessor Methods\n  // *********************************************\n\n  /**\n   * Access to host element's parent DOM node\n   */\n  protected get parentElement(): any {\n    return this._elementRef.nativeElement.parentNode;\n  }\n\n  /**\n   * Access the current value (if any) of the @Input property.\n   */\n  protected _queryInput(key) {\n    return this._inputMap[key];\n  }\n\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  ngOnChanges(change: SimpleChanges) {\n    throw new Error(`BaseFxDirective::ngOnChanges should be overridden in subclass: ${change}`);\n  }\n\n  ngOnDestroy() {\n    if (this._mqActivation) {\n      this._mqActivation.destroy();\n    }\n    this._mediaMonitor = null;\n  }\n\n  // *********************************************\n  // Protected Methods\n  // *********************************************\n\n  /**\n   * Was the directive's default selector used ?\n   * If not, use the fallback value!\n   */\n  protected _getDefaultVal(key: string, fallbackVal: any): string | boolean {\n    let val = this._queryInput(key);\n    let hasDefaultVal = (val !== undefined && val !== null);\n    return (hasDefaultVal && val !== '') ? val : fallbackVal;\n  }\n\n  /**\n   * Quick accessor to the current HTMLElement's `display` style\n   * Note: this allows use to preserve the original style\n   * and optional restore it when the mediaQueries deactivate\n   */\n  protected _getDisplayStyle(source?: HTMLElement): string {\n    let element: HTMLElement = source || this._elementRef.nativeElement;\n    let value = this._lookupStyle(element, 'display');\n\n    // Note: 'inline' is the default of all elements, unless UA stylesheet overrides\n    return value ? value.trim() : 'inline';\n  }\n\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction).\n   *\n   * Check inline style first then check computed (stylesheet) style.\n   * And optionally add the flow value to element's inline style.\n   */\n  protected _getFlowDirection(target: any, addIfMissing = false): string {\n    let value = 'row';\n\n    if (target) {\n      value = this._lookupStyle(target, 'flex-direction') || 'row';\n\n      let hasInlineValue = getDom().getStyle(target, 'flex-direction');\n      if (!hasInlineValue && addIfMissing) {\n        this._applyStyleToElements(buildLayoutCSS(value), [target]);\n      }\n    }\n\n    return value.trim();\n  }\n\n  /**\n   * Determine the inline or inherited CSS style\n   */\n  protected _lookupStyle(element: HTMLElement, styleName: string): any {\n    let value = '';\n    try {\n      if (element) {\n        let immediateValue = getDom().getStyle(element, styleName);\n        value = immediateValue || getDom().getComputedStyle(element).getPropertyValue(styleName);\n      }\n    } catch (e) {\n      // TODO: platform-server throws an exception for getComputedStyle\n    }\n    return value;\n  }\n\n  /**\n   * Applies the styles to the element. The styles object map may contain an array of values. Each\n   * value will be added as element style.\n   */\n  protected _applyMultiValueStyleToElement(styles: {}, element: any) {\n    Object.keys(styles).forEach(key => {\n      const values = Array.isArray(styles[key]) ? styles[key] : [styles[key]];\n      for (let value of values) {\n        this._renderer.setStyle(element, key, value);\n      }\n    });\n  }\n\n  /**\n   * Applies styles given via string pair or object map to the directive element.\n   */\n  protected _applyStyleToElement(style: StyleDefinition,\n                                 value?: string | number,\n                                 nativeElement?: any) {\n    let styles = {};\n    let element = nativeElement || this._elementRef.nativeElement;\n\n    if (typeof style === 'string') {\n      styles[style] = value;\n      style = styles;\n    }\n\n    styles = applyCssPrefixes(style);\n\n    this._applyMultiValueStyleToElement(styles, element);\n  }\n\n  /**\n   * Applies styles given via string pair or object map to the directive element.\n   */\n  protected _applyStyleToElements(style: StyleDefinition, elements: HTMLElement[ ]) {\n    let styles = applyCssPrefixes(style);\n\n    elements.forEach(el => {\n      this._applyMultiValueStyleToElement(styles, el);\n    });\n  }\n\n  /**\n   *  Save the property value; which may be a complex object.\n   *  Complex objects support property chains\n   */\n  protected _cacheInput(key?: string, source?: any) {\n    if (typeof source === 'object') {\n      for (let prop in source) {\n        this._inputMap[prop] = source[prop];\n      }\n    } else {\n      this._inputMap[key] = source;\n    }\n  }\n\n  /**\n   *  Build a ResponsiveActivation object used to manage subscriptions to mediaChange notifications\n   *  and intelligent lookup of the directive's property value that corresponds to that mediaQuery\n   *  (or closest match).\n   */\n  protected _listenForMediaQueryChanges(key: string,\n                                        defaultValue: any,\n                                        onMediaQueryChange: MediaQuerySubscriber): ResponsiveActivation { // tslint:disable-line:max-line-length\n    if (!this._mqActivation) {\n      let keyOptions = new KeyOptions(key, defaultValue, this._inputMap);\n      this._mqActivation = new ResponsiveActivation(\n          keyOptions,\n          this._mediaMonitor,\n          (change) => onMediaQueryChange(change)\n      );\n    }\n    return this._mqActivation;\n  }\n\n  /**\n   * Special accessor to query for all child 'element' nodes regardless of type, class, etc.\n   */\n  protected get childrenNodes() {\n    const obj = this._elementRef.nativeElement.children;\n    const buffer = [];\n\n    // iterate backwards ensuring that length is an UInt32\n    for (let i = obj.length; i--; ) {\n      buffer[i] = obj[i];\n    }\n    return buffer;\n  }\n\n  /**\n   * Fast validator for presence of attribute on the host element\n   */\n  protected hasKeyValue(key) {\n    return this._mqActivation.hasKeyValue(key);\n  }\n\n  /** Original dom Elements CSS display style */\n  protected _display;\n\n  /**\n   * MediaQuery Activation Tracker\n   */\n  protected _mqActivation: ResponsiveActivation;\n\n  /**\n   *  Dictionary of input keys with associated values\n   */\n  protected _inputMap = {};\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnInit,\n  OnChanges,\n  OnDestroy,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\n\nimport {BaseFxDirective} from './base';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\nimport {buildLayoutCSS} from '../../utils/layout-validator';\n/**\n * 'layout' flexbox styling directive\n * Defines the positioning flow direction for the child elements: row or column\n * Optional values: column or row (default)\n * @see https://css-tricks.com/almanac/properties/f/flex-direction/\n *\n */\n@Directive({selector: `\n  [fxLayout],\n  [fxLayout.xs], [fxLayout.sm], [fxLayout.md], [fxLayout.lg], [fxLayout.xl],\n  [fxLayout.lt-sm], [fxLayout.lt-md], [fxLayout.lt-lg], [fxLayout.lt-xl],\n  [fxLayout.gt-xs], [fxLayout.gt-sm], [fxLayout.gt-md], [fxLayout.gt-lg]\n`})\nexport class LayoutDirective extends BaseFxDirective implements OnInit, OnChanges, OnDestroy {\n\n  /**\n   * Create Observable for nested/child 'flex' directives. This allows\n   * child flex directives to subscribe/listen for flexbox direction changes.\n   */\n  protected _announcer: BehaviorSubject<string>;\n\n  /**\n   * Publish observer to enabled nested, dependent directives to listen\n   * to parent 'layout' direction changes\n   */\n  public layout$: Observable<string>;\n\n  /* tslint:disable */\n  @Input('fxLayout')       set layout(val)     { this._cacheInput('layout', val); };\n  @Input('fxLayout.xs')    set layoutXs(val)   { this._cacheInput('layoutXs', val); };\n  @Input('fxLayout.sm')    set layoutSm(val)   { this._cacheInput('layoutSm', val); };\n  @Input('fxLayout.md')    set layoutMd(val)   { this._cacheInput('layoutMd', val); };\n  @Input('fxLayout.lg')    set layoutLg(val)   { this._cacheInput('layoutLg', val); };\n  @Input('fxLayout.xl')    set layoutXl(val)   { this._cacheInput('layoutXl', val); };\n\n  @Input('fxLayout.gt-xs') set layoutGtXs(val) { this._cacheInput('layoutGtXs', val); };\n  @Input('fxLayout.gt-sm') set layoutGtSm(val) { this._cacheInput('layoutGtSm', val); };\n  @Input('fxLayout.gt-md') set layoutGtMd(val) { this._cacheInput('layoutGtMd', val); };\n  @Input('fxLayout.gt-lg') set layoutGtLg(val) { this._cacheInput('layoutGtLg', val); };\n\n  @Input('fxLayout.lt-sm') set layoutLtSm(val) { this._cacheInput('layoutLtSm', val); };\n  @Input('fxLayout.lt-md') set layoutLtMd(val) { this._cacheInput('layoutLtMd', val); };\n  @Input('fxLayout.lt-lg') set layoutLtLg(val) { this._cacheInput('layoutLtLg', val); };\n  @Input('fxLayout.lt-xl') set layoutLtXl(val) { this._cacheInput('layoutLtXl', val); };\n\n  /* tslint:enable */\n  /**\n   *\n   */\n  constructor(monitor: MediaMonitor, elRef: ElementRef, renderer: Renderer2) {\n    super(monitor, elRef, renderer);\n    this._announcer = new BehaviorSubject<string>('row');\n    this.layout$ = this._announcer.asObservable();\n  }\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  /**\n   * On changes to any @Input properties...\n   * Default to use the non-responsive Input value ('fxLayout')\n   * Then conditionally override with the mq-activated Input's current value\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['layout'] != null || this._mqActivation) {\n      this._updateWithDirection();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    this._listenForMediaQueryChanges('layout', 'row', (changes: MediaChange) => {\n      this._updateWithDirection(changes.value);\n    });\n    this._updateWithDirection();\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  /**\n   * Validate the direction value and then update the host's inline flexbox styles\n   */\n  protected _updateWithDirection(value?: string) {\n    value = value || this._queryInput('layout') || 'row';\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n\n    // Update styles and announce to subscribers the *new* direction\n    let css = buildLayoutCSS(value);\n\n    this._applyStyleToElement(css);\n    this._announcer.next(css['flex-direction']);\n  }\n\n\n\n\n\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  SimpleChanges, Self, Optional,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\n\nimport {BaseFxDirective} from './base';\nimport {LayoutDirective} from './layout';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\nimport {validateWrapValue, LAYOUT_VALUES} from '../../utils/layout-validator';\n/**\n * @deprecated\n * This functionality is now part of the `fxLayout` API\n *\n * 'layout-wrap' flexbox styling directive\n * Defines wrapping of child elements in layout container\n * Optional values: reverse, wrap-reverse, none, nowrap, wrap (default)]\n *\n *\n * @see https://css-tricks.com/almanac/properties/f/flex-wrap/\n */\n@Directive({selector: `\n  [fxLayoutWrap], [fxLayoutWrap.xs], [fxLayoutWrap.sm], [fxLayoutWrap.lg], [fxLayoutWrap.xl],\n  [fxLayoutWrap.gt-xs], [fxLayoutWrap.gt-sm], [fxLayoutWrap.gt-md], [fxLayoutWrap.gt-lg],\n  [fxLayoutWrap.lt-xs], [fxLayoutWrap.lt-sm], [fxLayoutWrap.lt-md], [fxLayoutWrap.lt-lg]\n`})\nexport class LayoutWrapDirective extends BaseFxDirective implements OnInit, OnChanges, OnDestroy {\n  protected _layout = 'row';  // default flex-direction\n  protected _layoutWatcher: Subscription;\n\n  /* tslint:disable */\n  @Input('fxLayoutWrap')       set wrap(val)     { this._cacheInput('wrap', val); }\n  @Input('fxLayoutWrap.xs')    set wrapXs(val)   { this._cacheInput('wrapXs', val); }\n  @Input('fxLayoutWrap.sm')    set wrapSm(val)   { this._cacheInput('wrapSm', val); };\n  @Input('fxLayoutWrap.md')    set wrapMd(val)   { this._cacheInput('wrapMd', val); };\n  @Input('fxLayoutWrap.lg')    set wrapLg(val)   { this._cacheInput('wrapLg', val); };\n  @Input('fxLayoutWrap.xl')    set wrapXl(val)   { this._cacheInput('wrapXl', val); };\n\n  @Input('fxLayoutWrap.gt-xs') set wrapGtXs(val) { this._cacheInput('wrapGtXs', val); };\n  @Input('fxLayoutWrap.gt-sm') set wrapGtSm(val) { this._cacheInput('wrapGtSm', val); };\n  @Input('fxLayoutWrap.gt-md') set wrapGtMd(val) { this._cacheInput('wrapGtMd', val); };\n  @Input('fxLayoutWrap.gt-lg') set wrapGtLg(val) { this._cacheInput('wrapGtLg', val); };\n\n  @Input('fxLayoutWrap.lt-sm') set wrapLtSm(val) { this._cacheInput('wrapLtSm', val); };\n  @Input('fxLayoutWrap.lt-md') set wrapLtMd(val) { this._cacheInput('wrapLtMd', val); };\n  @Input('fxLayoutWrap.lt-lg') set wrapLtLg(val) { this._cacheInput('wrapLtLg', val); };\n  @Input('fxLayoutWrap.lt-xl') set wrapLtXl(val) { this._cacheInput('wrapLtXl', val); };\n\n  /* tslint:enable */\n  constructor(\n    monitor: MediaMonitor,\n    elRef: ElementRef,\n    renderer: Renderer2,\n    @Optional() @Self() container: LayoutDirective) {\n\n    super(monitor, elRef, renderer);\n\n    if (container) {  // Subscribe to layout direction changes\n      this._layoutWatcher = container.layout$.subscribe(this._onLayoutChange.bind(this));\n    }\n  }\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['wrap'] != null || this._mqActivation) {\n      this._updateWithValue();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    this._listenForMediaQueryChanges('wrap', 'wrap', (changes: MediaChange) => {\n      this._updateWithValue(changes.value);\n    });\n    this._updateWithValue();\n  }\n\n  ngOnDestroy() {\n      super.ngOnDestroy();\n    if (this._layoutWatcher) {\n      this._layoutWatcher.unsubscribe();\n    }\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  /**\n   * Cache the parent container 'flex-direction' and update the 'flex' styles\n   */\n  protected _onLayoutChange(direction) {\n    this._layout = (direction || '').toLowerCase().replace('-reverse', '');\n    if (!LAYOUT_VALUES.find(x => x === this._layout)) {\n      this._layout = 'row';\n    }\n\n    this._updateWithValue();\n  }\n\n  protected _updateWithValue(value?: string) {\n    value = value || this._queryInput('wrap');\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n    value = validateWrapValue(value || 'wrap');\n\n    this._applyStyleToElement(this._buildCSS(value));\n  }\n\n  /**\n   * Build the CSS that should be assigned to the element instance\n   */\n  protected _buildCSS(value) {\n    return {\n      'display': 'flex',\n      'flex-wrap': value,\n      'flex-direction': this.flowDirection\n    };\n  }\n\n  protected get flowDirection(): string {\n    let computeFlowDirection = () => this._getFlowDirection(this._elementRef.nativeElement);\n    return this._layoutWatcher ? this._layout : computeFlowDirection();\n  }\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n /**\n * The flex API permits 3 or 1 parts of the value:\n *    - `flex-grow flex-shrink flex-basis`, or\n *    - `flex-basis`\n */\nexport function validateBasis(basis: string, grow = '1', shrink = '1'): string[] {\n  let parts = [grow, shrink, basis];\n\n  let j = basis.indexOf('calc');\n  if (j > 0) {\n    parts[2] = _validateCalcValue(basis.substring(j).trim());\n    let matches = basis.substr(0, j).trim().split(' ');\n    if (matches.length == 2) {\n      parts[0] = matches[0];\n      parts[1] = matches[1];\n    }\n  } else if (j == 0) {\n    parts[2] = _validateCalcValue(basis.trim());\n  } else {\n    let matches = basis.split(' ');\n    parts = (matches.length === 3) ? matches : [\n          grow, shrink, basis\n        ];\n  }\n\n  return parts;\n}\n\n\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n */\nfunction _validateCalcValue(calc: string): string {\n  return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnInit,\n  OnChanges,\n  OnDestroy,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\n\nimport {BaseFxDirective} from './base';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\n\n/**\n * 'flex-align' flexbox styling directive\n * Allows element-specific overrides for cross-axis alignments in a layout container\n * @see https://css-tricks.com/almanac/properties/a/align-self/\n */\n@Directive({\n  selector: `\n  [fxFlexAlign],\n  [fxFlexAlign.xs], [fxFlexAlign.sm], [fxFlexAlign.md], [fxFlexAlign.lg], [fxFlexAlign.xl],\n  [fxFlexAlign.lt-sm], [fxFlexAlign.lt-md], [fxFlexAlign.lt-lg], [fxFlexAlign.lt-xl],\n  [fxFlexAlign.gt-xs], [fxFlexAlign.gt-sm], [fxFlexAlign.gt-md], [fxFlexAlign.gt-lg]\n`\n})\nexport class FlexAlignDirective extends BaseFxDirective implements OnInit, OnChanges, OnDestroy {\n\n  /* tslint:disable */\n  @Input('fxFlexAlign')       set align(val)  { this._cacheInput('align', val);  };\n  @Input('fxFlexAlign.xs')    set alignXs(val)  { this._cacheInput('alignXs', val);  };\n  @Input('fxFlexAlign.sm')    set alignSm(val)  { this._cacheInput('alignSm', val); };\n  @Input('fxFlexAlign.md')    set alignMd(val)  { this._cacheInput('alignMd', val); };\n  @Input('fxFlexAlign.lg')    set alignLg(val)  { this._cacheInput('alignLg', val); };\n  @Input('fxFlexAlign.xl')    set alignXl(val)  { this._cacheInput('alignXl', val); };\n\n  @Input('fxFlexAlign.lt-sm') set alignLtSm(val) { this._cacheInput('alignLtSm', val); };\n  @Input('fxFlexAlign.lt-md') set alignLtMd(val) { this._cacheInput('alignLtMd', val); };\n  @Input('fxFlexAlign.lt-lg') set alignLtLg(val) { this._cacheInput('alignLtLg', val); };\n  @Input('fxFlexAlign.lt-xl') set alignLtXl(val) { this._cacheInput('alignLtXl', val); };\n\n  @Input('fxFlexAlign.gt-xs') set alignGtXs(val)  { this._cacheInput('alignGtXs', val); };\n  @Input('fxFlexAlign.gt-sm') set alignGtSm(val)  { this._cacheInput('alignGtSm', val); };\n  @Input('fxFlexAlign.gt-md') set alignGtMd(val)  { this._cacheInput('alignGtMd', val); };\n  @Input('fxFlexAlign.gt-lg') set alignGtLg(val)  { this._cacheInput('alignGtLg', val); };\n\n  /* tslint:enable */\n  constructor(monitor: MediaMonitor, elRef: ElementRef, renderer: Renderer2) {\n    super(monitor, elRef, renderer);\n  }\n\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  /**\n   * For @Input changes on the current mq activation property, see onMediaQueryChanges()\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['align'] != null || this._mqActivation) {\n      this._updateWithValue();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    this._listenForMediaQueryChanges('align', 'stretch', (changes: MediaChange) => {\n      this._updateWithValue(changes.value);\n    });\n    this._updateWithValue();\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  protected _updateWithValue(value?: string|number) {\n    value = value || this._queryInput('align') || 'stretch';\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n\n    this._applyStyleToElement(this._buildCSS(value));\n  }\n\n  protected _buildCSS(align) {\n    let css = {};\n\n    // Cross-axis\n    switch (align) {\n      case 'start':\n        css['align-self'] = 'flex-start';\n        break;\n      case 'end':\n        css['align-self'] = 'flex-end';\n        break;\n      default:\n        css['align-self'] = align;\n        break;\n    }\n\n    return css;\n  }\n}\n"],"names":["this","_cacheInput","val","configurable","set","Object","defineProperty","ShowHideDirective","prototype","enumerable","negativeOf","_getDisplayStyle","_layout","_super","call","ngOnChanges","changes","_mqActivation","_updateWithValue","ngOnInit","ngOnDestroy","_layoutWatcher","unsubscribe","value","_getDefaultVal","activatedInput","shouldShow","_validateTruthy","_applyStyleToElement","_buildCSS","show","display","_display","FALSY","indexOf","BaseFxDirective","decorators","type","Directive","args","selector","ctorParameters","MediaMonitor","LayoutDirective","Optional","Self","ElementRef","Renderer2","propDecorators","showXs","Input","showMd","showXl","showLtMd","showLtXl","showGtSm","showGtLg","hideXs","hideMd","hideXl","hideLtMd","hideLtLg","hideLtXl","hideGtXs","hideGtSm","hideGtMd","hideGtLg","FlexAlignDirective","monitor","elRef","renderer","tslib_1.__extends","_this","_listenForMediaQueryChanges","_queryInput","align","css","alignXs","alignMd","alignXl","alignLtMd","alignLtXl","alignGtSm","alignGtLg","FLEX_FILL_CSS","width","height","min-width","min-height","FlexFillDirective","FlexOffsetDirective","_container","watchParentFlow","layout$","subscribe","direction","_onLayoutChange","offset","isPercent","String","isNaN","isFlowHorizontal","_getFlowDirection","parentElement","margin-left","margin-top","SkipSelf","offsetXs","offsetSm","offsetMd","offsetXl","offsetLtSm","offsetLtMd","offsetLtLg","offsetLtXl","offsetGtXs","offsetGtSm","offsetGtMd","offsetGtLg","FlexOrderDirective","parseInt","order","orderXs","orderSm","orderMd","orderLg","orderXl","orderGtXs","orderGtSm","orderGtMd","orderGtLg","orderLtSm","orderLtLg","orderLtXl","LayoutAlignDirective","container","bind","map","LAYOUT_VALUES","find","x","_a","split","main_axis","cross_axis","extendObject","flex-direction","box-sizing","_allowStretching","layout","max-width","max-height","alignSm","alignLg","alignGtXs","alignGtMd","alignLtSm","alignLtLg","LayoutGapDirective","_zone","__extends","d","b","__","constructor","extendStatics","create","isBrowser","ɵgetDOM","supportsDOMEvents","getDom","list","mediaQueries","filter","it","ALL_STYLES","length","setAttribute","styleEl_1","cssText","query","createTextNode","appendChild","_document","head","forEach","mq","e","console","error","normalizeQuery","mediaQuery","unique","seen","item","hasOwnProperty","dest","sources","_i","arguments","TypeError","sources_1","source","key","mergeAlias","mqAlias","alias","suffix","OBSERVABLE_MEDIA_PROVIDER_FACTORY","parentService","matchMedia","breakpoints","MediaService","firstUpperCase","part","first","charAt","remainder","slice","toUpperCase","camelCase","name","replace","ALIAS_DELIMITERS","join","validateSuffixes","bp","overlapping","mergeByAlias","defaults","custom","merged","result","target","findByAlias","push","buildMergedBreakPoints","_custom","options","orientation","orientations","ORIENTATION_BREAKPOINTS","concat","DEFAULT_BREAKPOINTS","DEFAULT_BREAKPOINTS_PROVIDER_FACTORY","CUSTOM_BREAKPOINTS_PROVIDER_FACTORY","provide","BREAKPOINTS","useFactory","MEDIA_MONITOR_PROVIDER_FACTORY","parentMonitor","applyCssPrefixes","buildLayoutCSS","validateValue","buildCSS","toLowerCase","wrap","validateWrapValue","flow","flex-wrap","validateBasis","basis","grow","shrink","parts","j","_validateCalcValue","substring","trim","matches","substr","calc","hide","setPrototypeOf","__proto__","Array","p","MediaChange","MatchMedia","_registry","Map","_source","BehaviorSubject","_observable$","asObservable","isActive","has","get","observe","registerQuery","change","prepareQueryCSS","mql","onMQLEvent","run","next","_buildMQL","addListener","media","removeListener","Injectable","NgZone","undefined","Inject","DOCUMENT","BreakPointRegistry","overlaps","nonOverlaps","findByQuery","_breakpoints","_matchMedia","_registerBreakpoints","items","overlappings","reverse","found","hasAlias","media$","queries","sortedItems","ObservableMedia","complete","mediaWatcher","filterOverlaps","_registerBreakPoints","_toMediaQuery","observable$","_buildObservable","self","activationsOnly","addAliasInformation","_findByQuery","excludeOverlaps","_findByAlias","OBSERVABLE_MEDIA_PROVIDER","deps","RESPONSIVE_ALIASES","TABLET_LANDSCAPE","TABLET_PORTRAIT","WEB_PORTRAIT","WEB_LANDSCAPE","ScreenTypes","HANDSET","HANDSET_PORTRAIT","TABLET","WEB","HANDSET_LANDSCAPE","MediaQueriesModule","NgModule","providers","DEFAULT_BREAKPOINTS_PROVIDER","MEDIA_MONITOR_PROVIDER","KeyOptions","baseKey","defaultValue","inputKeys","ResponsiveActivation","_options","_mediaMonitor","_onMediaChanges","_subscribers","_configureChangeObservers","_activatedInputKey","activatedInputKey","hasKeyValue","_lookupKeyValue","destroy","link","subscriptions","_buildRegistryMap","_keyInUse","buildChanges","clone","property","mediaMonitor","_onMonitorEvents","_calculateActivatedValue","current","currentKey","newKey","_validateInputKey","inputKey","activeOverlaps","isMissingKey","some","_elementRef","_renderer","_inputMap","previousVal","SimpleChange","nativeElement","parentNode","Error","fallbackVal","element","_lookupStyle","addIfMissing","getStyle","_applyStyleToElements","styleName","getComputedStyle","getPropertyValue","values","isArray","styles","values_1","style","elements","el","_applyMultiValueStyleToElement","prop","onMediaQueryChange","keyOptions","i","obj","buffer","_announcer","_updateWithDirection","layoutXs","layoutSm","layoutMd","layoutLg","layoutXl","layoutGtXs","layoutGtSm","layoutGtMd","layoutGtLg","layoutLtSm","layoutLtMd","layoutLtLg","layoutLtXl","LayoutWrapDirective","flowDirection","wrapXs","wrapSm","wrapMd","wrapLg","wrapXl","wrapGtXs","wrapGtSm","wrapGtMd","wrapGtLg","wrapLtSm","wrapLtMd","wrapLtLg","wrapLtXl","FlexDirective","_wrap","_updateStyle","flexBasis","_validateValue","apply","clearStyles","flex","hasCalc","isValue","max","min","usingCalc","isPx","isFixed","flexXs","flexSm","flexMd","flexLg","flexXl","flexGtXs","flexGtSm","flexGtMd","flexGtLg","flexLtSm","flexLtMd","flexLtLg","flexLtXl"],"mappings":"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"}