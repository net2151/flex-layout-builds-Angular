{"version":3,"file":"flex-layout.umd.min.js","sources":["../../src/lib/flexbox/api/flex-offset.ts","../../src/lib/flexbox/api/flex-order.ts","../../src/lib/flexbox/api/layout-align.ts","../../src/lib/flexbox/api/layout-gap.ts","../../src/lib/flexbox/api/base-adapter.ts","../../src/lib/flexbox/api/class.ts","../../src/lib/utils/style-transforms.ts","../../src/lib/flexbox/api/style.ts","../../src/lib/module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/media-query/match-media.ts","../../src/lib/utils/add-alias.ts","../../src/lib/media-query/media-monitor.ts","../../src/lib/media-query/breakpoints/data/break-points.ts","../../src/lib/media-query/breakpoints/break-points-provider.ts","../../src/lib/media-query/_module.ts","../../src/lib/media-query/media-monitor-provider.ts","../../src/lib/utils/layout-validator.ts","../../src/lib/utils/auto-prefixer.ts","../../src/lib/utils/style-utils.ts","../../src/lib/flexbox/responsive/responsive-activation.ts","../../src/lib/flexbox/api/flex.ts","../../src/lib/flexbox/api/show-hide.ts","../../src/lib/flexbox/api/flex-fill.ts","../../src/lib/media-query/media-change.ts","../../src/lib/media-query/breakpoints/break-point-registry.ts","../../src/lib/utils/object-extend.ts","../../src/lib/media-query/observable-media.ts","../../src/lib/media-query/observable-media-provider.ts","../../src/lib/media-query/breakpoints/data/orientation-break-points.ts","../../src/lib/utils/breakpoint-tools.ts","../../src/lib/flexbox/api/base.ts","../../src/lib/flexbox/api/layout.ts","../../src/lib/flexbox/api/layout-wrap.ts","../../src/lib/utils/basis-validator.ts","../../src/lib/flexbox/api/flex-align.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnInit,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n  SkipSelf\n} from '@angular/core';\n\nimport {Subscription} from 'rxjs/Subscription';\n\nimport {BaseFxDirective} from './base';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\nimport {LayoutDirective} from './layout';\nimport {isFlowHorizontal} from '../../utils/layout-validator';\n\n/**\n * 'flex-offset' flexbox styling directive\n * Configures the 'margin-left' of the element in a layout container\n */\n@Directive({selector: `\n  [fxFlexOffset],\n  [fxFlexOffset.xs], [fxFlexOffset.sm], [fxFlexOffset.md], [fxFlexOffset.lg], [fxFlexOffset.xl],\n  [fxFlexOffset.lt-sm], [fxFlexOffset.lt-md], [fxFlexOffset.lt-lg], [fxFlexOffset.lt-xl],\n  [fxFlexOffset.gt-xs], [fxFlexOffset.gt-sm], [fxFlexOffset.gt-md], [fxFlexOffset.gt-lg]\n`})\nexport class FlexOffsetDirective extends BaseFxDirective implements OnInit, OnChanges, OnDestroy {\n\n  /* tslint:disable */\n  @Input('fxFlexOffset')       set offset(val)     { this._cacheInput('offset', val); }\n  @Input('fxFlexOffset.xs')    set offsetXs(val)   { this._cacheInput('offsetXs', val); }\n  @Input('fxFlexOffset.sm')    set offsetSm(val)   { this._cacheInput('offsetSm', val); };\n  @Input('fxFlexOffset.md')    set offsetMd(val)   { this._cacheInput('offsetMd', val); };\n  @Input('fxFlexOffset.lg')    set offsetLg(val)   { this._cacheInput('offsetLg', val); };\n  @Input('fxFlexOffset.xl')    set offsetXl(val)   { this._cacheInput('offsetXl', val); };\n\n  @Input('fxFlexOffset.lt-sm') set offsetLtSm(val) { this._cacheInput('offsetLtSm', val); };\n  @Input('fxFlexOffset.lt-md') set offsetLtMd(val) { this._cacheInput('offsetLtMd', val); };\n  @Input('fxFlexOffset.lt-lg') set offsetLtLg(val) { this._cacheInput('offsetLtLg', val); };\n  @Input('fxFlexOffset.lt-xl') set offsetLtXl(val) { this._cacheInput('offsetLtXl', val); };\n\n  @Input('fxFlexOffset.gt-xs') set offsetGtXs(val) { this._cacheInput('offsetGtXs', val); };\n  @Input('fxFlexOffset.gt-sm') set offsetGtSm(val) { this._cacheInput('offsetGtSm', val); };\n  @Input('fxFlexOffset.gt-md') set offsetGtMd(val) { this._cacheInput('offsetGtMd', val); };\n  @Input('fxFlexOffset.gt-lg') set offsetGtLg(val) { this._cacheInput('offsetGtLg', val); };\n\n  /* tslint:enable */\n  constructor(monitor: MediaMonitor,\n              elRef: ElementRef,\n              renderer: Renderer2,\n              @Optional() @SkipSelf() protected _container: LayoutDirective ) {\n    super(monitor, elRef, renderer);\n\n\n    this.watchParentFlow();\n  }\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  /**\n   * For @Input changes on the current mq activation property, see onMediaQueryChanges()\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['offset'] != null || this._mqActivation) {\n      this._updateWithValue();\n    }\n  }\n\n  /**\n   * Cleanup\n   */\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    if (this._layoutWatcher) {\n      this._layoutWatcher.unsubscribe();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    super.ngOnInit();\n\n    this._listenForMediaQueryChanges('offset', 0 , (changes: MediaChange) => {\n      this._updateWithValue(changes.value);\n    });\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  /** The flex-direction of this element's host container. Defaults to 'row'. */\n  protected _layout = 'row';\n\n  /**\n   * Subscription to the parent flex container's layout changes.\n   * Stored so we can unsubscribe when this directive is destroyed.\n   */\n  protected _layoutWatcher: Subscription;\n\n  /**\n   * If parent flow-direction changes, then update the margin property\n   * used to offset\n   */\n  protected watchParentFlow() {\n    if (this._container) {\n      // Subscribe to layout immediate parent direction changes (if any)\n      this._layoutWatcher = this._container.layout$.subscribe((direction) => {\n        // `direction` === null if parent container does not have a `fxLayout`\n        this._onLayoutChange(direction);\n      });\n    }\n  }\n\n  /**\n   * Caches the parent container's 'flex-direction' and updates the element's style.\n   * Used as a handler for layout change events from the parent flex container.\n   */\n  protected _onLayoutChange(direction?: string) {\n    this._layout = direction || this._layout || 'row';\n    this._updateWithValue();\n  }\n\n  /**\n   * Using the current fxFlexOffset value, update the inline CSS\n   * NOTE: this will assign `margin-left` if the parent flex-direction == 'row',\n   *       otherwise `margin-top` is used for the offset.\n   */\n  protected _updateWithValue(value?: string|number) {\n    value = value || this._queryInput('offset') || 0;\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n\n    this._applyStyleToElement(this._buildCSS(value));\n  }\n\n  protected _buildCSS(offset) {\n    let isPercent = String(offset).indexOf('%') > -1;\n    let isPx = String(offset).indexOf('px') > -1;\n    if (!isPx && !isPercent && !isNaN(offset)) {\n      offset = offset + '%';\n    }\n\n    // The flex-direction of this element's flex container. Defaults to 'row'.\n    let layout = this._getFlowDirection(this.parentElement, true);\n    return isFlowHorizontal(layout) ? {'margin-left': `${offset}`} : {'margin-top': `${offset}`};\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnInit,\n  OnChanges,\n  OnDestroy,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\n\nimport {BaseFxDirective} from './base';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\n\n/**\n * 'flex-order' flexbox styling directive\n * Configures the positional ordering of the element in a sorted layout container\n * @see https://css-tricks.com/almanac/properties/o/order/\n */\n@Directive({selector: `\n  [fxFlexOrder],\n  [fxFlexOrder.xs], [fxFlexOrder.sm], [fxFlexOrder.md], [fxFlexOrder.lg], [fxFlexOrder.xl],\n  [fxFlexOrder.lt-sm], [fxFlexOrder.lt-md], [fxFlexOrder.lt-lg], [fxFlexOrder.lt-xl],\n  [fxFlexOrder.gt-xs], [fxFlexOrder.gt-sm], [fxFlexOrder.gt-md], [fxFlexOrder.gt-lg]\n`})\nexport class FlexOrderDirective extends BaseFxDirective implements OnInit, OnChanges, OnDestroy {\n\n  /* tslint:disable */\n  @Input('fxFlexOrder')       set order(val)     { this._cacheInput('order', val); }\n  @Input('fxFlexOrder.xs')    set orderXs(val)   { this._cacheInput('orderXs', val); }\n  @Input('fxFlexOrder.sm')    set orderSm(val)   { this._cacheInput('orderSm', val); };\n  @Input('fxFlexOrder.md')    set orderMd(val)   { this._cacheInput('orderMd', val); };\n  @Input('fxFlexOrder.lg')    set orderLg(val)   { this._cacheInput('orderLg', val); };\n  @Input('fxFlexOrder.xl')    set orderXl(val)   { this._cacheInput('orderXl', val); };\n\n  @Input('fxFlexOrder.gt-xs') set orderGtXs(val) { this._cacheInput('orderGtXs', val); };\n  @Input('fxFlexOrder.gt-sm') set orderGtSm(val) { this._cacheInput('orderGtSm', val); };\n  @Input('fxFlexOrder.gt-md') set orderGtMd(val) { this._cacheInput('orderGtMd', val); };\n  @Input('fxFlexOrder.gt-lg') set orderGtLg(val) { this._cacheInput('orderGtLg', val); };\n\n  @Input('fxFlexOrder.lt-sm') set orderLtSm(val) { this._cacheInput('orderLtSm', val); };\n  @Input('fxFlexOrder.lt-md') set orderLtMd(val) { this._cacheInput('orderLtMd', val); };\n  @Input('fxFlexOrder.lt-lg') set orderLtLg(val) { this._cacheInput('orderLtLg', val); };\n  @Input('fxFlexOrder.lt-xl') set orderLtXl(val) { this._cacheInput('orderLtXl', val); };\n\n  /* tslint:enable */\n  constructor(monitor: MediaMonitor, elRef: ElementRef, renderer: Renderer2) {\n    super(monitor, elRef, renderer);\n  }\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  /**\n   * For @Input changes on the current mq activation property, see onMediaQueryChanges()\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['order'] != null || this._mqActivation) {\n      this._updateWithValue();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    super.ngOnInit();\n\n    this._listenForMediaQueryChanges('order', '0', (changes: MediaChange) => {\n      this._updateWithValue(changes.value);\n    });\n    this._updateWithValue();\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  protected _updateWithValue(value?: string) {\n    value = value || this._queryInput('order') || '0';\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n\n    this._applyStyleToElement(this._buildCSS(value));\n  }\n\n\n  protected _buildCSS(value) {\n    value = parseInt(value, 10);\n    return {order: isNaN(value) ? 0 : value};\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Renderer2,\n  SimpleChanges, Self,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {extendObject} from '../../utils/object-extend';\n\nimport {BaseFxDirective} from './base';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\n\nimport {LayoutDirective} from './layout';\nimport {LAYOUT_VALUES, isFlowHorizontal} from '../../utils/layout-validator';\n\n/**\n * 'layout-align' flexbox styling directive\n *  Defines positioning of child elements along main and cross axis in a layout container\n *  Optional values: {main-axis} values or {main-axis cross-axis} value pairs\n *\n *  @see https://css-tricks.com/almanac/properties/j/justify-content/\n *  @see https://css-tricks.com/almanac/properties/a/align-items/\n *  @see https://css-tricks.com/almanac/properties/a/align-content/\n */\n@Directive({selector: `\n  [fxLayoutAlign],\n  [fxLayoutAlign.xs], [fxLayoutAlign.sm], [fxLayoutAlign.md], [fxLayoutAlign.lg],[fxLayoutAlign.xl],\n  [fxLayoutAlign.lt-sm], [fxLayoutAlign.lt-md], [fxLayoutAlign.lt-lg], [fxLayoutAlign.lt-xl],\n  [fxLayoutAlign.gt-xs], [fxLayoutAlign.gt-sm], [fxLayoutAlign.gt-md], [fxLayoutAlign.gt-lg]\n`})\nexport class LayoutAlignDirective extends BaseFxDirective implements OnInit, OnChanges, OnDestroy {\n\n  protected _layout = 'row';  // default flex-direction\n  protected _layoutWatcher: Subscription;\n\n  /* tslint:disable */\n  @Input('fxLayoutAlign')       set align(val)     { this._cacheInput('align', val); }\n  @Input('fxLayoutAlign.xs')    set alignXs(val)   { this._cacheInput('alignXs', val); }\n  @Input('fxLayoutAlign.sm')    set alignSm(val)   { this._cacheInput('alignSm', val); };\n  @Input('fxLayoutAlign.md')    set alignMd(val)   { this._cacheInput('alignMd', val); };\n  @Input('fxLayoutAlign.lg')    set alignLg(val)   { this._cacheInput('alignLg', val); };\n  @Input('fxLayoutAlign.xl')    set alignXl(val)   { this._cacheInput('alignXl', val); };\n\n  @Input('fxLayoutAlign.gt-xs') set alignGtXs(val) { this._cacheInput('alignGtXs', val); };\n  @Input('fxLayoutAlign.gt-sm') set alignGtSm(val) { this._cacheInput('alignGtSm', val); };\n  @Input('fxLayoutAlign.gt-md') set alignGtMd(val) { this._cacheInput('alignGtMd', val); };\n  @Input('fxLayoutAlign.gt-lg') set alignGtLg(val) { this._cacheInput('alignGtLg', val); };\n\n  @Input('fxLayoutAlign.lt-sm') set alignLtSm(val) { this._cacheInput('alignLtSm', val); };\n  @Input('fxLayoutAlign.lt-md') set alignLtMd(val) { this._cacheInput('alignLtMd', val); };\n  @Input('fxLayoutAlign.lt-lg') set alignLtLg(val) { this._cacheInput('alignLtLg', val); };\n  @Input('fxLayoutAlign.lt-xl') set alignLtXl(val) { this._cacheInput('alignLtXl', val); };\n\n  /* tslint:enable */\n  constructor(\n      monitor: MediaMonitor,\n      elRef: ElementRef, renderer: Renderer2,\n      @Optional() @Self() container: LayoutDirective) {\n    super(monitor, elRef, renderer);\n\n    if (container) {  // Subscribe to layout direction changes\n      this._layoutWatcher = container.layout$.subscribe(this._onLayoutChange.bind(this));\n    }\n  }\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['align'] != null || this._mqActivation) {\n      this._updateWithValue();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    super.ngOnInit();\n\n    this._listenForMediaQueryChanges('align', 'start stretch', (changes: MediaChange) => {\n      this._updateWithValue(changes.value);\n    });\n    this._updateWithValue();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    if ( this._layoutWatcher ) {\n      this._layoutWatcher.unsubscribe();\n    }\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  /**\n   *\n   */\n  protected _updateWithValue(value?: string) {\n    value = value || this._queryInput('align') || 'start stretch';\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n\n    this._applyStyleToElement(this._buildCSS(value));\n    this._allowStretching(value, !this._layout ? 'row' : this._layout);\n  }\n\n  /**\n   * Cache the parent container 'flex-direction' and update the 'flex' styles\n   */\n  protected _onLayoutChange(direction) {\n    this._layout = (direction || '').toLowerCase();\n    if (!LAYOUT_VALUES.find(x => x === this._layout)) {\n      this._layout = 'row';\n    }\n\n    let value = this._queryInput('align') || 'start stretch';\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n    this._allowStretching(value, this._layout || 'row');\n  }\n\n  protected _buildCSS(align) {\n    let css = {}, [main_axis, cross_axis] = align.split(' '); // tslint:disable-line:variable-name\n\n    // Main axis\n    switch (main_axis) {\n      case 'center':\n        css['justify-content'] = 'center';\n        break;\n      case 'space-around':\n        css['justify-content'] = 'space-around';\n        break;\n      case 'space-between':\n        css['justify-content'] = 'space-between';\n        break;\n      case 'end':\n      case 'flex-end':\n        css['justify-content'] = 'flex-end';\n        break;\n      case 'start':\n      case 'flex-start':\n      default :\n        css['justify-content'] = 'flex-start';  // default main axis\n        break;\n    }\n\n    // Cross-axis\n    switch (cross_axis) {\n      case 'start':\n      case 'flex-start':\n        css['align-items'] = css['align-content'] = 'flex-start';\n        break;\n      case 'baseline':\n        css['align-items'] = 'baseline';\n        break;\n      case 'center':\n        css['align-items'] = css['align-content'] = 'center';\n        break;\n      case 'end':\n      case 'flex-end':\n        css['align-items'] = css['align-content'] = 'flex-end';\n        break;\n      case 'stretch':\n      default : // 'stretch'\n        css['align-items'] = css['align-content'] = 'stretch';   // default cross axis\n        break;\n    }\n\n    return extendObject(css, {\n      'display' : 'flex',\n      'flex-direction' : this._layout || 'row',\n      'box-sizing' : 'border-box'\n    });\n  }\n\n\n  /**\n   * Update container element to 'stretch' as needed...\n   * NOTE: this is only done if the crossAxis is explicitly set to 'stretch'\n   */\n  protected _allowStretching(align, layout) {\n    let [, cross_axis] = align.split(' '); // tslint:disable-line:variable-name\n\n    if (cross_axis == 'stretch') {\n      // Use `null` values to remove style\n      this._applyStyleToElement({\n        'box-sizing': 'border-box',\n        'max-width': !isFlowHorizontal(layout) ? '100%' : null,\n        'max-height': isFlowHorizontal(layout) ? '100%' : null\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  Renderer2,\n  SimpleChanges,\n  Self,\n  AfterContentInit,\n  Optional,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\n\nimport {BaseFxDirective} from './base';\nimport {LayoutDirective} from './layout';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\nimport {LAYOUT_VALUES} from '../../utils/layout-validator';\n\n/**\n * 'layout-padding' styling directive\n *  Defines padding of child elements in a layout container\n */\n@Directive({\n  selector: `\n  [fxLayoutGap],\n  [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md], [fxLayoutGap.lg], [fxLayoutGap.xl],\n  [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md], [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl],\n  [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm], [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]\n`\n})\nexport class LayoutGapDirective extends BaseFxDirective implements AfterContentInit, OnChanges,\n    OnDestroy {\n  protected _layout = 'row';  // default flex-direction\n  protected _layoutWatcher: Subscription;\n  protected _observer: MutationObserver;\n\n  /* tslint:disable */\n @Input('fxLayoutGap')       set gap(val) { this._cacheInput('gap', val); }\n @Input('fxLayoutGap.xs')    set gapXs(val) { this._cacheInput('gapXs', val); }\n @Input('fxLayoutGap.sm')    set gapSm(val) { this._cacheInput('gapSm', val); };\n @Input('fxLayoutGap.md')    set gapMd(val) { this._cacheInput('gapMd', val); };\n @Input('fxLayoutGap.lg')    set gapLg(val) { this._cacheInput('gapLg', val); };\n @Input('fxLayoutGap.xl')    set gapXl(val) { this._cacheInput('gapXl', val); };\n\n @Input('fxLayoutGap.gt-xs') set gapGtXs(val) { this._cacheInput('gapGtXs', val); };\n @Input('fxLayoutGap.gt-sm') set gapGtSm(val) { this._cacheInput('gapGtSm', val); };\n @Input('fxLayoutGap.gt-md') set gapGtMd(val) { this._cacheInput('gapGtMd', val); };\n @Input('fxLayoutGap.gt-lg') set gapGtLg(val) { this._cacheInput('gapGtLg', val); };\n\n @Input('fxLayoutGap.lt-sm') set gapLtSm(val) { this._cacheInput('gapLtSm', val); };\n @Input('fxLayoutGap.lt-md') set gapLtMd(val) { this._cacheInput('gapLtMd', val); };\n @Input('fxLayoutGap.lt-lg') set gapLtLg(val) { this._cacheInput('gapLtLg', val); };\n @Input('fxLayoutGap.lt-xl') set gapLtXl(val) { this._cacheInput('gapLtXl', val); };\n\n  /* tslint:enable */\n  constructor(monitor: MediaMonitor,\n              elRef: ElementRef,\n              renderer: Renderer2,\n              @Optional() @Self() container: LayoutDirective,\n              private _zone: NgZone) {\n    super(monitor, elRef, renderer);\n\n    if (container) {  // Subscribe to layout direction changes\n      this._layoutWatcher = container.layout$.subscribe(this._onLayoutChange.bind(this));\n    }\n  }\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['gap'] != null || this._mqActivation) {\n      this._updateWithValue();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngAfterContentInit() {\n    this._watchContentChanges();\n    this._listenForMediaQueryChanges('gap', '0', (changes: MediaChange) => {\n      this._updateWithValue(changes.value);\n    });\n    this._updateWithValue();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    if (this._layoutWatcher) {\n      this._layoutWatcher.unsubscribe();\n    }\n    if (this._observer) {\n      this._observer.disconnect();\n    }\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  /**\n   * Watch for child nodes to be added... and apply the layout gap styles to each.\n   * NOTE: this does NOT! differentiate between viewChildren and contentChildren\n   */\n  protected _watchContentChanges() {\n    this._zone.runOutsideAngular(() => {\n\n      if (typeof MutationObserver !== 'undefined') {\n        this._observer = new MutationObserver((mutations: MutationRecord[]) => {\n          let validatedChanges = (it: MutationRecord): boolean => {\n            return (it.addedNodes && it.addedNodes.length > 0) ||\n                (it.removedNodes && it.removedNodes.length > 0);\n          };\n\n          // update gap styles only for child 'added' or 'removed' events\n          if (mutations.some(validatedChanges)) {\n            this._updateWithValue();\n          }\n        });\n        this._observer.observe(this._elementRef.nativeElement, {childList: true});\n      }\n    });\n  }\n\n  /**\n   * Cache the parent container 'flex-direction' and update the 'margin' styles\n   */\n  protected _onLayoutChange(direction) {\n    this._layout = (direction || '').toLowerCase();\n    if (!LAYOUT_VALUES.find(x => x === this._layout)) {\n      this._layout = 'row';\n    }\n    this._updateWithValue();\n  }\n\n  /**\n   *\n   */\n  protected _updateWithValue(value?: string) {\n    value = value || this._queryInput('gap') || '0';\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n\n    // Gather all non-hidden Element nodes\n    let items = this.childrenNodes\n        .filter(el => el.nodeType === 1 && this._getDisplayStyle(el) != 'none');\n    let numItems = items.length;\n\n    if (numItems > 1) {\n      let lastItem = items[numItems - 1];\n\n      // For each `element` children EXCEPT the last,\n      // set the margin right/bottom styles...\n      items = items.filter((_, j) => j < numItems - 1);\n      this._applyStyleToElements(this._buildCSS(value), items);\n\n      // Clear all gaps for all visible elements\n      this._applyStyleToElements(this._buildCSS(), [lastItem]);\n    }\n  }\n\n  /**\n   * Prepare margin CSS, remove any previous explicitly\n   * assigned margin assignments\n   */\n  private _buildCSS(value: any = null) {\n    let key, margins = {\n      'margin-left': null,\n      'margin-right': null,\n      'margin-top': null,\n      'margin-bottom': null\n    };\n\n    switch (this._layout) {\n      case 'column':\n      case 'column-reverse':\n        key = 'margin-bottom';\n        break;\n      case 'row' :\n      case 'row-reverse':\n      default :\n        key = 'margin-right';\n        break;\n    }\n    margins[key] = value;\n\n    return margins;\n  }\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, Renderer2} from '@angular/core';\n\nimport {BaseFxDirective} from './base';\nimport {ResponsiveActivation} from './../responsive/responsive-activation';\nimport {MediaQuerySubscriber} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\n\n\n/**\n * Adapter to the BaseFxDirective abstract class so it can be used via composition.\n * @see BaseFxDirective\n */\nexport class BaseFxDirectiveAdapter extends BaseFxDirective {\n\n  /**\n   * Accessor to determine which @Input property is \"active\"\n   * e.g. which property value will be used.\n   */\n  get activeKey() {\n    let mqa = this._mqActivation;\n    let key = mqa ? mqa.activatedInputKey : this._baseKey;\n    // Note: ClassDirective::SimpleChanges uses 'klazz' instead of 'class' as a key\n    return (key === 'class') ? 'klazz' : key;\n  }\n\n  /** Hash map of all @Input keys/values defined/used */\n  get inputMap() {\n    return this._inputMap;\n  }\n\n  /**\n   * @see BaseFxDirective._mqActivation\n   */\n  get mqActivation(): ResponsiveActivation {\n    return this._mqActivation;\n  }\n\n  /**\n   * BaseFxDirectiveAdapter constructor\n   */\n  constructor(protected _baseKey: string,   // non-responsive @Input property name\n              protected _mediaMonitor: MediaMonitor,\n              protected _elementRef: ElementRef,\n              protected _renderer: Renderer2) {\n    super(_mediaMonitor, _elementRef, _renderer);\n  }\n\n\n  /**\n   * @see BaseFxDirective._queryInput\n   */\n  queryInput(key) {\n    return key ? this._queryInput(key) : undefined;\n  }\n\n  /**\n   *  Save the property value.\n   */\n  cacheInput(key?: string, source?: any, cacheRaw = false) {\n    if (cacheRaw) {\n      this._cacheInputRaw(key, source);\n    } else if (Array.isArray(source)) {\n      this._cacheInputArray(key, source);\n    } else if (typeof source === 'object') {\n      this._cacheInputObject(key, source);\n    } else if (typeof source === 'string') {\n      this._cacheInputString(key, source);\n    } else {\n      throw new Error('Invalid class value provided. Did you want to cache the raw value?');\n    }\n  }\n\n  /**\n   * @see BaseFxDirective._listenForMediaQueryChanges\n   */\n  listenForMediaQueryChanges(key: string,\n                             defaultValue: any,\n                             onMediaQueryChange: MediaQuerySubscriber): ResponsiveActivation {\n    return this._listenForMediaQueryChanges(key, defaultValue, onMediaQueryChange);\n  }\n\n  // ************************************************************\n  // Protected Methods\n  // ************************************************************\n\n  /**\n   * No implicit transforms of the source.\n   * Required when caching values expected later for KeyValueDiffers\n   */\n  protected _cacheInputRaw(key?: string, source?: any) {\n    this._inputMap[key] = source;\n  }\n\n  /**\n   *  Save the property value for Array values.\n   */\n  protected _cacheInputArray(key = '', source?: boolean[]) {\n    this._inputMap[key] = source.join(' ');\n  }\n\n  /**\n   *  Save the property value for key/value pair values.\n   */\n  protected _cacheInputObject(key = '', source?: { [key: string]: boolean }) {\n    let classes = [];\n    for (let prop in source) {\n      if (!!source[prop]) {\n        classes.push(prop);\n      }\n    }\n    this._inputMap[key] = classes.join(' ');\n  }\n\n  /**\n   *  Save the property value for string values.\n   */\n  protected _cacheInputString(key = '', source?: string) {\n    this._inputMap[key] = source;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  KeyValueDiffers,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer,\n  Renderer2,\n  SimpleChanges,\n  Self\n} from '@angular/core';\nimport {NgClass} from '@angular/common';\n\nimport {BaseFxDirective} from './base';\nimport {BaseFxDirectiveAdapter} from './base-adapter';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\n\n/** NgClass allowed inputs **/\nexport type NgClassType = string | string[] | Set<string> | {[klass: string]: any};\n\n/**\n * Directive to add responsive support for ngClass.\n */\n@Directive({\n  selector: `\n    [class], [class.xs], [class.sm], [class.md], [class.lg], [class.xl],\n    [class.lt-sm], [class.lt-md], [class.lt-lg], [class.lt-xl],\n    [class.gt-xs], [class.gt-sm], [class.gt-md], [class.gt-lg],\n\n    [ngClass], [ngClass.xs], [ngClass.sm], [ngClass.md], [ngClass.lg], [ngClass.xl],\n    [ngClass.lt-sm], [ngClass.lt-md], [ngClass.lt-lg], [ngClass.lt-xl],\n    [ngClass.gt-xs], [ngClass.gt-sm], [ngClass.gt-md], [ngClass.gt-lg]\n  `\n})\nexport class ClassDirective extends BaseFxDirective\n    implements DoCheck, OnChanges, OnDestroy {\n\n  /**\n   * Intercept ngClass assignments so we cache the default classes\n   * which are merged with activated styles or used as fallbacks.\n   * Note: Base ngClass values are applied during ngDoCheck()\n   */\n  @Input('ngClass')\n  set ngClassBase(val: NgClassType) {\n    this._ngClassAdapter.cacheInput('ngClass', val, true);\n    this._ngClassInstance.ngClass = val;\n  }\n\n  /* tslint:disable */\n  @Input('ngClass.xs')    set ngClassXs(val:   NgClassType) { this._ngClassAdapter.cacheInput('ngClassXs',   val, true); }\n  @Input('ngClass.sm')    set ngClassSm(val:   NgClassType) { this._ngClassAdapter.cacheInput('ngClassSm',   val, true); }\n  @Input('ngClass.md')    set ngClassMd(val:   NgClassType) { this._ngClassAdapter.cacheInput('ngClassMd',   val, true); }\n  @Input('ngClass.lg')    set ngClassLg(val:   NgClassType) { this._ngClassAdapter.cacheInput('ngClassLg',   val, true); }\n  @Input('ngClass.xl')    set ngClassXl(val:   NgClassType) { this._ngClassAdapter.cacheInput('ngClassXl',   val, true); }\n\n  @Input('ngClass.lt-sm') set ngClassLtSm(val: NgClassType) { this._ngClassAdapter.cacheInput('ngClassLtSm', val, true); }\n  @Input('ngClass.lt-md') set ngClassLtMd(val: NgClassType) { this._ngClassAdapter.cacheInput('ngClassLtMd', val, true); }\n  @Input('ngClass.lt-lg') set ngClassLtLg(val: NgClassType) { this._ngClassAdapter.cacheInput('ngClassLtLg', val, true); }\n  @Input('ngClass.lt-xl') set ngClassLtXl(val: NgClassType) { this._ngClassAdapter.cacheInput('ngClassLtXl', val, true); }\n\n  @Input('ngClass.gt-xs') set ngClassGtXs(val: NgClassType) { this._ngClassAdapter.cacheInput('ngClassGtXs', val, true); }\n  @Input('ngClass.gt-sm') set ngClassGtSm(val: NgClassType) { this._ngClassAdapter.cacheInput('ngClassGtSm', val, true); }\n  @Input('ngClass.gt-md') set ngClassGtMd(val: NgClassType) { this._ngClassAdapter.cacheInput('ngClassGtMd', val, true); }\n  @Input('ngClass.gt-lg') set ngClassGtLg(val: NgClassType) { this._ngClassAdapter.cacheInput('ngClassGtLg', val, true); }\n\n  /** Deprecated selectors */\n\n  /**\n   * Base class selector values get applied immediately and are considered destructive overwrites to\n   * all previous class assignments\n   *\n   * Delegate to NgClass:klass setter and cache value for base fallback from responsive APIs.\n   */\n  @Input('class')\n  set classBase(val: string) {\n    this._classAdapter.cacheInput('_rawClass', val, true);\n    this._ngClassInstance.klass = val;\n  }\n\n  @Input('class.xs')      set classXs(val:   NgClassType) { this._classAdapter.cacheInput('classXs',   val, true); }\n  @Input('class.sm')      set classSm(val:   NgClassType) { this._classAdapter.cacheInput('classSm',   val, true); }\n  @Input('class.md')      set classMd(val:   NgClassType) { this._classAdapter.cacheInput('classMd',   val, true); }\n  @Input('class.lg')      set classLg(val:   NgClassType) { this._classAdapter.cacheInput('classLg',   val, true); }\n  @Input('class.xl')      set classXl(val:   NgClassType) { this._classAdapter.cacheInput('classXl',   val, true); }\n\n  @Input('class.lt-sm')   set classLtSm(val: NgClassType) { this._classAdapter.cacheInput('classLtSm', val, true); }\n  @Input('class.lt-md')   set classLtMd(val: NgClassType) { this._classAdapter.cacheInput('classLtMd', val, true); }\n  @Input('class.lt-lg')   set classLtLg(val: NgClassType) { this._classAdapter.cacheInput('classLtLg', val, true); }\n  @Input('class.lt-xl')   set classLtXl(val: NgClassType) { this._classAdapter.cacheInput('classLtXl', val, true); }\n\n  @Input('class.gt-xs')   set classGtXs(val: NgClassType) { this._classAdapter.cacheInput('classGtXs', val, true); }\n  @Input('class.gt-sm')   set classGtSm(val: NgClassType) { this._classAdapter.cacheInput('classGtSm', val, true); }\n  @Input('class.gt-md')   set classGtMd(val: NgClassType) { this._classAdapter.cacheInput('classGtMd', val, true); }\n  @Input('class.gt-lg')   set classGtLg(val: NgClassType) { this._classAdapter.cacheInput('classGtLg', val, true); }\n\n  /**\n   * Initial value of the `class` attribute; used as\n   * fallback and will be merged with nay `ngClass` values\n   */\n  get initialClasses() : string {\n    return  this._classAdapter.queryInput('_rawClass') || \"\";\n  }\n\n  /* tslint:enable */\n  constructor(protected monitor: MediaMonitor,\n              _ngEl: ElementRef, _renderer: Renderer2, _oldRenderer: Renderer,\n              _iterableDiffers: IterableDiffers, _keyValueDiffers: KeyValueDiffers,\n              @Optional() @Self() private _ngClassInstance: NgClass) {\n\n    super(monitor, _ngEl, _renderer);\n\n    this._classAdapter = new BaseFxDirectiveAdapter('class', monitor, _ngEl, _renderer);\n    this._ngClassAdapter = new BaseFxDirectiveAdapter('ngClass', monitor, _ngEl, _renderer);\n\n    // Create an instance NgClass Directive instance only if `ngClass=\"\"` has NOT been defined on\n    // the same host element; since the responsive variations may be defined...\n    if ( !this._ngClassInstance ) {\n      this._ngClassInstance = new NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _oldRenderer);\n    }\n  }\n\n  // ******************************************************************\n  // Lifecycle Hooks\n  // ******************************************************************\n\n  /**\n   * For @Input changes on the current mq activation property\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.hasInitialized) {\n      if (this._classAdapter.activeKey in changes) {\n        this._updateKlass();\n      }\n      if (this._ngClassAdapter.activeKey in changes) {\n        this._updateNgClass();\n      }\n    }\n  }\n\n  /**\n   * For ChangeDetectionStrategy.onPush and ngOnChanges() updates\n   */\n  ngDoCheck() {\n    if (!this._classAdapter.hasMediaQueryListener) {\n      this._configureMQListener();\n    }\n    this._ngClassInstance.ngDoCheck();\n  }\n\n  ngOnDestroy() {\n    this._classAdapter.ngOnDestroy();\n    this._ngClassAdapter.ngOnDestroy();\n    this._ngClassInstance = null;\n  }\n\n  // ******************************************************************\n  // Internal Methods\n  // ******************************************************************\n\n  /**\n   * Build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  protected _configureMQListener() {\n    this._classAdapter.listenForMediaQueryChanges('class', '', (changes: MediaChange) => {\n      this._updateKlass(changes.value);\n    });\n\n    this._ngClassAdapter.listenForMediaQueryChanges('ngClass', '', (changes: MediaChange) => {\n      this._updateNgClass(changes.value);\n      this._ngClassInstance.ngDoCheck();    // trigger NgClass::_applyIterableChanges()\n    });\n  }\n\n  /**\n   *  Apply updates directly to the NgClass:klass property\n   *  ::ngDoCheck() is not needed\n   */\n  protected _updateKlass(value?: NgClassType) {\n    let klass = value || this._classAdapter.queryInput('class') || '';\n    if (this._classAdapter.mqActivation) {\n      klass = this._classAdapter.mqActivation.activatedInput;\n    }\n    this._ngClassInstance.klass = klass || this.initialClasses;\n  }\n\n  /**\n   *  Identify the activated input value and update the ngClass iterables...\n   *  needs ngDoCheck() to actually apply the values to the element\n   */\n  protected _updateNgClass(value?: NgClassType) {\n    if (this._ngClassAdapter.mqActivation) {\n      value = this._ngClassAdapter.mqActivation.activatedInput;\n    }\n\n    // Delegate subsequent activity to the NgClass logic\n    this._ngClassInstance.ngClass = value || '';\n  }\n\n  /**\n   * Special adapter to cross-cut responsive behaviors\n   * into the ClassDirective instance\n   */\n  protected _classAdapter: BaseFxDirectiveAdapter;   // used for `class.xxx` selectors\n  protected _ngClassAdapter: BaseFxDirectiveAdapter;   // used for `ngClass.xxx` selectors\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport type NgStyleRawList = string[];\nexport type NgStyleMap = {[klass: string]: string};\n// NgStyle selectors accept NgStyleType values\nexport type NgStyleType = string | Set<string> | NgStyleRawList | NgStyleMap;\n\n/**\n * Callback function for SecurityContext.STYLE sanitization\n */\nexport type NgStyleSanitizer = (val: any) => string;\n\n/**\n * NgStyle allowed inputs\n */\nexport class NgStyleKeyValue {\n  constructor(public key: string, public value: string, noQuotes = true) {\n    this.key = noQuotes ? key.replace(/['\"]/g, '').trim() : key.trim();\n\n    this.value = noQuotes ? value.replace(/['\"]/g, '').trim() : value.trim();\n    this.value = this.value.replace(/;/, '');\n  }\n}\n\n/**\n * Transform Operators for @angular/flex-layout NgStyle Directive\n */\nexport const ngStyleUtils = {\n  getType,\n  buildRawList,\n  buildMapFromList,\n  buildMapFromSet\n};\n\nfunction getType(target: any): string {\n  let what = typeof target;\n  if (what === 'object') {\n    return (target.constructor === Array) ? 'array' :\n        (target.constructor === Set ) ? 'set' : 'object';\n  }\n  return what;\n}\n\n/**\n * Split string of key:value pairs into Array of k-v pairs\n * e.g.  'key:value; key:value; key:value;' -> ['key:value',...]\n */\nfunction buildRawList(source: any, delimiter = ';'): NgStyleRawList {\n  return String(source)\n      .trim()\n      .split(delimiter)\n      .map((val: string) => val.trim())\n      .filter(val => val !== '');\n}\n\n/**\n * Convert array of key:value strings to a iterable map object\n */\nfunction buildMapFromList(styles: NgStyleRawList, sanitize?: NgStyleSanitizer): NgStyleMap {\n  let sanitizeValue = (it: NgStyleKeyValue) => {\n    if (sanitize) {\n      it.value = sanitize(it.value);\n    }\n    return it;\n  };\n\n  return styles\n      .map(stringToKeyValue)\n      .filter(entry => !!entry)\n      .map(sanitizeValue)\n      .reduce(keyValuesToMap, {});\n}\n\n/**\n * Convert Set<string> or raw Object to an iterable NgStyleMap\n */\nfunction buildMapFromSet(source: any, sanitize?: NgStyleSanitizer): NgStyleMap {\n  let list = new Array<string>();\n  if (getType(source) == 'set') {\n    source.forEach(entry => list.push(entry));\n  } else {                                // simple hashmap\n    Object.keys(source).forEach(key => {\n      list.push(`${key}:${source[key]}`);\n    });\n  }\n  return buildMapFromList(list, sanitize);\n}\n\n\n/**\n * Convert 'key:value' -> [key, value]\n */\nfunction stringToKeyValue(it: string): NgStyleKeyValue {\n  let [key, val] = it.split(':');\n  return val ? new NgStyleKeyValue(key, val) : null;\n}\n\n/**\n * Convert [ [key,value] ] -> { key : value }\n */\nfunction keyValuesToMap(map: NgStyleMap, entry: NgStyleKeyValue): NgStyleMap {\n  if (!!entry.key) {\n    map[entry.key] = entry.value;\n  }\n  return map;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Input,\n  KeyValueDiffers,\n  OnDestroy,\n  OnChanges,\n  Optional,\n  Renderer,\n  Renderer2,\n  SecurityContext,\n  Self,\n  SimpleChanges,\n} from '@angular/core';\nimport {NgStyle} from '@angular/common';\n\nimport {BaseFxDirective} from './base';\nimport {BaseFxDirectiveAdapter} from './base-adapter';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\nimport {extendObject} from '../../utils/object-extend';\nimport {DomSanitizer} from '@angular/platform-browser';\n\nimport {\n  NgStyleRawList,\n  NgStyleType,\n  NgStyleSanitizer,\n  ngStyleUtils as _\n} from '../../utils/style-transforms';\n\n/**\n * Directive to add responsive support for ngStyle.\n *\n */\n@Directive({\n  selector: `\n    [style.xs], [style.sm], [style.md], [style.lg], [style.xl],\n    [style.lt-sm], [style.lt-md], [style.lt-lg], [style.lt-xl],\n    [style.gt-xs], [style.gt-sm], [style.gt-md], [style.gt-lg],\n    [ngStyle],\n    [ngStyle.xs], [ngStyle.sm], [ngStyle.lg], [ngStyle.xl],\n    [ngStyle.lt-sm], [ngStyle.lt-md], [ngStyle.lt-lg], [ngStyle.lt-xl],\n    [ngStyle.gt-xs], [ngStyle.gt-sm], [ngStyle.gt-md], [ngStyle.gt-lg]\n  `\n})\nexport class StyleDirective extends BaseFxDirective\n    implements DoCheck, OnChanges, OnDestroy {\n\n  /**\n   * Intercept ngStyle assignments so we cache the default styles\n   * which are merged with activated styles or used as fallbacks.\n   */\n  @Input('ngStyle')\n  set styleBase(val: NgStyleType) {\n    this._base.cacheInput('style', val, true);\n    this._ngStyleInstance.ngStyle = this._base.inputMap['style'];\n  }\n\n  /* tslint:disable */\n  @Input('ngStyle.xs')    set ngStyleXs(val: NgStyleType) { this._base.cacheInput('styleXs', val, true); }\n  @Input('ngStyle.sm')    set ngStyleSm(val: NgStyleType) {  this._base.cacheInput('styleSm', val, true); };\n  @Input('ngStyle.md')    set ngStyleMd(val: NgStyleType) { this._base.cacheInput('styleMd', val, true); };\n  @Input('ngStyle.lg')    set ngStyleLg(val: NgStyleType) { this._base.cacheInput('styleLg', val, true);};\n  @Input('ngStyle.xl')    set ngStyleXl(val: NgStyleType) { this._base.cacheInput('styleXl', val, true); };\n\n  @Input('ngStyle.lt-sm') set ngStyleLtSm(val: NgStyleType) { this._base.cacheInput('styleLtSm', val, true); };\n  @Input('ngStyle.lt-md') set ngStyleLtMd(val: NgStyleType) { this._base.cacheInput('styleLtMd', val, true); };\n  @Input('ngStyle.lt-lg') set ngStyleLtLg(val: NgStyleType) { this._base.cacheInput('styleLtLg', val, true); };\n  @Input('ngStyle.lt-xl') set ngStyleLtXl(val: NgStyleType) { this._base.cacheInput('styleLtXl', val, true); };\n\n  @Input('ngStyle.gt-xs') set ngStyleGtXs(val: NgStyleType) { this._base.cacheInput('styleGtXs', val, true); };\n  @Input('ngStyle.gt-sm') set ngStyleGtSm(val: NgStyleType) { this._base.cacheInput('styleGtSm', val, true);} ;\n  @Input('ngStyle.gt-md') set ngStyleGtMd(val: NgStyleType) { this._base.cacheInput('styleGtMd', val, true);};\n  @Input('ngStyle.gt-lg') set ngStyleGtLg(val: NgStyleType) { this._base.cacheInput('styleGtLg', val, true); };\n\n  /** Deprecated selectors */\n  @Input('style.xs')      set styleXs(val: NgStyleType) { this._base.cacheInput('styleXs', val, true); }\n  @Input('style.sm')      set styleSm(val: NgStyleType) { this._base.cacheInput('styleSm', val, true); };\n  @Input('style.md')      set styleMd(val: NgStyleType) { this._base.cacheInput('styleMd', val, true);};\n  @Input('style.lg')      set styleLg(val: NgStyleType) { this._base.cacheInput('styleLg', val, true); };\n  @Input('style.xl')      set styleXl(val: NgStyleType) { this._base.cacheInput('styleXl', val, true); };\n\n  @Input('style.lt-sm')   set styleLtSm(val: NgStyleType) { this._base.cacheInput('styleLtSm', val, true); };\n  @Input('style.lt-md')   set styleLtMd(val: NgStyleType) { this._base.cacheInput('styleLtMd', val, true); };\n  @Input('style.lt-lg')   set styleLtLg(val: NgStyleType) { this._base.cacheInput('styleLtLg', val, true);};\n  @Input('style.lt-xl')   set styleLtXl(val: NgStyleType) { this._base.cacheInput('styleLtXl', val, true); };\n\n  @Input('style.gt-xs')   set styleGtXs(val: NgStyleType) { this._base.cacheInput('styleGtXs', val, true); };\n  @Input('style.gt-sm')   set styleGtSm(val: NgStyleType) { this._base.cacheInput('styleGtSm', val, true); };\n  @Input('style.gt-md')   set styleGtMd(val: NgStyleType) { this._base.cacheInput('styleGtMd', val, true);};\n  @Input('style.gt-lg')   set styleGtLg(val: NgStyleType) { this._base.cacheInput('styleGtLg', val, true); };\n\n  /* tslint:enable */\n  /**\n   *  Constructor for the ngStyle subclass; which adds selectors and\n   *  a MediaQuery Activation Adapter\n   */\n  constructor(private monitor: MediaMonitor,\n              protected _sanitizer: DomSanitizer,\n              _ngEl: ElementRef, _renderer: Renderer2,\n              _differs: KeyValueDiffers, _oldRenderer: Renderer,\n              @Optional() @Self() private _ngStyleInstance: NgStyle) {\n\n    super(monitor, _ngEl, _renderer);\n\n    // Build adapter, `cacheInput()` interceptor, and get current inline style if any\n    this._buildAdapter(this.monitor, _ngEl, _renderer);\n    this._base.cacheInput('style', _ngEl.nativeElement.getAttribute('style'), true);\n\n    // Create an instance NgStyle Directive instance only if `ngStyle=\"\"` has NOT been defined on\n    // the same host element; since the responsive versions may be defined...\n    if ( !this._ngStyleInstance ) {\n      this._ngStyleInstance = new NgStyle(_differs, _ngEl, _oldRenderer);\n    }\n  }\n\n  // ******************************************************************\n  // Lifecycle Hooks\n  // ******************************************************************\n\n  /**\n   * For @Input changes on the current mq activation property\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._base.activeKey in changes) {\n      this._updateStyle();\n    }\n  }\n\n  /**\n   * For ChangeDetectionStrategy.onPush and ngOnChanges() updates\n   */\n  ngDoCheck() {\n    if (!this._base.hasMediaQueryListener) {\n      this._configureMQListener();\n    }\n    this._ngStyleInstance.ngDoCheck();\n  }\n\n  ngOnDestroy() {\n    this._base.ngOnDestroy();\n    this._ngStyleInstance = null;\n  }\n\n  // ******************************************************************\n  // Internal Methods\n  // ******************************************************************\n\n  /**\n     * Build an mqActivation object that bridges\n     * mql change events to onMediaQueryChange handlers\n     */\n    protected _configureMQListener() {\n      this._base.listenForMediaQueryChanges('style', '', (changes: MediaChange) => {\n        this._updateStyle(changes.value);\n\n        // trigger NgClass::_applyIterableChanges()\n        this._ngStyleInstance.ngDoCheck();\n      });\n    }\n\n  // ************************************************************************\n  // Private Internal Methods\n  // ************************************************************************\n\n  /**\n   * Use the currently activated input property and assign to\n   * `ngStyle` which does the style injections...\n   */\n  protected _updateStyle(value?: NgStyleType) {\n    let style = value || this._base.queryInput('style') || '';\n    if (this._base.mqActivation) {\n      style = this._base.mqActivation.activatedInput;\n    }\n\n    // Delegate subsequent activity to the NgStyle logic\n    this._ngStyleInstance.ngStyle = style;\n  }\n\n\n  /**\n   * Build MediaQuery Activation Adapter\n   * This adapter manages listening to mediaQuery change events and identifying\n   * which property value should be used for the style update\n   */\n  protected _buildAdapter(monitor: MediaMonitor, _ngEl: ElementRef, _renderer: Renderer2) {\n    this._base = new BaseFxDirectiveAdapter('style', monitor, _ngEl, _renderer);\n    this._buildCacheInterceptor();\n  }\n\n  /**\n   * Build intercept to convert raw strings to ngStyleMap\n   */\n  protected _buildCacheInterceptor() {\n    let cacheInput = this._base.cacheInput.bind(this._base);\n    this._base.cacheInput = (key?: string, source?: any, cacheRaw = false, merge = true) => {\n      let styles = this._buildStyleMap(source);\n      if (merge) {\n        styles = extendObject({}, this._base.inputMap['style'], styles);\n      }\n      cacheInput(key, styles, cacheRaw);\n    };\n  }\n  /**\n   * Convert raw strings to ngStyleMap; which is required by ngStyle\n   * NOTE: Raw string key-value pairs MUST be delimited by `;`\n   *       Comma-delimiters are not supported due to complexities of\n   *       possible style values such as `rgba(x,x,x,x)` and others\n   */\n  protected _buildStyleMap(styles: NgStyleType) {\n    let sanitizer: NgStyleSanitizer = (val: any) => {\n      // Always safe-guard (aka sanitize) style property values\n      return this._sanitizer.sanitize(SecurityContext.STYLE, val);\n    };\n    if (styles) {\n      switch ( _.getType(styles) ) {\n        case 'string':  return _.buildMapFromList(_.buildRawList(styles), sanitizer);\n        case 'array' :  return _.buildMapFromList(styles as NgStyleRawList, sanitizer);\n        case 'set'   :  return _.buildMapFromSet(styles, sanitizer);\n        default      :  return _.buildMapFromSet(styles, sanitizer);\n      }\n    }\n    return styles;\n  }\n\n  /**\n   * Special adapter to cross-cut responsive behaviors\n   * into the StyleDirective\n   */\n  protected _base: BaseFxDirectiveAdapter;\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {MediaQueriesModule} from './media-query/_module';\n\nimport {BreakPoint} from './media-query/breakpoints/break-point';\nimport {\n  BreakPointProviderOptions,\n  DEFAULT_BREAKPOINTS_PROVIDER,\n  CUSTOM_BREAKPOINTS_PROVIDER_FACTORY\n} from './media-query/breakpoints/break-points-provider';\nimport {MEDIA_MONITOR_PROVIDER} from './media-query/media-monitor-provider';\nimport {OBSERVABLE_MEDIA_PROVIDER} from './media-query/observable-media-provider';\n\nimport {FlexDirective} from './flexbox/api/flex';\nimport {LayoutDirective} from './flexbox/api/layout';\nimport {ShowHideDirective} from './flexbox/api/show-hide';\nimport {FlexAlignDirective} from './flexbox/api/flex-align';\nimport {FlexFillDirective} from './flexbox/api/flex-fill';\nimport {FlexOffsetDirective} from './flexbox/api/flex-offset';\nimport {FlexOrderDirective} from './flexbox/api/flex-order';\nimport {LayoutAlignDirective} from './flexbox/api/layout-align';\nimport {LayoutWrapDirective} from './flexbox/api/layout-wrap';\nimport {LayoutGapDirective} from './flexbox/api/layout-gap';\nimport {ClassDirective} from './flexbox/api/class';\nimport {StyleDirective} from './flexbox/api/style';\n\n/**\n * Since the equivalent results are easily achieved with a css class attached to each\n * layout child, these have been deprecated and removed from the API.\n *\n *  import {LayoutPaddingDirective} from './flexbox/api/layout-padding';\n *  import {LayoutMarginDirective} from './flexbox/api/layout-margin';\n */\n\nconst ALL_DIRECTIVES = [\n  LayoutDirective,\n  LayoutWrapDirective,\n  LayoutGapDirective,\n  LayoutAlignDirective,\n  FlexDirective,\n  FlexOrderDirective,\n  FlexOffsetDirective,\n  FlexFillDirective,\n  FlexAlignDirective,\n  ShowHideDirective,\n  ClassDirective,\n  StyleDirective\n];\n\n/**\n *\n */\n@NgModule({\n  imports: [MediaQueriesModule],\n  exports: [MediaQueriesModule, ...ALL_DIRECTIVES],\n  declarations: [...ALL_DIRECTIVES],\n  providers: [\n    MEDIA_MONITOR_PROVIDER,\n    DEFAULT_BREAKPOINTS_PROVIDER,   // Extend defaults with internal custom breakpoints\n    OBSERVABLE_MEDIA_PROVIDER\n  ]\n})\nexport class FlexLayoutModule {\n  /**\n   * External uses can easily add custom breakpoints AND include internal orientations\n   * breakpoints; which are not available by default.\n   *\n   * !! Selector aliases are not auto-configured. Developers must subclass\n   * the API directives to support extra selectors for the orientations breakpoints !!\n   */\n  static provideBreakPoints(breakpoints: BreakPoint[],\n                            options ?: BreakPointProviderOptions): ModuleWithProviders {\n    return {\n      ngModule: FlexLayoutModule,\n      providers: [\n        CUSTOM_BREAKPOINTS_PROVIDER_FACTORY(breakpoints, options || {orientations: false})\n      ]\n    };\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {ɵgetDOM as getDom, DOCUMENT} from '@angular/platform-browser';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport {filter} from 'rxjs/operator/filter';\n\nimport {MediaChange} from './media-change';\n\n/**\n * EventHandler callback with the mediaQuery [range] activates or deactivates\n */\nexport interface MediaQueryListListener {\n  // Function with Window's MediaQueryList argument\n  (mql: MediaQueryList): void;\n}\n\n/**\n * EventDispatcher for a specific mediaQuery [range]\n */\nexport interface MediaQueryList {\n  readonly matches: boolean;\n  readonly media: string;\n\n  addListener(listener: MediaQueryListListener): void;\n\n  removeListener(listener: MediaQueryListListener): void;\n}\n\n\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\n@Injectable()\nexport class MatchMedia {\n  protected _registry: Map<string, MediaQueryList>;\n  protected _source: BehaviorSubject<MediaChange>;\n  protected _observable$: Observable<MediaChange>;\n\n  constructor(protected _zone: NgZone, @Inject(DOCUMENT) protected _document: any) {\n    this._registry = new Map<string, MediaQueryList>();\n    this._source = new BehaviorSubject<MediaChange>(new MediaChange(true));\n    this._observable$ = this._source.asObservable();\n  }\n\n  /**\n   * For the specified mediaQuery?\n   */\n  isActive(mediaQuery: string): boolean {\n    if (this._registry.has(mediaQuery)) {\n      let mql = this._registry.get(mediaQuery);\n      return mql.matches;\n    }\n    return false;\n  }\n\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * Typically used by the MediaQueryAdaptor; optionally available to components\n   * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n   *\n   * NOTE: if a mediaQuery is not specified, then ALL mediaQuery activations will\n   *       be announced.\n   */\n  observe(mediaQuery?: string): Observable<MediaChange> {\n    this.registerQuery(mediaQuery);\n\n    return filter.call(this._observable$, (change: MediaChange) => {\n      return mediaQuery ? (change.mediaQuery === mediaQuery) : true;\n    });\n  }\n\n  /**\n   * Based on the BreakPointRegistry provider, register internal listeners for each unique\n   * mediaQuery. Each listener emits specific MediaChange data to observers\n   */\n  registerQuery(mediaQuery: string | string[]) {\n    let list = normalizeQuery(mediaQuery);\n\n    if (list.length > 0) {\n      prepareQueryCSS(list, this._document);\n\n      list.forEach(query => {\n        let mql = this._registry.get(query);\n        let onMQLEvent = (e: MediaQueryList) => {\n          this._zone.run(() => {\n            let change = new MediaChange(e.matches, query);\n            this._source.next(change);\n          });\n        };\n\n        if (!mql) {\n          mql = this._buildMQL(query);\n          mql.addListener(onMQLEvent);\n          this._registry.set(query, mql);\n        }\n\n        if (mql.matches) {\n          onMQLEvent(mql);  // Announce activate range for initial subscribers\n        }\n      });\n    }\n  }\n\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  protected _buildMQL(query: string): MediaQueryList {\n    let canListen = isBrowser() && !!(<any>window).matchMedia('all').addListener;\n\n    return canListen ? (<any>window).matchMedia(query) : <MediaQueryList>{\n      matches: query === 'all' || query === '',\n      media: query,\n      addListener: () => {\n      },\n      removeListener: () => {\n      }\n    };\n  }\n}\n\n/**\n * Determine if SSR or Browser rendering.\n */\nexport function isBrowser() {\n  return getDom().supportsDOMEvents();\n}\n\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n */\nconst ALL_STYLES = {};\n\n/**\n * For Webkit engines that only trigger the MediaQueryList Listener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param query string The mediaQuery used to create a faux CSS selector\n *\n */\nfunction prepareQueryCSS(mediaQueries: string[], _document: any) {\n  let list = mediaQueries.filter(it => !ALL_STYLES[it]);\n  if (list.length > 0) {\n    let query = list.join(', ');\n\n    try {\n      let styleEl = getDom().createElement('style');\n\n      getDom().setAttribute(styleEl, 'type', 'text/css');\n      if (!styleEl['styleSheet']) {\n        let cssText = `/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${query} {.fx-query-test{ }}`;\n        getDom().appendChild(styleEl, getDom().createTextNode(cssText));\n      }\n\n      getDom().appendChild(_document.head, styleEl);\n\n      // Store in private global registry\n      list.forEach(mq => ALL_STYLES[mq] = styleEl);\n\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\n/**\n * Always convert to unique list of queries; for iteration in ::registerQuery()\n */\nfunction normalizeQuery(mediaQuery: string | string[]): string[] {\n  return (typeof mediaQuery === 'undefined') ? [] :\n      (typeof mediaQuery === 'string') ? [mediaQuery] : unique(mediaQuery as string[]);\n}\n\n/**\n * Filter duplicate mediaQueries in the list\n */\nfunction unique(list: string[]): string[] {\n  let seen = {};\n  return list.filter(item => {\n    return seen.hasOwnProperty(item) ? false : (seen[item] = true);\n  });\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {MediaChange} from '../media-query/media-change';\nimport {BreakPoint} from '../media-query/breakpoints/break-point';\nimport {extendObject} from './object-extend';\n\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n */\nexport function mergeAlias(dest: MediaChange, source: BreakPoint) {\n  return extendObject(dest, source ? {\n        mqAlias: source.alias,\n        suffix: source.suffix\n      } : {});\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\n\nimport {BreakPoint} from './breakpoints/break-point';\nimport {BreakPointRegistry} from './breakpoints/break-point-registry';\nimport {MatchMedia} from './match-media';\nimport {MediaChange} from './media-change';\n\nimport {mergeAlias} from '../utils/add-alias';\n\nimport {Observable} from 'rxjs/Observable';\nimport {filter} from 'rxjs/operator/filter';\nimport {map} from 'rxjs/operator/map';\n\n/**\n * MediaMonitor uses the MatchMedia service to observe mediaQuery changes (both activations and\n * deactivations). These changes are are published as MediaChange notifications.\n *\n * Note: all notifications will be performed within the\n * ng Zone to trigger change detections and component updates.\n *\n * It is the MediaMonitor that:\n *  - auto registers all known breakpoints\n *  - injects alias information into each raw MediaChange event\n *  - provides accessor to the currently active BreakPoint\n *  - publish list of overlapping BreakPoint(s); used by ResponsiveActivation\n */\n@Injectable()\nexport class MediaMonitor {\n  constructor(private _breakpoints: BreakPointRegistry, private _matchMedia: MatchMedia) {\n    this._registerBreakpoints();\n  }\n\n  /**\n   * Read-only accessor to the list of breakpoints configured in the BreakPointRegistry provider\n   */\n  get breakpoints(): BreakPoint[] {\n    return [...this._breakpoints.items];\n  }\n\n  get activeOverlaps(): BreakPoint[] {\n    let items: BreakPoint[] = this._breakpoints.overlappings.reverse();\n    return items.filter((bp: BreakPoint) => {\n      return this._matchMedia.isActive(bp.mediaQuery);\n    });\n  }\n\n  get active(): BreakPoint {\n    let found = null, items = this.breakpoints.reverse();\n    items.forEach(bp => {\n      if (bp.alias !== '') {\n        if (!found && this._matchMedia.isActive(bp.mediaQuery)) {\n          found = bp;\n        }\n      }\n    });\n\n    let first = this.breakpoints[0];\n    return found || (this._matchMedia.isActive(first.mediaQuery) ? first : null);\n  }\n\n  /**\n   * For the specified mediaQuery alias, is the mediaQuery range active?\n   */\n  isActive(alias: string): boolean {\n    let bp = this._breakpoints.findByAlias(alias) || this._breakpoints.findByQuery(alias);\n    return this._matchMedia.isActive(bp ? bp.mediaQuery : alias);\n  }\n\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * If specific breakpoint is observed, only return *activated* events\n   * otherwise return all events for BOTH activated + deactivated changes.\n   */\n  observe(alias?: string): Observable<MediaChange> {\n    let bp = this._breakpoints.findByAlias(alias) || this._breakpoints.findByQuery(alias);\n    let hasAlias = (change: MediaChange) => (bp ? change.mqAlias !== '' : true);\n    // Note: the raw MediaChange events [from MatchMedia] do not contain important alias information\n\n    let media$ = this._matchMedia.observe(bp ? bp.mediaQuery : alias);\n    return filter.call(map.call(media$, change => mergeAlias(change, bp)), hasAlias);\n  }\n\n  /**\n   * Immediate calls to matchMedia() to establish listeners\n   * and prepare for immediate subscription notifications\n   */\n  private _registerBreakpoints() {\n    let queries = this._breakpoints.sortedItems.map(bp => bp.mediaQuery);\n    this._matchMedia.registerQuery(queries);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {BreakPoint} from '../break-point';\n\nexport const RESPONSIVE_ALIASES = [\n  'xs', 'gt-xs', 'sm', 'gt-sm', 'md', 'gt-md', 'lg', 'gt-lg', 'xl'\n];\n\nexport const DEFAULT_BREAKPOINTS: BreakPoint[] = [\n  {\n    alias: 'xs',\n    mediaQuery: '(max-width: 599px)'\n  },\n  {\n    alias: 'gt-xs',\n    overlapping: true,\n    mediaQuery: '(min-width: 600px)'\n  },\n  {\n    alias: 'lt-sm',\n    overlapping: true,\n    mediaQuery: '(max-width: 599px)'\n  },\n  {\n    alias: 'sm',\n    mediaQuery: '(min-width: 600px) and (max-width: 959px)'\n  },\n  {\n    alias: 'gt-sm',\n    overlapping: true,\n    mediaQuery: '(min-width: 960px)'\n  },\n  {\n    alias: 'lt-md',\n    overlapping: true,\n    mediaQuery: '(max-width: 959px)'\n  },\n  {\n    alias: 'md',\n    mediaQuery: '(min-width: 960px) and (max-width: 1279px)'\n  },\n  {\n    alias: 'gt-md',\n    overlapping: true,\n    mediaQuery: '(min-width: 1280px)'\n  },\n  {\n    alias: 'lt-lg',\n    overlapping: true,\n    mediaQuery: '(max-width: 1279px)'\n  },\n  {\n    alias: 'lg',\n    mediaQuery: '(min-width: 1280px) and (max-width: 1919px)'\n  },\n  {\n    alias: 'gt-lg',\n    overlapping: true,\n    mediaQuery: '(min-width: 1920px)'\n  },\n  {\n    alias: 'lt-xl',\n    overlapping: true,\n    mediaQuery: '(max-width: 1920px)'\n  },\n  {\n    alias: 'xl',\n    mediaQuery: '(min-width: 1920px) and (max-width: 5000px)'\n  }\n];\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  InjectionToken,    // tslint:disable-line:no-unused-variable\n} from '@angular/core';\n\nimport {BreakPoint} from './break-point';\nimport {BREAKPOINTS} from './break-points-token';\nimport {DEFAULT_BREAKPOINTS} from './data/break-points';\nimport {ORIENTATION_BREAKPOINTS} from './data/orientation-break-points';\n\nimport {extendObject} from '../../utils/object-extend';\nimport {mergeByAlias, validateSuffixes} from '../../utils/breakpoint-tools';\n\n\n/**\n * Options to identify which breakpoint types to include as part of\n * a BreakPoint provider\n */\nexport interface BreakPointProviderOptions {\n  /**\n   * include pre-configured, internal default breakpoints.\n   * @default 'true'\n   */\n  defaults ?: boolean;\n  /**\n   * include pre-configured, internal orientations breakpoints.\n   * @default 'false'\n   */\n  orientations ?: boolean;\n}\n\n/**\n * Add new custom items to the default list or override existing default with custom overrides\n */\nexport function buildMergedBreakPoints(_custom?: BreakPoint[],\n                                       options?: BreakPointProviderOptions) {\n  options = extendObject({ }, {\n        defaults: true,       // exclude pre-configured, internal default breakpoints\n        orientation: false      // exclude pre-configured, internal orientations breakpoints\n  }, options || { });\n\n  return () => {\n    // Order so the defaults are loaded last; so ObservableMedia will report these last!\n    let defaults = options.orientations ? ORIENTATION_BREAKPOINTS.concat(DEFAULT_BREAKPOINTS) :\n        DEFAULT_BREAKPOINTS;\n\n    return options.defaults ? mergeByAlias(defaults, _custom || []) : mergeByAlias(_custom);\n  };\n}\n\n/**\n *  Ensure that only a single global BreakPoint list is instantiated...\n */\nexport function DEFAULT_BREAKPOINTS_PROVIDER_FACTORY() {\n  return validateSuffixes(DEFAULT_BREAKPOINTS);\n}\n/**\n * Default Provider that does not support external customization nor provide\n * the extra extended breakpoints:   \"handset\", \"tablet\", and \"web\"\n *\n *  NOTE: !! breakpoints are considered to have unique 'alias' properties,\n *        custom breakpoints matching existing breakpoints will override the properties\n *        of the existing (and not be added as an extra breakpoint entry).\n *        [xs, gt-xs, sm, gt-sm, md, gt-md, lg, gt-lg, xl]\n */\nexport const DEFAULT_BREAKPOINTS_PROVIDER = { // tslint:disable-line:variable-name\n  provide: BREAKPOINTS,\n  useFactory: DEFAULT_BREAKPOINTS_PROVIDER_FACTORY\n};\n/**\n * Use with FlexLayoutModule.CUSTOM_BREAKPOINTS_PROVIDER_FACTORY!\n */\nexport function CUSTOM_BREAKPOINTS_PROVIDER_FACTORY(_custom?: BreakPoint[],\n                                                    options?: BreakPointProviderOptions) {\n  return {\n    provide: BREAKPOINTS,\n    useFactory: buildMergedBreakPoints(_custom, options)\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\n\nimport {MatchMedia} from './match-media';\nimport {MediaMonitor} from './media-monitor';\nimport {OBSERVABLE_MEDIA_PROVIDER} from './observable-media-provider';\nimport {DEFAULT_BREAKPOINTS_PROVIDER} from './breakpoints/break-points-provider';\nimport {BreakPointRegistry} from './breakpoints/break-point-registry';\n\n/**\n * *****************************************************************\n * Define module for the MediaQuery API\n * *****************************************************************\n */\n\n@NgModule({\n  providers: [\n    DEFAULT_BREAKPOINTS_PROVIDER,  // Supports developer overrides of list of known breakpoints\n    BreakPointRegistry,      // Registry of known/used BreakPoint(s)\n    MatchMedia,              // Low-level service to publish observables w/ window.matchMedia()\n    MediaMonitor,            // MediaQuery monitor service observes all known breakpoints\n    OBSERVABLE_MEDIA_PROVIDER  // easy subscription injectable `media$` matchMedia observable\n  ]\n})\nexport class MediaQueriesModule {\n}\n\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Optional, SkipSelf} from '@angular/core';\n\nimport {MediaMonitor} from './media-monitor';\nimport {MatchMedia} from './match-media';\nimport {BreakPointRegistry} from './breakpoints/break-point-registry';\n\n/**\n * Ensure a single global service provider\n */\nexport function MEDIA_MONITOR_PROVIDER_FACTORY(parentMonitor: MediaMonitor,\n                                               breakpoints: BreakPointRegistry,\n                                               matchMedia: MatchMedia) {\n  return parentMonitor || new MediaMonitor(breakpoints, matchMedia);\n}\n\n\n/**\n * Export provider that uses a global service factory (above)\n */\nexport const MEDIA_MONITOR_PROVIDER = {\n  provide : MediaMonitor,\n  deps : [\n    [ new Optional(), new SkipSelf(), MediaMonitor ],\n    BreakPointRegistry,\n    MatchMedia,\n  ],\n  useFactory : MEDIA_MONITOR_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const LAYOUT_VALUES = ['row', 'column', 'row-reverse', 'column-reverse'];\n\n/**\n * Validate the direction|'direction wrap' value and then update the host's inline flexbox styles\n */\nexport function buildLayoutCSS(value: string) {\n  let [direction, wrap] = validateValue(value);\n  return  buildCSS(direction, wrap);\n }\n\n/**\n  * Validate the value to be one of the acceptable value options\n  * Use default fallback of 'row'\n  */\nexport function validateValue(value: string) {\n  value = value ? value.toLowerCase() : '';\n  let [direction, wrap] = value.split(' ');\n  if (!LAYOUT_VALUES.find(x => x === direction)) {\n    direction = LAYOUT_VALUES[0];\n  }\n  return [direction, validateWrapValue(wrap)];\n}\n\n/**\n * Determine if the validated, flex-direction value specifies\n * a horizontal/row flow.\n */\nexport function isFlowHorizontal(value: string): boolean {\n  let [flow, _] = validateValue(value);\n  return flow.indexOf('row') > -1;\n}\n\n/**\n * Convert layout-wrap='<value>' to expected flex-wrap style\n */\nexport function validateWrapValue(value) {\n  if (!!value) {\n    switch (value.toLowerCase()) {\n      case 'reverse':\n      case 'wrap-reverse':\n      case 'reverse-wrap':\n        value = 'wrap-reverse';\n        break;\n\n      case 'no':\n      case 'none':\n      case 'nowrap':\n        value = 'nowrap';\n        break;\n\n      // All other values fallback to 'wrap'\n      default:\n        value = 'wrap';\n        break;\n    }\n  }\n  return value;\n}\n\n\n\n/**\n * Build the CSS that should be assigned to the element instance\n * BUG:\n *   1) min-height on a column flex container won’t apply to its flex item children in IE 10-11.\n *      Use height instead if possible; height : <xxx>vh;\n *\n *  This way any padding or border specified on the child elements are\n *  laid out and drawn inside that element's specified width and height.\n */\nfunction buildCSS(direction, wrap = null) {\n  return {\n    'display': 'flex',\n    'box-sizing': 'border-box',\n    'flex-direction': direction,\n    'flex-wrap': !!wrap ? wrap : null\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Applies CSS prefixes to appropriate style keys.\n *\n * Note: `-ms-`, `-moz` and `-webkit-box` are no longer supported. e.g.\n *    {\n *      display: -webkit-flex;     NEW - Safari 6.1+. iOS 7.1+, BB10\n *      display: flex;             NEW, Spec - Firefox, Chrome, Opera\n *      // display: -webkit-box;   OLD - iOS 6-, Safari 3.1-6, BB7\n *      // display: -ms-flexbox;   TWEENER - IE 10\n *      // display: -moz-flexbox;  OLD - Firefox\n *    }\n */\nexport function applyCssPrefixes(target) {\n  for (let key in target) {\n    let value = target[key] || '';\n\n    switch (key) {\n      case 'display':\n        if (value === 'flex') {\n          target['display'] = [\n            '-webkit-flex',\n            'flex'\n          ];\n        } else if (value === 'inline-flex') {\n          target['display'] = [\n            '-webkit-inline-flex',\n            'inline-flex'\n          ];\n        } else {\n          target['display'] = value;\n        }\n        break;\n\n      case 'align-items':\n      case 'align-self':\n      case 'align-content':\n      case 'flex':\n      case 'flex-basis':\n      case 'flex-flow':\n      case 'flex-grow':\n      case 'flex-shrink':\n      case 'flex-wrap':\n      case 'justify-content':\n        target['-webkit-' + key] = value;\n        break;\n\n      case 'flex-direction':\n        value = value || 'row';\n        target['-webkit-flex-direction'] = value;\n        target['flex-direction'] = value;\n        break;\n\n      case 'order':\n        target['order'] = target['-webkit-' + key] = isNaN(value) ? '0' : value;\n        break;\n    }\n  }\n  return target;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Renderer2} from '@angular/core';\nimport {ɵgetDOM as getDom} from '@angular/platform-browser';\nimport {applyCssPrefixes} from './auto-prefixer';\n\n/**\n * Definition of a css style. Either a property name (e.g. \"flex-basis\") or an object\n * map of property name and value (e.g. {display: 'none', flex-order: 5}).\n */\nexport type StyleDefinition = string | { [property: string]: string | number };\n\n\n/**\n * Applies styles given via string pair or object map to the directive element.\n */\nexport function applyStyleToElement(renderer: Renderer2,\n                                    element: any,\n                                    style: StyleDefinition,\n                                    value?: string | number) {\n  let styles = {};\n  if (typeof style === 'string') {\n    styles[style] = value;\n    style = styles;\n  }\n\n  styles = applyCssPrefixes(style);\n  applyMultiValueStyleToElement(styles, element, renderer);\n}\n\n\n/**\n * Applies styles given via string pair or object map to the directive's element.\n */\nexport function applyStyleToElements(renderer: Renderer2,\n                              style: StyleDefinition,\n                              elements: HTMLElement[ ]) {\n  let styles = applyCssPrefixes(style);\n\n  elements.forEach(el => {\n    applyMultiValueStyleToElement(styles, el, renderer);\n  });\n}\n\n/**\n * Applies the styles to the element. The styles object map may contain an array of values.\n * Each value will be added as element style.\n */\nexport function applyMultiValueStyleToElement(styles: {}, element: any, renderer: Renderer2) {\n  Object.keys(styles).forEach(key => {\n    const values = Array.isArray(styles[key]) ? styles[key] : [styles[key]];\n    for (let value of values) {\n      renderer.setStyle(element, key, value);\n    }\n  });\n}\n\n/**\n * Find the DOM element's inline style value (if any)\n */\nexport function lookupInlineStyle(element: HTMLElement, styleName: string): string {\n  return getDom().getStyle(element, styleName);\n}\n\n/**\n * Determine the inline or inherited CSS style\n */\nexport function lookupStyle(element: HTMLElement, styleName: string, inlineOnly = false): string {\n  let value = '';\n  if (element) {\n    try {\n      let immediateValue = value = lookupInlineStyle(element, styleName);\n      if ( !inlineOnly ) {\n        value = immediateValue || getDom().getComputedStyle(element).getPropertyValue(styleName);\n      }\n    } catch (e) {\n      // TODO: platform-server throws an exception for getComputedStyle\n    }\n  }\n\n  // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n  //       in which case getComputedStyle() should determine a valid value.\n  return value ? value.trim() : 'block';\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Subscription} from 'rxjs/Subscription';\nimport {map} from 'rxjs/operator/map';\n\nimport {MediaChange, MediaQuerySubscriber} from '../../media-query/media-change';\nimport {BreakPoint} from '../../media-query/breakpoints/break-point';\nimport {MediaMonitor} from '../../media-query/media-monitor';\n\nimport {extendObject} from '../../utils/object-extend';\n\nexport declare type SubscriptionList = Subscription[ ];\n\nexport interface BreakPointX extends BreakPoint {\n  key: string;\n  baseKey: string;\n}\n\nexport class KeyOptions {\n  constructor(public baseKey: string,\n              public defaultValue: string|number|boolean,\n              public inputKeys: { [key: string]: any }) {\n  }\n}\n\n/**\n * ResponsiveActivation acts as a proxy between the MonitorMedia service (which emits mediaQuery\n * changes) and the fx API directives. The MQA proxies mediaQuery change events and notifies the\n * directive via the specified callback.\n *\n * - The MQA also determines which directive property should be used to determine the\n *   current change 'value'... BEFORE the original `onMediaQueryChanges()` method is called.\n * - The `ngOnDestroy()` method is also head-hooked to enable auto-unsubscribe from the\n *   MediaQueryServices.\n *\n * NOTE: these interceptions enables the logic in the fx API directives to remain terse and clean.\n */\nexport class ResponsiveActivation {\n  private _subscribers: SubscriptionList = [];\n  private _activatedInputKey: string;\n\n  /**\n   * Constructor\n   */\n  constructor(private _options: KeyOptions,\n              private _mediaMonitor: MediaMonitor,\n              private _onMediaChanges: MediaQuerySubscriber) {\n    this._subscribers = this._configureChangeObservers();\n  }\n\n  /**\n   * Accessor to the DI'ed directive property\n   * Each directive instance has a reference to the MediaMonitor which is\n   * used HERE to subscribe to mediaQuery change notifications.\n   */\n  get mediaMonitor(): MediaMonitor {\n    return this._mediaMonitor;\n  }\n\n  /**\n   * Determine which directive @Input() property is currently active (for the viewport size):\n   * The key must be defined (in use) or fallback to the 'closest' overlapping property key\n   * that is defined; otherwise the default property key will be used.\n   * e.g.\n   *      if `<div fxHide fxHide.gt-sm=\"false\">` is used but the current activated mediaQuery alias\n   *      key is `.md` then `.gt-sm` should be used instead\n   */\n  get activatedInputKey(): string {\n    return this._activatedInputKey || this._options.baseKey;\n  }\n\n  /**\n   * Get the currently activated @Input value or the fallback default @Input value\n   */\n  get activatedInput(): any {\n    let key = this.activatedInputKey;\n    return this.hasKeyValue(key) ? this._lookupKeyValue(key) : this._options.defaultValue;\n  }\n\n  /**\n   * Fast validator for presence of attribute on the host element\n   */\n  public hasKeyValue(key) {\n    let value = this._options.inputKeys[key];\n    return typeof value !== 'undefined';\n  }\n\n  /**\n   * Remove interceptors, restore original functions, and forward the onDestroy() call\n   */\n  destroy() {\n    this._subscribers.forEach((link: Subscription) => {\n      link.unsubscribe();\n    });\n    this._subscribers = [];\n  }\n\n  /**\n   * For each *defined* API property, register a callback to `_onMonitorEvents( )`\n   * Cache 1..n subscriptions for internal auto-unsubscribes when the the directive destructs\n   */\n  private _configureChangeObservers(): SubscriptionList {\n    let subscriptions = [];\n\n    this._buildRegistryMap().forEach((bp: BreakPointX) => {\n      if (this._keyInUse(bp.key)) {\n        // Inject directive default property key name: to let onMediaChange() calls\n        // know which property is being triggered...\n        let buildChanges = (change: MediaChange) => {\n          change = change.clone();\n          change.property = this._options.baseKey;\n          return change;\n        };\n\n        subscriptions.push(\n            map.call(this.mediaMonitor.observe(bp.alias), buildChanges)\n                .subscribe(change => {\n                  this._onMonitorEvents(change);\n                })\n        );\n      }\n    });\n\n    return subscriptions;\n  }\n\n  /**\n   * Build mediaQuery key-hashmap; only for the directive properties that are actually defined/used\n   * in the HTML markup\n   */\n  private _buildRegistryMap() {\n    return this.mediaMonitor.breakpoints\n        .map(bp => {\n          return <BreakPointX> extendObject({}, bp, {\n            baseKey: this._options.baseKey,             // e.g. layout, hide, self-align, flex-wrap\n            key: this._options.baseKey + bp.suffix  // e.g.  layoutGtSm, layoutMd, layoutGtLg\n          });\n        })\n        .filter(bp => this._keyInUse(bp.key));\n  }\n\n  /**\n   * Synchronizes change notifications with the current mq-activated @Input and calculates the\n   * mq-activated input value or the default value\n   */\n  protected _onMonitorEvents(change: MediaChange) {\n    if (change.property == this._options.baseKey) {\n      change.value = this._calculateActivatedValue(change);\n\n      this._onMediaChanges(change);\n    }\n  }\n\n  /**\n   * Has the key been specified in the HTML markup and thus is intended\n   * to participate in activation processes.\n   */\n  private _keyInUse(key): boolean {\n    return this._lookupKeyValue(key) !== undefined;\n  }\n\n  /**\n   *  Map input key associated with mediaQuery activation to closest defined input key\n   *  then return the values associated with the targeted input property\n   *\n   *  !! change events may arrive out-of-order (activate before deactivate)\n   *     so make sure the deactivate is used ONLY when the keys match\n   *     (since a different activate may be in use)\n   */\n  private _calculateActivatedValue(current: MediaChange): any {\n    const currentKey = this._options.baseKey + current.suffix;  // e.g. suffix == 'GtSm',\n    let newKey = this._activatedInputKey;                     // e.g. newKey == hideGtSm\n\n    newKey = current.matches ? currentKey : ((newKey == currentKey) ? null : newKey);\n\n    this._activatedInputKey = this._validateInputKey(newKey);\n    return this.activatedInput;\n  }\n\n  /**\n   * For the specified input property key, validate it is defined (used in the markup)\n   * If not see if a overlapping mediaQuery-related input key fallback has been defined\n   *\n   * NOTE: scans in the order defined by activeOverLaps (largest viewport ranges -> smallest ranges)\n   */\n  private _validateInputKey(inputKey) {\n    let items: BreakPoint[] = this.mediaMonitor.activeOverlaps;\n    let isMissingKey = (key) => !this._keyInUse(key);\n\n    if (isMissingKey(inputKey)) {\n      items.some(bp => {\n        let key = this._options.baseKey + bp.suffix;\n        if (!isMissingKey(key)) {\n          inputKey = key;\n          return true;  // exit .some()\n        }\n        return false;\n      });\n    }\n    return inputKey;\n  }\n\n  /**\n   * Get the value (if any) for the directive instances @Input property (aka key)\n   */\n  private _lookupKeyValue(key) {\n    return this._options.inputKeys[key];\n  }\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n import {\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n  SkipSelf,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {extendObject} from '../../utils/object-extend';\n\nimport {BaseFxDirective} from './base';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\n\nimport {LayoutDirective} from './layout';\nimport {LayoutWrapDirective} from './layout-wrap';\nimport {validateBasis} from '../../utils/basis-validator';\nimport {isFlowHorizontal} from '../../utils/layout-validator';\n\n\n/** Built-in aliases for different flex-basis values. */\nexport type FlexBasisAlias = 'grow' | 'initial' | 'auto' | 'none' | 'nogrow' | 'noshrink';\n\n\n/**\n * Directive to control the size of a flex item using flex-basis, flex-grow, and flex-shrink.\n * Corresponds to the css `flex` shorthand property.\n *\n * @see https://css-tricks.com/snippets/css/a-guide-to-flexbox/\n */\n@Directive({selector: `\n  [fxFlex],\n  [fxFlex.xs], [fxFlex.sm], [fxFlex.md], [fxFlex.lg], [fxFlex.xl],\n  [fxFlex.lt-sm], [fxFlex.lt-md], [fxFlex.lt-lg], [fxFlex.lt-xl],\n  [fxFlex.gt-xs], [fxFlex.gt-sm], [fxFlex.gt-md], [fxFlex.gt-lg],\n`\n})\nexport class FlexDirective extends BaseFxDirective implements OnInit, OnChanges, OnDestroy {\n\n  /** The flex-direction of this element's flex container. Defaults to 'row'. */\n  protected _layout = 'row';\n\n  /**\n   * Subscription to the parent flex container's layout changes.\n   * Stored so we can unsubscribe when this directive is destroyed.\n   */\n  protected _layoutWatcher: Subscription;\n\n  /* tslint:disable */\n  @Input('fxShrink')     set shrink(val)    { this._cacheInput('shrink', val); };\n  @Input('fxGrow')       set grow(val)      { this._cacheInput('grow', val); };\n\n  @Input('fxFlex')       set flex(val)      { this._cacheInput('flex', val); };\n  @Input('fxFlex.xs')    set flexXs(val)    { this._cacheInput('flexXs', val); };\n  @Input('fxFlex.sm')    set flexSm(val)    { this._cacheInput('flexSm', val); };\n  @Input('fxFlex.md')    set flexMd(val)    { this._cacheInput('flexMd', val); };\n  @Input('fxFlex.lg')    set flexLg(val)    { this._cacheInput('flexLg', val); };\n  @Input('fxFlex.xl')    set flexXl(val)    { this._cacheInput('flexXl', val); };\n\n  @Input('fxFlex.gt-xs') set flexGtXs(val)  { this._cacheInput('flexGtXs', val); };\n  @Input('fxFlex.gt-sm') set flexGtSm(val)  { this._cacheInput('flexGtSm', val); };\n  @Input('fxFlex.gt-md') set flexGtMd(val)  { this._cacheInput('flexGtMd', val); };\n  @Input('fxFlex.gt-lg') set flexGtLg(val)  { this._cacheInput('flexGtLg', val); };\n\n  @Input('fxFlex.lt-sm') set flexLtSm(val) { this._cacheInput('flexLtSm', val); };\n  @Input('fxFlex.lt-md') set flexLtMd(val) { this._cacheInput('flexLtMd', val); };\n  @Input('fxFlex.lt-lg') set flexLtLg(val) { this._cacheInput('flexLtLg', val); };\n  @Input('fxFlex.lt-xl') set flexLtXl(val) { this._cacheInput('flexLtXl', val); };\n  /* tslint:enable */\n\n  // Note: Explicitly @SkipSelf on LayoutDirective and LayoutWrapDirective because we are looking\n  //       for the parent flex container for this flex item.\n  constructor(monitor: MediaMonitor,\n              elRef: ElementRef,\n              renderer: Renderer2,\n              @Optional() @SkipSelf() protected _container: LayoutDirective,\n              @Optional() @SkipSelf() protected _wrap: LayoutWrapDirective) {\n\n    super(monitor, elRef, renderer);\n\n    this._cacheInput('flex', '');\n    this._cacheInput('shrink', 1);\n    this._cacheInput('grow', 1);\n\n    if (_container) {\n      // If this flex item is inside of a flex container marked with\n      // Subscribe to layout immediate parent direction changes\n      this._layoutWatcher = _container.layout$.subscribe((direction) => {\n        // `direction` === null if parent container does not have a `fxLayout`\n        this._onLayoutChange(direction);\n      });\n    }\n  }\n\n  /**\n   * For @Input changes on the current mq activation property, see onMediaQueryChanges()\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['flex'] != null || this._mqActivation) {\n      this._updateStyle();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    super.ngOnInit();\n\n    this._listenForMediaQueryChanges('flex', '', (changes: MediaChange) => {\n      this._updateStyle(changes.value);\n    });\n    this._updateStyle();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    if (this._layoutWatcher) {\n      this._layoutWatcher.unsubscribe();\n    }\n  }\n\n\n  /**\n   * Caches the parent container's 'flex-direction' and updates the element's style.\n   * Used as a handler for layout change events from the parent flex container.\n   */\n  protected _onLayoutChange(direction?: string) {\n    this._layout = direction || this._layout || 'row';\n    this._updateStyle();\n  }\n\n  protected _updateStyle(value?: string|number) {\n    let flexBasis = value || this._queryInput('flex') || '';\n    if (this._mqActivation) {\n      flexBasis = this._mqActivation.activatedInput;\n    }\n\n    let basis = String(flexBasis).replace(';', '');\n    let parts = validateBasis(basis, this._queryInput('grow'), this._queryInput('shrink'));\n    this._applyStyleToElement(this._validateValue.apply(this, parts));\n  }\n\n  /**\n   * Validate the value to be one of the acceptable value options\n   * Use default fallback of 'row'\n   */\n  protected _validateValue(grow: number|string,\n                           shrink: number|string,\n                           basis: string|number|FlexBasisAlias) {\n      // The flex-direction of this element's flex container. Defaults to 'row'.\n      let layout = this._getFlowDirection(this.parentElement, true);\n      let direction = (layout.indexOf('column') > -1) ? 'column' : 'row';\n      let css, isValue;\n\n      grow = (grow == '0') ? 0 : grow;\n      shrink = (shrink == '0') ? 0 : shrink;\n\n      // flex-basis allows you to specify the initial/starting main-axis size of the element,\n      // before anything else is computed. It can either be a percentage or an absolute value.\n      // It is, however, not the breaking point for flex-grow/shrink properties\n      //\n      // flex-grow can be seen as this:\n      //   0: Do not stretch. Either size to element's content width, or obey 'flex-basis'.\n      //   1: (Default value). Stretch; will be the same size to all other flex items on\n      //       the same row since they have a default value of 1.\n      //   ≥2 (integer n): Stretch. Will be n times the size of other elements\n      //      with 'flex-grow: 1' on the same row.\n\n      // Use `null` to clear existing styles.\n      let clearStyles = {\n        'max-width': null,\n        'max-height': null,\n        'min-width': null,\n        'min-height': null\n      };\n      switch (basis || '') {\n        case '':\n          css = extendObject(clearStyles, {'flex': '1 1 0.000000001px'});\n          break;\n        case 'initial':   // default\n        case 'nogrow':\n          grow = 0;\n          css = extendObject(clearStyles, {'flex': '0 1 auto'});\n          break;\n        case 'grow':\n          css = extendObject(clearStyles, {'flex': '1 1 100%'});\n          break;\n        case 'noshrink':\n          shrink = 0;\n          css = extendObject(clearStyles, {'flex': '1 0 auto'});\n          break;\n        case 'auto':\n          css = extendObject(clearStyles, {'flex': `${grow} ${shrink} auto`});\n          break;\n        case 'none':\n          grow = 0;\n          shrink = 0;\n          css = extendObject(clearStyles, {'flex': '0 0 auto'});\n          break;\n        default:\n          let hasCalc = String(basis).indexOf('calc') > -1;\n          let isPercent = String(basis).indexOf('%') > -1 && !hasCalc;\n\n          isValue = hasCalc ||\n              String(basis).indexOf('px') > -1 ||\n              String(basis).indexOf('em') > -1 ||\n              String(basis).indexOf('vw') > -1 ||\n              String(basis).indexOf('vh') > -1;\n\n          // Defaults to percentage sizing unless `px` is explicitly set\n          if (!isValue && !isPercent && !isNaN(basis as any)) {\n            basis = basis + '%';\n          }\n\n          if (basis === '0px') {\n            basis = '0%';\n          }\n\n          // Set max-width = basis if using layout-wrap\n          // tslint:disable-next-line:max-line-length\n          // @see https://github.com/philipwalton/flexbugs#11-min-and-max-size-declarations-are-ignored-when-wrappifl-flex-items\n\n          css = extendObject(clearStyles, { // fix issue #5345\n            'flex': `${grow} ${shrink} ${(isValue || this._wrap) ? basis : '100%'}`,\n          });\n          break;\n      }\n\n      let max = isFlowHorizontal(direction) ? 'max-width' : 'max-height';\n      let min = isFlowHorizontal(direction) ? 'min-width' : 'min-height';\n\n      let usingCalc = (String(basis).indexOf('calc') > -1) || (basis == 'auto');\n      let isPx = String(basis).indexOf('px') > -1 || usingCalc;\n\n\n      // make box inflexible when shrink and grow are both zero\n      // should not set a min when the grow is zero\n      // should not set a max when the shrink is zero\n      let isFixed = !grow && !shrink;\n      css[min] = (basis == '0%') ? 0 : isFixed || (isPx && grow) ? basis : null;\n      css[max] = (basis == '0%') ? 0 : isFixed || (!usingCalc && shrink) ? basis : null;\n\n    return extendObject(css, {'box-sizing': 'border-box'});\n  }\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnInit,\n  OnChanges,\n  OnDestroy,\n  Renderer2,\n  SimpleChanges,\n  Self,\n  Optional\n} from '@angular/core';\n\nimport {Subscription} from 'rxjs/Subscription';\n\nimport {BaseFxDirective} from './base';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\nimport {LayoutDirective} from './layout';\n\nconst FALSY = ['false', false, 0];\n\n/**\n * For fxHide selectors, we invert the 'value'\n * and assign to the equivalent fxShow selector cache\n *  - When 'hide' === '' === true, do NOT show the element\n *  - When 'hide' === false or 0... we WILL show the element\n */\nexport function negativeOf(hide: any) {\n  return (hide === '') ? false :\n         ((hide === 'false') || (hide === 0)) ? true : !hide;\n}\n\n/**\n * 'show' Layout API directive\n *\n */\n@Directive({\n  selector: `\n  [fxShow],\n  [fxShow.xs], [fxShow.sm], [fxShow.md], [fxShow.lg], [fxShow.xl],\n  [fxShow.lt-sm], [fxShow.lt-md], [fxShow.lt-lg], [fxShow.lt-xl],\n  [fxShow.gt-xs], [fxShow.gt-sm], [fxShow.gt-md], [fxShow.gt-lg],\n  [fxHide],\n  [fxHide.xs], [fxHide.sm], [fxHide.md], [fxHide.lg], [fxHide.xl],\n  [fxHide.lt-sm], [fxHide.lt-md], [fxHide.lt-lg], [fxHide.lt-xl],\n  [fxHide.gt-xs], [fxHide.gt-sm], [fxHide.gt-md], [fxHide.gt-lg]\n`\n})\nexport class ShowHideDirective extends BaseFxDirective implements OnInit, OnChanges, OnDestroy {\n\n  /**\n   * Subscription to the parent flex container's layout changes.\n   * Stored so we can unsubscribe when this directive is destroyed.\n   */\n  protected _layoutWatcher: Subscription;\n\n  /* tslint:disable */\n  @Input('fxShow')       set show(val) {  this._cacheInput('show', val);  }\n  @Input('fxShow.xs')    set showXs(val) {this._cacheInput('showXs', val);}\n  @Input('fxShow.sm')    set showSm(val) {this._cacheInput('showSm', val); };\n  @Input('fxShow.md')    set showMd(val) {this._cacheInput('showMd', val); };\n  @Input('fxShow.lg')    set showLg(val) {this._cacheInput('showLg', val); };\n  @Input('fxShow.xl')    set showXl(val) {this._cacheInput('showXl', val); };\n\n  @Input('fxShow.lt-sm') set showLtSm(val) { this._cacheInput('showLtSm', val); };\n  @Input('fxShow.lt-md') set showLtMd(val) { this._cacheInput('showLtMd', val); };\n  @Input('fxShow.lt-lg') set showLtLg(val) { this._cacheInput('showLtLg', val); };\n  @Input('fxShow.lt-xl') set showLtXl(val) { this._cacheInput('showLtXl', val); };\n\n  @Input('fxShow.gt-xs') set showGtXs(val) {this._cacheInput('showGtXs', val); };\n  @Input('fxShow.gt-sm') set showGtSm(val) {this._cacheInput('showGtSm', val); };\n  @Input('fxShow.gt-md') set showGtMd(val) {this._cacheInput('showGtMd', val); };\n  @Input('fxShow.gt-lg') set showGtLg(val) {this._cacheInput('showGtLg', val); };\n\n  @Input('fxHide')       set hide(val) {this._cacheInput('show', negativeOf(val));}\n  @Input('fxHide.xs')    set hideXs(val) {this._cacheInput('showXs', negativeOf(val));}\n  @Input('fxHide.sm')    set hideSm(val) {this._cacheInput('showSm', negativeOf(val)); };\n  @Input('fxHide.md')    set hideMd(val) {this._cacheInput('showMd', negativeOf(val)); };\n  @Input('fxHide.lg')    set hideLg(val) {this._cacheInput('showLg', negativeOf(val)); };\n  @Input('fxHide.xl')    set hideXl(val) {this._cacheInput('showXl', negativeOf(val)); };\n\n  @Input('fxHide.lt-sm') set hideLtSm(val) { this._cacheInput('showLtSm', negativeOf(val)); };\n  @Input('fxHide.lt-md') set hideLtMd(val) { this._cacheInput('showLtMd', negativeOf(val)); };\n  @Input('fxHide.lt-lg') set hideLtLg(val) { this._cacheInput('showLtLg', negativeOf(val)); };\n  @Input('fxHide.lt-xl') set hideLtXl(val) { this._cacheInput('showLtXl', negativeOf(val)); };\n\n  @Input('fxHide.gt-xs') set hideGtXs(val) {this._cacheInput('showGtXs', negativeOf(val)); };\n  @Input('fxHide.gt-sm') set hideGtSm(val) {this._cacheInput('showGtSm', negativeOf(val)); };\n  @Input('fxHide.gt-md') set hideGtMd(val) {this._cacheInput('showGtMd', negativeOf(val)); };\n  @Input('fxHide.gt-lg') set hideGtLg(val) {this._cacheInput('showGtLg', negativeOf(val)); };\n\n  /* tslint:enable */\n  /**\n   *\n   */\n  constructor(monitor: MediaMonitor,\n              @Optional() @Self() protected _layout: LayoutDirective,\n              protected elRef: ElementRef,\n              protected renderer: Renderer2) {\n\n    super(monitor, elRef, renderer);\n\n    if (_layout) {\n      /**\n       * The Layout can set the display:flex (and incorrectly affect the Hide/Show directives.\n       * Whenever Layout [on the same element] resets its CSS, then update the Hide/Show CSS\n       */\n      this._layoutWatcher = _layout.layout$.subscribe(() => this._updateWithValue());\n    }\n  }\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  /**\n   * Override accessor to the current HTMLElement's `display` style\n   * Note: Show/Hide will not change the display to 'flex' but will set it to 'block'\n   * unless it was already explicitly specified inline or in a CSS stylesheet.\n   */\n  protected _getDisplayStyle(): string {\n    return this._layout ? 'flex' : super._getDisplayStyle();\n  }\n\n\n  /**\n   * On changes to any @Input properties...\n   * Default to use the non-responsive Input value ('fxShow')\n   * Then conditionally override with the mq-activated Input's current value\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.hasInitialized && (changes['show'] != null || this._mqActivation)) {\n      this._updateWithValue();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    super.ngOnInit();\n\n    let value = this._getDefaultVal('show', true);\n    // Build _mqActivation controller\n    this._listenForMediaQueryChanges('show', value, (changes: MediaChange) => {\n      this._updateWithValue(changes.value);\n    });\n\n    this._updateWithValue();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    if (this._layoutWatcher) {\n      this._layoutWatcher.unsubscribe();\n    }\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  /** Validate the visibility value and then update the host's inline display style */\n  protected _updateWithValue(value?: string|number|boolean) {\n    value = value || this._getDefaultVal('show', true);\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n\n    let shouldShow = this._validateTruthy(value);\n    this._applyStyleToElement(this._buildCSS(shouldShow));\n  }\n\n\n  /** Build the CSS that should be assigned to the element instance */\n  protected _buildCSS(show) {\n    return {'display': show ? this._display : 'none'};\n  }\n\n  /**  Validate the to be not FALSY */\n  _validateTruthy(show) {\n    return (FALSY.indexOf(show) == -1);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Renderer2} from '@angular/core';\n\nimport {MediaMonitor} from '../../media-query/media-monitor';\nimport {BaseFxDirective} from './base';\n\nconst FLEX_FILL_CSS = {\n  'margin': 0,\n  'width': '100%',\n  'height': '100%',\n  'min-width': '100%',\n  'min-height': '100%'\n};\n\n/**\n * 'fxFill' flexbox styling directive\n *  Maximizes width and height of element in a layout container\n *\n *  NOTE: fxFill is NOT responsive API!!\n */\n@Directive({selector: `\n  [fxFill],\n  [fxFlexFill]\n`})\nexport class FlexFillDirective extends BaseFxDirective {\n  constructor(monitor: MediaMonitor, public elRef: ElementRef, public renderer: Renderer2) {\n    super(monitor, elRef, renderer);\n    this._applyStyleToElement(FLEX_FILL_CSS);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport type MediaQuerySubscriber = (changes: MediaChange) => void;\n\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nexport class MediaChange {\n  property: string;\n  value: any;\n\n  constructor(public matches = false,       // Is the mq currently activated\n              public mediaQuery = 'all',    // e.g.   (min-width: 600px) and (max-width: 959px)\n              public mqAlias = '',          // e.g.   gt-sm, md, gt-lg\n              public suffix = ''            // e.g.   GtSM, Md, GtLg\n  ) { }\n\n  clone() {\n    return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n  }\n}\n\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable, Inject} from '@angular/core';\n\nimport {BreakPoint} from './break-point';\nimport {BREAKPOINTS} from './break-points-token';\n\n\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overriden from custom, application-specific ranges\n *\n */\n@Injectable()\nexport class BreakPointRegistry {\n\n  constructor(@Inject(BREAKPOINTS) private _registry: BreakPoint[ ]) {\n  }\n\n  /**\n   * Accessor to raw list\n   */\n  get items(): BreakPoint[ ] {\n    return [...this._registry];\n  }\n\n  /**\n   * Accessor to sorted list used for registration with matchMedia API\n   *\n   * NOTE: During breakpoint registration, we want to register the overlaps FIRST\n   *       so the non-overlaps will trigger the MatchMedia:BehaviorSubject last!\n   *       And the largest, non-overlap, matching breakpoint should be the lastReplay value\n   */\n  get sortedItems(): BreakPoint[] {\n    let overlaps = this._registry.filter(it => it.overlapping === true);\n    let nonOverlaps = this._registry.filter(it => it.overlapping !== true);\n\n    return [...overlaps, ...nonOverlaps];\n  }\n\n  /**\n   * Search breakpoints by alias (e.g. gt-xs)\n   */\n  findByAlias(alias: string): BreakPoint {\n    return this._registry.find(bp => bp.alias == alias);\n  }\n\n  findByQuery(query: string): BreakPoint {\n    return this._registry.find(bp => bp.mediaQuery == query);\n  }\n\n  /**\n   * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n   * e.g. gt-sm overlaps md, lg, and xl\n   */\n  get overlappings(): BreakPoint[] {\n    return this._registry.filter(it => it.overlapping == true);\n  }\n\n  /**\n   * Get list of all registered (non-empty) breakpoint aliases\n   */\n  get aliases(): string[] {\n    return this._registry.map(it => it.alias);\n  }\n\n  /**\n   * Aliases are mapped to properties using suffixes\n   * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n   * for property layoutGtSM.\n   */\n  get suffixes(): string[] {\n    return this._registry.map(it => it.suffix);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n *\n * @param dest The object which will have properties copied to it.\n * @param sources The source objects from which properties will be copied.\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let source of sources) {\n    if (source != null) {\n      for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\n\nimport {Subscription} from 'rxjs/Subscription';\nimport {Observable, Subscribable} from 'rxjs/Observable';\n\nimport {map} from 'rxjs/operator/map';\nimport {filter} from 'rxjs/operator/filter';\n\nimport {BreakPointRegistry} from './breakpoints/break-point-registry';\n\nimport {MediaChange} from './media-change';\nimport {MatchMedia} from './match-media';\nimport {mergeAlias} from './../utils/add-alias';\nimport {BreakPoint} from './breakpoints/break-point';\n\n/**\n * Base class for MediaService and pseudo-token for\n */\nexport abstract class ObservableMedia implements Subscribable<MediaChange> {\n  abstract isActive(query: string): boolean;\n\n  abstract asObservable(): Observable<MediaChange>;\n\n  abstract subscribe(next?: (value: MediaChange) => void,\n                     error?: (error: any) => void,\n                     complete?: () => void): Subscription;\n}\n\n/**\n * Class internalizes a MatchMedia service and exposes an Subscribable and Observable interface.\n\n * This an Observable with that exposes a feature to subscribe to mediaQuery\n * changes and a validator method (`isActive(<alias>)`) to test if a mediaQuery (or alias) is\n * currently active.\n *\n * !! Only mediaChange activations (not de-activations) are announced by the ObservableMedia\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * !! This is not an actual Observable. It is a wrapper of an Observable used to publish additional\n * methods like `isActive(<alias>). To access the Observable and use RxJS operators, use\n * `.asObservable()` with syntax like media.asObservable().map(....).\n *\n *  @usage\n *\n *  // RxJS\n *  import 'rxjs/add/operator/filter';\n *  import { ObservableMedia } from '@angular/flex-layout';\n *\n *  @Component({ ... })\n *  export class AppComponent {\n *    status : string = '';\n *\n *    constructor(  media:ObservableMedia ) {\n *      let onChange = (change:MediaChange) => {\n *        this.status = change ? `'${change.mqAlias}' = (${change.mediaQuery})` : '';\n *      };\n *\n *      // Subscribe directly or access observable to use filter/map operators\n *      // e.g.\n *      //      media.subscribe(onChange);\n *\n *      media.asObservable()\n *        .filter((change:MediaChange) => true)   // silly noop filter\n *        .subscribe(onChange);\n *    }\n *  }\n */\n@Injectable()\nexport class MediaService implements ObservableMedia {\n  /**\n   * Should we announce gt-<xxx> breakpoint activations ?\n   */\n  public filterOverlaps = true;\n\n  constructor(private breakpoints: BreakPointRegistry,\n              private mediaWatcher: MatchMedia) {\n    this._registerBreakPoints();\n    this.observable$ = this._buildObservable();\n  }\n\n  /**\n   * Test if specified query/alias is active.\n   */\n  isActive(alias): boolean {\n    let query = this._toMediaQuery(alias);\n    return this.mediaWatcher.isActive(query);\n  }\n\n  /**\n   * Proxy to the Observable subscribe method\n   */\n  subscribe(next?: (value: MediaChange) => void,\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n    return this.observable$.subscribe(next, error, complete);\n  }\n\n  /**\n   * Access to observable for use with operators like\n   * .filter(), .map(), etc.\n   */\n  asObservable(): Observable<MediaChange> {\n    return this.observable$;\n  }\n\n  // ************************************************\n  // Internal Methods\n  // ************************************************\n\n  /**\n   * Register all the mediaQueries registered in the BreakPointRegistry\n   * This is needed so subscribers can be auto-notified of all standard, registered\n   * mediaQuery activations\n   */\n  private _registerBreakPoints() {\n    let queries = this.breakpoints.sortedItems.map(bp => bp.mediaQuery);\n    this.mediaWatcher.registerQuery(queries);\n  }\n\n  /**\n   * Prepare internal observable\n   *\n   * NOTE: the raw MediaChange events [from MatchMedia] do not\n   *       contain important alias information; as such this info\n   *       must be injected into the MediaChange\n   */\n  private _buildObservable() {\n    const self = this;\n    const activationsOnly = (change: MediaChange) => {\n      return change.matches === true;\n    };\n    const addAliasInformation = (change: MediaChange) => {\n      return mergeAlias(change, this._findByQuery(change.mediaQuery));\n    };\n    const excludeOverlaps = (change: MediaChange) => {\n      let bp = this.breakpoints.findByQuery(change.mediaQuery);\n      return !bp ? true : !(self.filterOverlaps && bp.overlapping);\n    };\n\n    /**\n     * Only pass/announce activations (not de-activations)\n     * Inject associated (if any) alias information into the MediaChange event\n     * Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n     */\n    return filter.call(\n        map.call(\n            filter.call(\n                this.mediaWatcher.observe(),\n                activationsOnly\n            ),\n            addAliasInformation),\n        excludeOverlaps);\n  }\n\n  /**\n   * Breakpoint locator by alias\n   */\n  private _findByAlias(alias) {\n    return this.breakpoints.findByAlias(alias);\n  }\n\n  /**\n   * Breakpoint locator by mediaQuery\n   */\n  private _findByQuery(query) {\n    return this.breakpoints.findByQuery(query);\n  }\n\n  /**\n   * Find associated breakpoint (if any)\n   */\n  private _toMediaQuery(query) {\n    let bp: BreakPoint = this._findByAlias(query) || this._findByQuery(query);\n    return bp ? bp.mediaQuery : query;\n  }\n\n  private observable$: Observable<MediaChange>;\n}\n\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Optional,\n  SkipSelf\n} from '@angular/core';\n\nimport {BreakPointRegistry} from './breakpoints/break-point-registry';\n\nimport {MatchMedia} from './match-media';\nimport {ObservableMedia, MediaService} from './observable-media';\n\n/**\n * Ensure a single global ObservableMedia service provider\n */\nexport function OBSERVABLE_MEDIA_PROVIDER_FACTORY(parentService: ObservableMedia,\n                                                  matchMedia: MatchMedia,\n                                                  breakpoints: BreakPointRegistry) {\n  return parentService || new MediaService(breakpoints, matchMedia);\n}\n/**\n *  Provider to return global service for observable service for all MediaQuery activations\n */\nexport const OBSERVABLE_MEDIA_PROVIDER = { // tslint:disable-line:variable-name\n  provide: ObservableMedia,\n  deps: [\n    [ new Optional(), new SkipSelf(), ObservableMedia ],\n    MatchMedia,\n    BreakPointRegistry\n  ],\n  useFactory: OBSERVABLE_MEDIA_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BreakPoint} from '../break-point';\n\n/* tslint:disable */\nconst HANDSET_PORTRAIT  = '(orientations: portrait) and (max-width: 599px)';\nconst HANDSET_LANDSCAPE = '(orientations: landscape) and (max-width: 959px)';\n\nconst TABLET_LANDSCAPE  = '(orientations: landscape) and (min-width: 960px) and (max-width: 1279px)';\nconst TABLET_PORTRAIT   = '(orientations: portrait) and (min-width: 600px) and (max-width: 839px)';\n\nconst WEB_PORTRAIT      = '(orientations: portrait) and (min-width: 840px)';\nconst WEB_LANDSCAPE     = '(orientations: landscape) and (min-width: 1280px)';\n\nexport const ScreenTypes = {\n  'HANDSET'           : `${HANDSET_PORTRAIT}, ${HANDSET_LANDSCAPE}`,\n  'TABLET'            : `${TABLET_PORTRAIT} , ${TABLET_LANDSCAPE}`,\n  'WEB'               : `${WEB_PORTRAIT}, ${WEB_LANDSCAPE} `,\n\n  'HANDSET_PORTRAIT'  : `${HANDSET_PORTRAIT}`,\n  'TABLET_PORTRAIT'   : `${TABLET_PORTRAIT} `,\n  'WEB_PORTRAIT'      : `${WEB_PORTRAIT}`,\n\n  'HANDSET_LANDSCAPE' : `${HANDSET_LANDSCAPE}]`,\n  'TABLET_LANDSCAPE'  : `${TABLET_LANDSCAPE}`,\n  'WEB_LANDSCAPE'     : `${WEB_LANDSCAPE}`\n};\n\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n */\nexport const ORIENTATION_BREAKPOINTS : BreakPoint[] = [\n  {'alias': 'handset',            'mediaQuery': ScreenTypes.HANDSET},\n  {'alias': 'handset.landscape',  'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE},\n  {'alias': 'handset.portrait',   'mediaQuery': ScreenTypes.HANDSET_PORTRAIT},\n\n  {'alias': 'tablet',             'mediaQuery': ScreenTypes.TABLET},\n  {'alias': 'tablet.landscape',   'mediaQuery': ScreenTypes.TABLET},\n  {'alias': 'tablet.portrait',    'mediaQuery': ScreenTypes.TABLET_PORTRAIT},\n\n  {'alias': 'web',                'mediaQuery': ScreenTypes.WEB, overlapping : true },\n  {'alias': 'web.landscape',      'mediaQuery': ScreenTypes.WEB_LANDSCAPE, overlapping : true },\n  {'alias': 'web.portrait',       'mediaQuery': ScreenTypes.WEB_PORTRAIT, overlapping : true }\n];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n import {BreakPoint} from '../media-query/breakpoints/break-point';\nimport {extendObject} from './object-extend';\n\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\nfunction firstUpperCase(part: string) {\n  let first = part.length > 0 ? part.charAt(0) : '';\n  let remainder = (part.length > 1) ? part.slice(1) : '';\n  return first.toUpperCase() + remainder;\n}\n\n/**\n * Converts snake-case to SnakeCase.\n * @param name Text to UpperCamelCase\n */\nfunction camelCase(name: string): string {\n  return name\n      .replace(ALIAS_DELIMITERS, '|')\n      .split('|')\n      .map(firstUpperCase)\n      .join('');\n}\n\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n */\nexport function validateSuffixes(list: BreakPoint[]): BreakPoint[] {\n  list.forEach((bp: BreakPoint) => {\n    if (!bp.suffix || bp.suffix === '') {\n      bp.suffix = camelCase(bp.alias);          // create Suffix value based on alias\n      bp.overlapping = bp.overlapping || false; // ensure default value\n    }\n  });\n  return list;\n}\n\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n */\nexport function mergeByAlias(defaults: BreakPoint[], custom: BreakPoint[] = []): BreakPoint[] {\n  const merged = defaults.map((bp) => extendObject({}, bp));\n  const findByAlias = (alias) => merged.reduce((result, bp) => {\n    return result || (( bp.alias === alias) ? bp : null);\n  }, null);\n\n  // Merge custom breakpoints\n  custom.forEach((bp: BreakPoint) => {\n    let target = findByAlias(bp.alias);\n    if (target) {\n      extendObject(target, bp);\n    } else {\n      merged.push(bp);\n    }\n  });\n\n  return validateSuffixes(merged);\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  ElementRef, OnDestroy, SimpleChanges, OnChanges,\n  SimpleChange, Renderer2\n} from '@angular/core';\n\nimport {buildLayoutCSS} from '../../utils/layout-validator';\nimport {\n  StyleDefinition,\n  lookupStyle,\n  lookupInlineStyle,\n  applyStyleToElement,\n  applyStyleToElements\n} from '../../utils/style-utils';\n\nimport {ResponsiveActivation, KeyOptions} from '../responsive/responsive-activation';\nimport {MediaMonitor} from '../../media-query/media-monitor';\nimport {MediaQuerySubscriber} from '../../media-query/media-change';\n\n/** Abstract base class for the Layout API styling directives. */\nexport abstract class BaseFxDirective implements OnDestroy, OnChanges {\n\n  get hasMediaQueryListener() {\n    return !!this._mqActivation;\n  }\n\n  /**\n   * Imperatively determine the current activated [input] value;\n   * if called before ngOnInit() this will return `undefined`\n   */\n  get activatedValue(): string | number {\n    return this._mqActivation ? this._mqActivation.activatedInput : undefined;\n  }\n\n  /**\n   * Change the currently activated input value and force-update\n   * the injected CSS (by-passing change detection).\n   *\n   * NOTE: Only the currently activated input value will be modified;\n   *       other input values will NOT be affected.\n   */\n  set activatedValue(value: string | number) {\n    let key = 'baseKey', previousVal;\n\n    if (this._mqActivation) {\n      key = this._mqActivation.activatedInputKey;\n      previousVal = this._inputMap[key];\n      this._inputMap[key] = value;\n    }\n    let change = new SimpleChange(previousVal, value, false);\n\n    this.ngOnChanges({[key]: change} as SimpleChanges);\n  }\n\n\n  /**\n   * Constructor\n   */\n  constructor(protected _mediaMonitor: MediaMonitor,\n              protected _elementRef: ElementRef,\n              protected _renderer: Renderer2) {\n  }\n\n  // *********************************************\n  // Accessor Methods\n  // *********************************************\n\n  /**\n   * Access to host element's parent DOM node\n   */\n  protected get parentElement(): any {\n    return this._elementRef.nativeElement.parentNode;\n  }\n\n  /**\n   * Access the current value (if any) of the @Input property.\n   */\n  protected _queryInput(key) {\n    return this._inputMap[key];\n  }\n\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  /**\n   * Use post-component-initialization event to perform extra\n   * querying such as computed Display style\n   */\n  ngOnInit() {\n    this._display = this._getDisplayStyle();\n    this._hasInitialized = true;\n  }\n\n  ngOnChanges(change: SimpleChanges) {\n    throw new Error(`BaseFxDirective::ngOnChanges should be overridden in subclass: ${change}`);\n  }\n\n  ngOnDestroy() {\n    if (this._mqActivation) {\n      this._mqActivation.destroy();\n    }\n    this._mediaMonitor = null;\n  }\n\n  // *********************************************\n  // Protected Methods\n  // *********************************************\n\n  /**\n   * Was the directive's default selector used ?\n   * If not, use the fallback value!\n   */\n  protected _getDefaultVal(key: string, fallbackVal: any): string | boolean {\n    let val = this._queryInput(key);\n    let hasDefaultVal = (val !== undefined && val !== null);\n    return (hasDefaultVal && val !== '') ? val : fallbackVal;\n  }\n\n  /**\n   * Quick accessor to the current HTMLElement's `display` style\n   * Note: this allows use to preserve the original style\n   * and optional restore it when the mediaQueries deactivate\n   */\n  protected _getDisplayStyle(source?: HTMLElement): string {\n    let element: HTMLElement = source || this._elementRef.nativeElement;\n    return lookupStyle(element, 'display');\n  }\n\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction).\n   *\n   * Check inline style first then check computed (stylesheet) style.\n   * And optionally add the flow value to element's inline style.\n   */\n  protected _getFlowDirection(target: any, addIfMissing = false): string {\n    let value = 'row';\n\n    if (target) {\n      value = lookupStyle(target, 'flex-direction') || 'row';\n      let hasInlineValue = lookupInlineStyle(target, 'flex-direction');\n\n      if (!hasInlineValue && addIfMissing) {\n        applyStyleToElements(this._renderer, buildLayoutCSS(value), [target]);\n      }\n    }\n\n    return value.trim();\n  }\n\n  /**\n   * Applies styles given via string pair or object map to the directive element.\n   */\n  protected _applyStyleToElement(style: StyleDefinition,\n                                 value?: string | number,\n                                 nativeElement?: any) {\n    let element = nativeElement || this._elementRef.nativeElement;\n    applyStyleToElement(this._renderer, element, style, value);\n  }\n\n  /**\n   * Applies styles given via string pair or object map to the directive's element.\n   */\n  protected _applyStyleToElements(style: StyleDefinition, elements: HTMLElement[ ]) {\n    applyStyleToElements(this._renderer, style, elements || []);\n  }\n\n  /**\n   *  Save the property value; which may be a complex object.\n   *  Complex objects support property chains\n   */\n  protected _cacheInput(key?: string, source?: any) {\n    if (typeof source === 'object') {\n      for (let prop in source) {\n        this._inputMap[prop] = source[prop];\n      }\n    } else {\n      this._inputMap[key] = source;\n    }\n  }\n\n  /**\n   *  Build a ResponsiveActivation object used to manage subscriptions to mediaChange notifications\n   *  and intelligent lookup of the directive's property value that corresponds to that mediaQuery\n   *  (or closest match).\n   */\n  protected _listenForMediaQueryChanges(key: string,\n                                        defaultValue: any,\n                                        onMediaQueryChange: MediaQuerySubscriber): ResponsiveActivation { // tslint:disable-line:max-line-length\n    if (!this._mqActivation) {\n      let keyOptions = new KeyOptions(key, defaultValue, this._inputMap);\n      this._mqActivation = new ResponsiveActivation(\n          keyOptions,\n          this._mediaMonitor,\n          (change) => onMediaQueryChange(change)\n      );\n    }\n    return this._mqActivation;\n  }\n\n  /**\n   * Special accessor to query for all child 'element' nodes regardless of type, class, etc.\n   */\n  protected get childrenNodes() {\n    const obj = this._elementRef.nativeElement.children;\n    const buffer = [];\n\n    // iterate backwards ensuring that length is an UInt32\n    for (let i = obj.length; i--; ) {\n      buffer[i] = obj[i];\n    }\n    return buffer;\n  }\n\n  /**\n   * Fast validator for presence of attribute on the host element\n   */\n  protected hasKeyValue(key) {\n    return this._mqActivation.hasKeyValue(key);\n  }\n\n  protected get hasInitialized() {\n    return this._hasInitialized;\n  }\n\n  /** Original dom Elements CSS display style */\n  protected _display;\n\n  /**\n   * MediaQuery Activation Tracker\n   */\n  protected _mqActivation: ResponsiveActivation;\n\n  /**\n   *  Dictionary of input keys with associated values\n   */\n  protected _inputMap = {};\n\n  /**\n   * Has the `ngOnInit()` method fired\n   *\n   * Used to allow *ngFor tasks to finish and support queries like\n   * getComputedStyle() during ngOnInit().\n   */\n  protected _hasInitialized = false;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnInit,\n  OnChanges,\n  OnDestroy,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\n\nimport {BaseFxDirective} from './base';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\nimport {buildLayoutCSS} from '../../utils/layout-validator';\n/**\n * 'layout' flexbox styling directive\n * Defines the positioning flow direction for the child elements: row or column\n * Optional values: column or row (default)\n * @see https://css-tricks.com/almanac/properties/f/flex-direction/\n *\n */\n@Directive({selector: `\n  [fxLayout],\n  [fxLayout.xs], [fxLayout.sm], [fxLayout.md], [fxLayout.lg], [fxLayout.xl],\n  [fxLayout.lt-sm], [fxLayout.lt-md], [fxLayout.lt-lg], [fxLayout.lt-xl],\n  [fxLayout.gt-xs], [fxLayout.gt-sm], [fxLayout.gt-md], [fxLayout.gt-lg]\n`})\nexport class LayoutDirective extends BaseFxDirective implements OnInit, OnChanges, OnDestroy {\n\n  /**\n   * Create Observable for nested/child 'flex' directives. This allows\n   * child flex directives to subscribe/listen for flexbox direction changes.\n   */\n  protected _announcer: BehaviorSubject<string>;\n\n  /**\n   * Publish observer to enabled nested, dependent directives to listen\n   * to parent 'layout' direction changes\n   */\n  public layout$: Observable<string>;\n\n  /* tslint:disable */\n  @Input('fxLayout')       set layout(val)     { this._cacheInput('layout', val); };\n  @Input('fxLayout.xs')    set layoutXs(val)   { this._cacheInput('layoutXs', val); };\n  @Input('fxLayout.sm')    set layoutSm(val)   { this._cacheInput('layoutSm', val); };\n  @Input('fxLayout.md')    set layoutMd(val)   { this._cacheInput('layoutMd', val); };\n  @Input('fxLayout.lg')    set layoutLg(val)   { this._cacheInput('layoutLg', val); };\n  @Input('fxLayout.xl')    set layoutXl(val)   { this._cacheInput('layoutXl', val); };\n\n  @Input('fxLayout.gt-xs') set layoutGtXs(val) { this._cacheInput('layoutGtXs', val); };\n  @Input('fxLayout.gt-sm') set layoutGtSm(val) { this._cacheInput('layoutGtSm', val); };\n  @Input('fxLayout.gt-md') set layoutGtMd(val) { this._cacheInput('layoutGtMd', val); };\n  @Input('fxLayout.gt-lg') set layoutGtLg(val) { this._cacheInput('layoutGtLg', val); };\n\n  @Input('fxLayout.lt-sm') set layoutLtSm(val) { this._cacheInput('layoutLtSm', val); };\n  @Input('fxLayout.lt-md') set layoutLtMd(val) { this._cacheInput('layoutLtMd', val); };\n  @Input('fxLayout.lt-lg') set layoutLtLg(val) { this._cacheInput('layoutLtLg', val); };\n  @Input('fxLayout.lt-xl') set layoutLtXl(val) { this._cacheInput('layoutLtXl', val); };\n\n  /* tslint:enable */\n  /**\n   *\n   */\n  constructor(monitor: MediaMonitor, elRef: ElementRef, renderer: Renderer2) {\n    super(monitor, elRef, renderer);\n    this._announcer = new BehaviorSubject<string>('row');\n    this.layout$ = this._announcer.asObservable();\n  }\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  /**\n   * On changes to any @Input properties...\n   * Default to use the non-responsive Input value ('fxLayout')\n   * Then conditionally override with the mq-activated Input's current value\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['layout'] != null || this._mqActivation) {\n      this._updateWithDirection();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    super.ngOnInit();\n\n    this._listenForMediaQueryChanges('layout', 'row', (changes: MediaChange) => {\n      this._updateWithDirection(changes.value);\n    });\n    this._updateWithDirection();\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  /**\n   * Validate the direction value and then update the host's inline flexbox styles\n   */\n  protected _updateWithDirection(value?: string) {\n    value = value || this._queryInput('layout') || 'row';\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n\n    // Update styles and announce to subscribers the *new* direction\n    let css = buildLayoutCSS(value);\n\n    this._applyStyleToElement(css);\n    this._announcer.next(css['flex-direction']);\n  }\n\n\n\n\n\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  SimpleChanges, Self, Optional,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\n\nimport {BaseFxDirective} from './base';\nimport {LayoutDirective} from './layout';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\nimport {validateWrapValue, LAYOUT_VALUES} from '../../utils/layout-validator';\n/**\n * @deprecated\n * This functionality is now part of the `fxLayout` API\n *\n * 'layout-wrap' flexbox styling directive\n * Defines wrapping of child elements in layout container\n * Optional values: reverse, wrap-reverse, none, nowrap, wrap (default)]\n *\n *\n * @see https://css-tricks.com/almanac/properties/f/flex-wrap/\n */\n@Directive({selector: `\n  [fxLayoutWrap], [fxLayoutWrap.xs], [fxLayoutWrap.sm], [fxLayoutWrap.lg], [fxLayoutWrap.xl],\n  [fxLayoutWrap.gt-xs], [fxLayoutWrap.gt-sm], [fxLayoutWrap.gt-md], [fxLayoutWrap.gt-lg],\n  [fxLayoutWrap.lt-xs], [fxLayoutWrap.lt-sm], [fxLayoutWrap.lt-md], [fxLayoutWrap.lt-lg]\n`})\nexport class LayoutWrapDirective extends BaseFxDirective implements OnInit, OnChanges, OnDestroy {\n  protected _layout = 'row';  // default flex-direction\n  protected _layoutWatcher: Subscription;\n\n  /* tslint:disable */\n  @Input('fxLayoutWrap')       set wrap(val)     { this._cacheInput('wrap', val); }\n  @Input('fxLayoutWrap.xs')    set wrapXs(val)   { this._cacheInput('wrapXs', val); }\n  @Input('fxLayoutWrap.sm')    set wrapSm(val)   { this._cacheInput('wrapSm', val); };\n  @Input('fxLayoutWrap.md')    set wrapMd(val)   { this._cacheInput('wrapMd', val); };\n  @Input('fxLayoutWrap.lg')    set wrapLg(val)   { this._cacheInput('wrapLg', val); };\n  @Input('fxLayoutWrap.xl')    set wrapXl(val)   { this._cacheInput('wrapXl', val); };\n\n  @Input('fxLayoutWrap.gt-xs') set wrapGtXs(val) { this._cacheInput('wrapGtXs', val); };\n  @Input('fxLayoutWrap.gt-sm') set wrapGtSm(val) { this._cacheInput('wrapGtSm', val); };\n  @Input('fxLayoutWrap.gt-md') set wrapGtMd(val) { this._cacheInput('wrapGtMd', val); };\n  @Input('fxLayoutWrap.gt-lg') set wrapGtLg(val) { this._cacheInput('wrapGtLg', val); };\n\n  @Input('fxLayoutWrap.lt-sm') set wrapLtSm(val) { this._cacheInput('wrapLtSm', val); };\n  @Input('fxLayoutWrap.lt-md') set wrapLtMd(val) { this._cacheInput('wrapLtMd', val); };\n  @Input('fxLayoutWrap.lt-lg') set wrapLtLg(val) { this._cacheInput('wrapLtLg', val); };\n  @Input('fxLayoutWrap.lt-xl') set wrapLtXl(val) { this._cacheInput('wrapLtXl', val); };\n\n  /* tslint:enable */\n  constructor(\n    monitor: MediaMonitor,\n    elRef: ElementRef,\n    renderer: Renderer2,\n    @Optional() @Self() container: LayoutDirective) {\n\n    super(monitor, elRef, renderer);\n\n    if (container) {  // Subscribe to layout direction changes\n      this._layoutWatcher = container.layout$.subscribe(this._onLayoutChange.bind(this));\n    }\n  }\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['wrap'] != null || this._mqActivation) {\n      this._updateWithValue();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    super.ngOnInit();\n\n    this._listenForMediaQueryChanges('wrap', 'wrap', (changes: MediaChange) => {\n      this._updateWithValue(changes.value);\n    });\n    this._updateWithValue();\n  }\n\n  ngOnDestroy() {\n      super.ngOnDestroy();\n    if (this._layoutWatcher) {\n      this._layoutWatcher.unsubscribe();\n    }\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  /**\n   * Cache the parent container 'flex-direction' and update the 'flex' styles\n   */\n  protected _onLayoutChange(direction) {\n    this._layout = (direction || '').toLowerCase().replace('-reverse', '');\n    if (!LAYOUT_VALUES.find(x => x === this._layout)) {\n      this._layout = 'row';\n    }\n\n    this._updateWithValue();\n  }\n\n  protected _updateWithValue(value?: string) {\n    value = value || this._queryInput('wrap');\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n    value = validateWrapValue(value || 'wrap');\n\n    this._applyStyleToElement(this._buildCSS(value));\n  }\n\n  /**\n   * Build the CSS that should be assigned to the element instance\n   */\n  protected _buildCSS(value) {\n    return {\n      'display': 'flex',\n      'flex-wrap': value,\n      'flex-direction': this.flowDirection\n    };\n  }\n\n  protected get flowDirection(): string {\n    let computeFlowDirection = () => this._getFlowDirection(this._elementRef.nativeElement);\n    return this._layoutWatcher ? this._layout : computeFlowDirection();\n  }\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n /**\n * The flex API permits 3 or 1 parts of the value:\n *    - `flex-grow flex-shrink flex-basis`, or\n *    - `flex-basis`\n */\nexport function validateBasis(basis: string, grow = '1', shrink = '1'): string[] {\n  let parts = [grow, shrink, basis];\n\n  let j = basis.indexOf('calc');\n  if (j > 0) {\n    parts[2] = _validateCalcValue(basis.substring(j).trim());\n    let matches = basis.substr(0, j).trim().split(' ');\n    if (matches.length == 2) {\n      parts[0] = matches[0];\n      parts[1] = matches[1];\n    }\n  } else if (j == 0) {\n    parts[2] = _validateCalcValue(basis.trim());\n  } else {\n    let matches = basis.split(' ');\n    parts = (matches.length === 3) ? matches : [\n          grow, shrink, basis\n        ];\n  }\n\n  return parts;\n}\n\n\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n */\nfunction _validateCalcValue(calc: string): string {\n  return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnInit,\n  OnChanges,\n  OnDestroy,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\n\nimport {BaseFxDirective} from './base';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\n\n/**\n * 'flex-align' flexbox styling directive\n * Allows element-specific overrides for cross-axis alignments in a layout container\n * @see https://css-tricks.com/almanac/properties/a/align-self/\n */\n@Directive({\n  selector: `\n  [fxFlexAlign],\n  [fxFlexAlign.xs], [fxFlexAlign.sm], [fxFlexAlign.md], [fxFlexAlign.lg], [fxFlexAlign.xl],\n  [fxFlexAlign.lt-sm], [fxFlexAlign.lt-md], [fxFlexAlign.lt-lg], [fxFlexAlign.lt-xl],\n  [fxFlexAlign.gt-xs], [fxFlexAlign.gt-sm], [fxFlexAlign.gt-md], [fxFlexAlign.gt-lg]\n`\n})\nexport class FlexAlignDirective extends BaseFxDirective implements OnInit, OnChanges, OnDestroy {\n\n  /* tslint:disable */\n  @Input('fxFlexAlign')       set align(val)  { this._cacheInput('align', val);  };\n  @Input('fxFlexAlign.xs')    set alignXs(val)  { this._cacheInput('alignXs', val);  };\n  @Input('fxFlexAlign.sm')    set alignSm(val)  { this._cacheInput('alignSm', val); };\n  @Input('fxFlexAlign.md')    set alignMd(val)  { this._cacheInput('alignMd', val); };\n  @Input('fxFlexAlign.lg')    set alignLg(val)  { this._cacheInput('alignLg', val); };\n  @Input('fxFlexAlign.xl')    set alignXl(val)  { this._cacheInput('alignXl', val); };\n\n  @Input('fxFlexAlign.lt-sm') set alignLtSm(val) { this._cacheInput('alignLtSm', val); };\n  @Input('fxFlexAlign.lt-md') set alignLtMd(val) { this._cacheInput('alignLtMd', val); };\n  @Input('fxFlexAlign.lt-lg') set alignLtLg(val) { this._cacheInput('alignLtLg', val); };\n  @Input('fxFlexAlign.lt-xl') set alignLtXl(val) { this._cacheInput('alignLtXl', val); };\n\n  @Input('fxFlexAlign.gt-xs') set alignGtXs(val)  { this._cacheInput('alignGtXs', val); };\n  @Input('fxFlexAlign.gt-sm') set alignGtSm(val)  { this._cacheInput('alignGtSm', val); };\n  @Input('fxFlexAlign.gt-md') set alignGtMd(val)  { this._cacheInput('alignGtMd', val); };\n  @Input('fxFlexAlign.gt-lg') set alignGtLg(val)  { this._cacheInput('alignGtLg', val); };\n\n  /* tslint:enable */\n  constructor(monitor: MediaMonitor, elRef: ElementRef, renderer: Renderer2) {\n    super(monitor, elRef, renderer);\n  }\n\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  /**\n   * For @Input changes on the current mq activation property, see onMediaQueryChanges()\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['align'] != null || this._mqActivation) {\n      this._updateWithValue();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    super.ngOnInit();\n\n    this._listenForMediaQueryChanges('align', 'stretch', (changes: MediaChange) => {\n      this._updateWithValue(changes.value);\n    });\n    this._updateWithValue();\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  protected _updateWithValue(value?: string|number) {\n    value = value || this._queryInput('align') || 'stretch';\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n\n    this._applyStyleToElement(this._buildCSS(value));\n  }\n\n  protected _buildCSS(align) {\n    let css = {};\n\n    // Cross-axis\n    switch (align) {\n      case 'start':\n        css['align-self'] = 'flex-start';\n        break;\n      case 'end':\n        css['align-self'] = 'flex-end';\n        break;\n      default:\n        css['align-self'] = align;\n        break;\n    }\n\n    return css;\n  }\n}\n"],"names":["enumerable","configurable","set","val","this","_cacheInput","Object","defineProperty","ShowHideDirective","prototype","negativeOf","_getDisplayStyle","_layout","_super","call","ngOnChanges","changes","hasInitialized","_mqActivation","_updateWithValue","_this","ngOnInit","ngOnDestroy","_layoutWatcher","unsubscribe","value","_getDefaultVal","activatedInput","shouldShow","_validateTruthy","_applyStyleToElement","_buildCSS","show","display","_display","FALSY","indexOf","decorators","type","Directive","args","selector","ctorParameters","MediaMonitor","LayoutDirective","Optional","Self","ElementRef","Renderer2","Input","showSm","showLg","showLtSm","showLtLg","showGtXs","showGtMd","hide","hideSm","hideLg","hideLtSm","hideLtLg","hideLtXl","hideGtXs","hideGtSm","hideGtMd","hideGtLg","FlexAlignDirective","monitor","elRef","renderer","tslib_1.__extends","_listenForMediaQueryChanges","_queryInput","align","css","BaseFxDirective","alignSm","alignLg","alignLtSm","alignLtLg","alignGtXs","alignGtMd","margin","height","min-width","min-height","FlexFillDirective","FLEX_FILL_CSS","FlexOffsetDirective","_container","watchParentFlow","layout$","subscribe","direction","_onLayoutChange","offset","isPercent","String","isNaN","isFlowHorizontal","_getFlowDirection","parentElement","margin-left","margin-top","SkipSelf","propDecorators","offsetXs","offsetSm","offsetMd","offsetXl","offsetLtSm","offsetLtMd","offsetLtLg","offsetLtXl","offsetGtXs","offsetGtSm","offsetGtMd","offsetGtLg","FlexOrderDirective","parseInt","order","orderXs","orderSm","orderMd","orderLg","orderXl","orderGtXs","orderGtSm","orderGtMd","orderGtLg","orderLtSm","orderLtMd","orderLtXl","LayoutAlignDirective","container","bind","map","LAYOUT_VALUES","find","x","_a","split","main_axis","cross_axis","extendObject","flex-direction","box-sizing","_allowStretching","layout","max-width","max-height","alignXs","alignMd","alignXl","alignGtSm","alignGtLg","alignLtMd","alignLtXl","LayoutGapDirective","_zone","__extends","d","b","__","constructor","extendStatics","create","isBrowser","ɵgetDOM","supportsDOMEvents","getDom","list","mediaQueries","filter","it","ALL_STYLES","length","setAttribute","styleEl_1","cssText","query","createTextNode","appendChild","_document","head","forEach","mq","e","console","error","normalizeQuery","mediaQuery","unique","seen","item","hasOwnProperty","dest","sources","_i","arguments","TypeError","sources_1","source","key","mergeAlias","mqAlias","alias","suffix","OBSERVABLE_MEDIA_PROVIDER_FACTORY","parentService","matchMedia","breakpoints","MediaService","firstUpperCase","part","first","charAt","remainder","slice","toUpperCase","camelCase","name","replace","ALIAS_DELIMITERS","join","validateSuffixes","bp","overlapping","mergeByAlias","defaults","custom","merged","result","target","findByAlias","push","buildMergedBreakPoints","_custom","options","orientation","orientations","ORIENTATION_BREAKPOINTS","concat","DEFAULT_BREAKPOINTS","DEFAULT_BREAKPOINTS_PROVIDER_FACTORY","CUSTOM_BREAKPOINTS_PROVIDER_FACTORY","provide","BREAKPOINTS","useFactory","MEDIA_MONITOR_PROVIDER_FACTORY","parentMonitor","buildLayoutCSS","validateValue","buildCSS","toLowerCase","validateWrapValue","wrap","flow","flex-wrap","applyCssPrefixes","applyStyleToElement","element","style","styles","applyMultiValueStyleToElement","applyStyleToElements","elements","el","keys","values","Array","isArray","values_1","setStyle","lookupInlineStyle","styleName","getStyle","lookupStyle","inlineOnly","immediateValue","getComputedStyle","getPropertyValue","trim","validateBasis","basis","grow","shrink","parts","j","_validateCalcValue","substring","matches","substr","calc","setPrototypeOf","__proto__","p","MediaChange","MatchMedia","_registry","Map","_source","BehaviorSubject","_observable$","asObservable","isActive","has","get","observe","registerQuery","change","prepareQueryCSS","mql","onMQLEvent","run","next","_buildMQL","addListener","media","removeListener","Injectable","NgZone","undefined","Inject","DOCUMENT","BreakPointRegistry","overlaps","nonOverlaps","findByQuery","_breakpoints","_matchMedia","_registerBreakpoints","items","overlappings","reverse","found","hasAlias","media$","queries","sortedItems","ObservableMedia","complete","mediaWatcher","filterOverlaps","_registerBreakPoints","_toMediaQuery","observable$","_buildObservable","self","activationsOnly","addAliasInformation","_findByQuery","excludeOverlaps","_findByAlias","OBSERVABLE_MEDIA_PROVIDER","deps","RESPONSIVE_ALIASES","TABLET_LANDSCAPE","TABLET_PORTRAIT","WEB_PORTRAIT","WEB_LANDSCAPE","ScreenTypes","HANDSET","HANDSET_PORTRAIT","TABLET","WEB","HANDSET_LANDSCAPE","MediaQueriesModule","NgModule","providers","DEFAULT_BREAKPOINTS_PROVIDER","MEDIA_MONITOR_PROVIDER","KeyOptions","baseKey","defaultValue","inputKeys","ResponsiveActivation","_options","_mediaMonitor","_onMediaChanges","_subscribers","_configureChangeObservers","_activatedInputKey","activatedInputKey","hasKeyValue","_lookupKeyValue","destroy","link","subscriptions","_buildRegistryMap","_keyInUse","buildChanges","clone","property","mediaMonitor","_onMonitorEvents","_calculateActivatedValue","current","currentKey","newKey","_validateInputKey","inputKey","activeOverlaps","isMissingKey","some","_elementRef","_renderer","_inputMap","_hasInitialized","previousVal","SimpleChange","nativeElement","parentNode","fallbackVal","addIfMissing","_applyStyleToElements","prop","onMediaQueryChange","keyOptions","obj","children","i","buffer","_announcer","_updateWithDirection","layoutXs","layoutSm","layoutMd","layoutLg","layoutXl","layoutGtXs","layoutGtSm","layoutGtMd","layoutGtLg","layoutLtSm","layoutLtMd","layoutLtLg","layoutLtXl","LayoutWrapDirective","flowDirection","wrapXs","wrapSm","wrapMd","wrapLg","wrapXl","wrapGtXs","wrapGtSm","wrapGtMd","wrapGtLg","wrapLtSm","wrapLtMd","wrapLtLg","wrapLtXl","FlexDirective","_wrap","_updateStyle","flexBasis","_validateValue","apply","clearStyles","flex","hasCalc","isValue","max","min","usingCalc","isPx","isFixed","flexXs","flexSm","flexMd","flexLg","flexXl","flexGtXs","flexGtSm","flexGtMd","flexGtLg","flexLtSm","flexLtMd","flexLtLg","flexLtXl"],"mappings":"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"}