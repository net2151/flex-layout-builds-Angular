{"version":3,"file":"mock-match-media.js","sourceRoot":"","sources":["mock-match-media.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable, NgZone} from '@angular/core';\nimport {MatchMedia} from '../match-media';\nimport {BreakPointRegistry} from '../breakpoints/break-point-registry';\n\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\n@Injectable()\nexport class MockMatchMedia extends MatchMedia {\n\n  /**\n   * Special flag used to test BreakPoint registrations with MatchMedia\n   */\n  public autoRegisterQueries = true;\n\n  constructor(_zone: NgZone, private _breakpoints: BreakPointRegistry) {\n    super(_zone);\n    this._actives = [];\n  }\n\n  /**\n   * Easy method to clear all listeners for all mediaQueries\n   */\n  clearAll() {\n    this._registry.forEach((mql: MockMediaQueryList, mediaQuery: string) => {\n      mql.destroy();\n    });\n    this._registry.clear();\n  }\n\n  /**\n   * Feature to support manual, simulated activation of a mediaQuery.\n   */\n  activate(mediaQuery: string, useOverlaps = false): boolean {\n    mediaQuery = this._validateQuery(mediaQuery);\n\n    if (!this.isActive(mediaQuery)) {\n      this._deactivateAll();\n\n      this._registerMediaQuery(mediaQuery);\n      this._activateWithOverlaps(mediaQuery, useOverlaps);\n    }\n\n    return this.hasActivated;\n  }\n\n  /**\n   * Converts an optional mediaQuery alias to a specific, valid mediaQuery\n   */\n  _validateQuery(queryOrAlias) {\n    let bp = this._breakpoints.findByAlias(queryOrAlias);\n    if (bp) {\n      queryOrAlias = bp.mediaQuery;\n    }\n    return queryOrAlias;\n  }\n\n  /**\n   * Manually activate any overlapping mediaQueries to simulate\n   * similar functionality in the window.matchMedia()\n   *\n   *   \"md\"    active == true\n   *   \"gt-sm\" active == true\n   *   \"sm\"    active == false\n   *   \"gt-xs\" active == true\n   *   \"xs\"    active == false\n   *\n   */\n  private _activateWithOverlaps(mediaQuery: string, useOverlaps: boolean): boolean {\n    if (useOverlaps) {\n      let bp = this._breakpoints.findByQuery(mediaQuery);\n      switch (bp ? bp.alias : 'unknown') {\n        case 'xl'   :\n          this._activateByAlias('gt-lg');   // note the fall-thrus\n        case 'gt-lg':\n        case 'lg'   :\n          this._activateByAlias('gt-md');\n        case 'gt-md':\n        case 'md'   :\n          this._activateByAlias('gt-sm');\n        case 'gt-sm':\n        case 'sm'   :\n          this._activateByAlias('gt-xs');\n          break;\n        default     :\n          break;\n      }\n    }\n    // Activate last since the responsiveActivation is watching *this* mediaQuery\n    return this._activateByQuery(mediaQuery);\n  }\n\n  /**\n   *\n   */\n  private _activateByAlias(alias) {\n    let bp = this._breakpoints.findByAlias(alias);\n    if (bp) {\n      alias = bp.mediaQuery;\n    }\n    this._activateByQuery(alias);\n  }\n\n  /**\n   *\n   */\n  private _activateByQuery(mediaQuery) {\n    let mql = <MockMediaQueryList> this._registry.get(mediaQuery);\n    if (mql) {\n      this._actives.push(mql.activate());\n    }\n    return this.hasActivated;\n  }\n\n  /**\n   * Deactivate all current Mock MQLs\n   */\n  private _deactivateAll() {\n    if (this._actives.length) {\n      // Deactivate all current MQLs and reset the buffer\n      this._actives.map(it => it.deactivate());\n      this._actives = [];\n    }\n    return this;\n  }\n\n  /**\n   * Insure the mediaQuery is registered with MatchMedia\n   */\n  private _registerMediaQuery(mediaQuery) {\n    if (!this._registry.has(mediaQuery) && this.autoRegisterQueries) {\n      this.registerQuery(mediaQuery);\n    }\n  }\n\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  protected _buildMQL(query: string): MediaQueryList {\n    return new MockMediaQueryList(query);\n  }\n\n  protected get hasActivated() {\n    return (this._actives.length > 0);\n  }\n\n  private _actives: MockMediaQueryList[] = [];\n}\n\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nexport class MockMediaQueryList implements MediaQueryList {\n  private _isActive = false;\n  private _listeners: Array<MediaQueryListListener> = [];\n\n  get matches(): boolean {\n    return this._isActive;\n  }\n\n  get media(): string {\n    return this._mediaQuery;\n  }\n\n  constructor(private _mediaQuery: string) {\n  }\n\n  /**\n   *\n   */\n  destroy() {\n    this.deactivate();\n    this._listeners = [];\n  }\n\n  /**\n   * Notify all listeners that 'matches === TRUE'\n   */\n  activate(): MockMediaQueryList {\n    this._isActive = true;\n    this._listeners.forEach((callback) => {\n      callback(this);\n    });\n\n    return this;\n  }\n\n  /**\n   * Notify all listeners that 'matches === false'\n   */\n  deactivate(): MockMediaQueryList {\n    if (this._isActive) {\n      this._isActive = false;\n      this._listeners.forEach((callback) => {\n        callback(this);\n      });\n    }\n    return this;\n  }\n\n  /**\n   *\n   */\n  addListener(listener: MediaQueryListListener) {\n    if (this._listeners.indexOf(listener) === -1) {\n      this._listeners.push(listener);\n    }\n    if (this._isActive) {\n      listener(this);\n    }\n  }\n\n  removeListener(listener: MediaQueryListListener) {\n  }\n}\n\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}