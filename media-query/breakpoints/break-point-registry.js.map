{"version":3,"file":"break-point-registry.js","sourceRoot":"","sources":["break-point-registry.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;;;;;GAMG;AACH,OAAO,EAAC,UAAU,EAAE,MAAM,EAAC,MAAM,eAAe,CAAC;AAIjD,OAAO,EAAC,WAAW,EAAC,MAAM,gBAAgB,CAAC;AAG3C;;;;GAIG;AAEH,IAAa,kBAAkB;IAE7B,4BAAyC,SAAwB;QAAxB,cAAS,GAAT,SAAS,CAAe;IACjE,CAAC;IAKD,sBAAI,qCAAK;QAHT;;WAEG;aACH;YACE,MAAM,CAAK,IAAI,CAAC,SAAS,SAAE;QAC7B,CAAC;;;OAAA;IAED;;OAEG;IACH,wCAAW,GAAX,UAAY,KAAa;QACvB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,KAAK,IAAI,KAAK,EAAjB,CAAiB,CAAC,CAAC;IACtD,CAAC;IAED,wCAAW,GAAX,UAAY,KAAa;QACvB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,UAAU,IAAI,KAAK,EAAtB,CAAsB,CAAC,CAAC;IAC3D,CAAC;IAMD,sBAAI,4CAAY;QAJhB;;;WAGG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,WAAW,IAAI,IAAI,EAAtB,CAAsB,CAAC,CAAC;QAC7D,CAAC;;;OAAA;IAKD,sBAAI,uCAAO;QAHX;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,KAAK,EAAR,CAAQ,CAAC,CAAC;QAC5C,CAAC;;;OAAA;IAOD,sBAAI,wCAAQ;QALZ;;;;WAIG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,MAAM,EAAT,CAAS,CAAC,CAAC;QAC7C,CAAC;;;OAAA;IACH,yBAAC;AAAD,CAAC,AA9CD,IA8CC;AA9CY,kBAAkB;IAD9B,UAAU,EAAE;IAGE,WAAA,MAAM,CAAC,WAAW,CAAC,CAAA;;GAFrB,kBAAkB,CA8C9B;SA9CY,kBAAkB","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable, Inject} from '@angular/core';\nimport {OpaqueToken} from '@angular/core';  // tslint:disable-line:no-unused-variable\n\nimport {BreakPoint} from './break-point';\nimport {BREAKPOINTS} from \"./break-points\";\n\n\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overriden from custom, application-specific ranges\n *\n */\n@Injectable()\nexport class BreakPointRegistry {\n\n  constructor(@Inject(BREAKPOINTS) private _registry: BreakPoint[ ]) {\n  }\n\n  /**\n   * Accessor to raw list\n   */\n  get items(): BreakPoint[ ] {\n    return [...this._registry];\n  }\n\n  /**\n   * Search breakpoints by alias (e.g. gt-xs)\n   */\n  findByAlias(alias: string): BreakPoint {\n    return this._registry.find(bp => bp.alias == alias);\n  }\n\n  findByQuery(query: string): BreakPoint {\n    return this._registry.find(bp => bp.mediaQuery == query);\n  }\n\n  /**\n   * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n   * e.g. gt-sm overlaps md, lg, and xl\n   */\n  get overlappings(): BreakPoint[] {\n    return this._registry.filter(it => it.overlapping == true);\n  }\n\n  /**\n   * Get list of all registered (non-empty) breakpoint aliases\n   */\n  get aliases(): string[] {\n    return this._registry.map(it => it.alias);\n  }\n\n  /**\n   * Aliases are mapped to properties using suffixes\n   * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n   * for property layoutGtSM.\n   */\n  get suffixes(): string[] {\n    return this._registry.map(it => it.suffix);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}