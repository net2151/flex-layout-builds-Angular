{"version":3,"file":"basis-validator.js","sourceRoot":"","sources":["basis-validator.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;GAUG;AACH,AAXA;;;;;;;;;;GAUG,CACH,MAAM,wBAAwB,KAAa,EAAE,IAAU,EAAE,MAAY;IAAxB,qBAAA,EAAA,UAAU;IAAE,uBAAA,EAAA,YAAY;IACnE,IAAI,KAAK,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;IAElC,IAAI,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC9B,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACV,KAAK,CAAC,CAAC,CAAC,GAAG,kBAAkB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QACzD,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACnD,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;YACxB,KAAK,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YACtB,KAAK,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QACxB,CAAC;IACH,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAClB,KAAK,CAAC,CAAC,CAAC,GAAG,kBAAkB,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;IAC9C,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,IAAI,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC/B,KAAK,GAAG,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,GAAG,OAAO,GAAG;YACzC,IAAI,EAAE,MAAM,EAAE,KAAK;SACpB,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,KAAK,CAAC;AACf,CAAC;AAGD;;;GAGG;AACH,4BAA4B,IAAY;IACtC,IAAI,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IACrC,IAAI,YAAY,GAAG,cAAM,OAAA,SAAS,CAAC,MAAM,CAAC,UAAC,KAAK,EAAE,QAAQ;QACxD,MAAM,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;IAC/C,CAAC,EAAE,CAAC,CAAC,EAFoB,CAEpB,CAAC;IAEN,EAAE,CAAC,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;QACvB,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACjC,IAAI,MAAM,GAAG,YAAY,EAAE,GAAG,CAAC,CAAC;QAChC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAC5F,CAAC;IACD,MAAM,CAAC,IAAI,CAAC;AACd,CAAC","sourcesContent":["/**\n * The flex API permits 3 or 1 parts of the value:\n *    - `flex-grow flex-shrink flex-basis`, or\n *    - `flex-basis`\n * Flex-Basis values can be complicated short-hand versions such as:\n *   - \"3 3 calc(15em + 20px)\"\n *   - \"calc(15em + 20px)\"\n *   - \"calc(15em+20px)\"\n *   - \"37px\"\n *   = \"43%\"\n */\nexport function validateBasis(basis: string, grow = \"1\", shrink = \"1\"): string[] {\n  let parts = [grow, shrink, basis];\n\n  let j = basis.indexOf('calc');\n  if (j > 0) {\n    parts[2] = _validateCalcValue(basis.substring(j).trim());\n    let matches = basis.substr(0, j).trim().split(\" \");\n    if (matches.length == 2) {\n      parts[0] = matches[0];\n      parts[1] = matches[1];\n    }\n  } else if (j == 0) {\n    parts[2] = _validateCalcValue(basis.trim());\n  } else {\n    let matches = basis.split(\" \");\n    parts = (matches.length === 3) ? matches : [\n      grow, shrink, basis\n    ];\n  }\n\n  return parts;\n}\n\n\n/**\n * Calc expressions require whitespace before & after the operator\n * This is a simple, crude whitespace padding solution.\n */\nfunction _validateCalcValue(calc: string): string {\n  let operators = [\"+\", \"-\", \"*\", \"/\"];\n  let findOperator = () => operators.reduce((index, operator) => {\n    return index || (calc.indexOf(operator) + 1);\n  }, 0);\n\n  if (findOperator() > 0) {\n    calc = calc.replace(/[\\s]/g, \"\");\n    let offset = findOperator() - 1;\n    calc = calc.substr(0, offset) + \" \" + calc.charAt(offset) + \" \" + calc.substr(offset + 1);\n  }\n  return calc;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}